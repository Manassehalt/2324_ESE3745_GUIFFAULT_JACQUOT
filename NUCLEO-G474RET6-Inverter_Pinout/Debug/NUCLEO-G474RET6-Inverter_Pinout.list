
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009010  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080091f0  080091f0  0000a1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009490  08009490  0000b124  2**0
                  CONTENTS
  4 .ARM          00000008  08009490  08009490  0000a490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009498  08009498  0000b124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009498  08009498  0000a498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800949c  0800949c  0000a49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  080094a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000124  080095c4  0000b124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  080095c4  0000b644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6e8  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036bb  00000000  00000000  0002583c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00028ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001108  00000000  00000000  0002a500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a24c  00000000  00000000  0002b608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3e9  00000000  00000000  00055854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114654  00000000  00000000  00070c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185291  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006930  00000000  00000000  001852d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  0018bc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	080091d8 	.word	0x080091d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	080091d8 	.word	0x080091d8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f007 fd40 	bl	800807e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800063a:	2201      	movs	r2, #1
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800066a:	f001 fb4b 	bl	8001d04 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000674:	f000 fab6 	bl	8000be4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000684:	f002 f966 	bl	8002954 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800068e:	f000 faa9 	bl	8000be4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_ADC1_Init+0xec>)
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 80006b0:	f001 fcea 	bl	8002088 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ba:	f000 fa93 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000140 	.word	0x20000140
 80006cc:	21800100 	.word	0x21800100

080006d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f007 fcce 	bl	800807e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000794 <MX_ADC2_Init+0xc4>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800070a:	2204      	movs	r2, #4
 800070c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074a:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800074c:	f001 fada 	bl	8001d04 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000756:	f000 fa45 	bl	8000be4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC2_Init+0xc8>)
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075e:	2306      	movs	r3, #6
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	@ 0x7f
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000778:	f001 fc86 	bl	8002088 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000782:	f000 fa2f 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001ac 	.word	0x200001ac
 8000794:	50000100 	.word	0x50000100
 8000798:	19200040 	.word	0x19200040

0800079c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a4      	sub	sp, #144	@ 0x90
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b8:	2254      	movs	r2, #84	@ 0x54
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fc5e 	bl	800807e <memset>
  if(adcHandle->Instance==ADC1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ca:	d174      	bne.n	80008b6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fb39 	bl	8003e54 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007e8:	f000 f9fc 	bl	8000be4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007ec:	4b63      	ldr	r3, [pc, #396]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a62      	ldr	r2, [pc, #392]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007f6:	4b61      	ldr	r3, [pc, #388]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10b      	bne.n	8000816 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007fe:	4b60      	ldr	r3, [pc, #384]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a5f      	ldr	r2, [pc, #380]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b5d      	ldr	r3, [pc, #372]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a59      	ldr	r2, [pc, #356]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b57      	ldr	r3, [pc, #348]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a4d      	ldr	r2, [pc, #308]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b4b      	ldr	r3, [pc, #300]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800085e:	2304      	movs	r3, #4
 8000860:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000872:	4619      	mov	r1, r3
 8000874:	4843      	ldr	r0, [pc, #268]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000876:	f002 fb15 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800087a:	2302      	movs	r3, #2
 800087c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f002 fb06 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000898:	2303      	movs	r3, #3
 800089a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089c:	2303      	movs	r3, #3
 800089e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4836      	ldr	r0, [pc, #216]	@ (8000988 <HAL_ADC_MspInit+0x1ec>)
 80008b0:	f002 faf8 	bl	8002ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008b4:	e05e      	b.n	8000974 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a34      	ldr	r2, [pc, #208]	@ (800098c <HAL_ADC_MspInit+0x1f0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d159      	bne.n	8000974 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fabf 	bl	8003e54 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008dc:	f000 f982 	bl	8000be4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a25      	ldr	r2, [pc, #148]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800093a:	230b      	movs	r3, #11
 800093c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000952:	f002 faa7 	bl	8002ea4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f002 fa98 	bl	8002ea4 <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3790      	adds	r7, #144	@ 0x90
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000218 	.word	0x20000218
 8000980:	40021000 	.word	0x40021000
 8000984:	48000800 	.word	0x48000800
 8000988:	48000400 	.word	0x48000400
 800098c:	50000100 	.word	0x50000100

08000990 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a3e      	ldr	r2, [pc, #248]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009be:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a38      	ldr	r2, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a32      	ldr	r2, [pc, #200]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a26      	ldr	r2, [pc, #152]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f002 fbbf 	bl	80031a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a30:	f002 fbba 	bl	80031a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4818      	ldr	r0, [pc, #96]	@ (8000aac <MX_GPIO_Init+0x11c>)
 8000a4c:	f002 fa2a 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f002 fa1b 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a86:	f002 fa0d 	bl	8002ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2028      	movs	r0, #40	@ 0x28
 8000a90:	f002 f920 	bl	8002cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	@ 0x28
 8000a96:	f002 f937 	bl	8002d08 <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	48000800 	.word	0x48000800

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab4:	f000 ff15 	bl	80018e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab8:	f000 f838 	bl	8000b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abc:	f7ff ff68 	bl	8000990 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000ac0:	f7ff fe06 	bl	80006d0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000ac4:	f7ff fd8c 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ac8:	f000 fa50 	bl	8000f6c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000acc:	f000 fafa 	bl	80010c4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ad0:	f000 fc2e 	bl	8001330 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ad4:	f000 fc78 	bl	80013c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8000ad8:	f000 fd98 	bl	800160c <Shell_Init>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000adc:	2100      	movs	r1, #0
 8000ade:	4810      	ldr	r0, [pc, #64]	@ (8000b20 <main+0x70>)
 8000ae0:	f003 fd38 	bl	8004554 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	480e      	ldr	r0, [pc, #56]	@ (8000b20 <main+0x70>)
 8000ae8:	f004 fe1c 	bl	8005724 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000aec:	2104      	movs	r1, #4
 8000aee:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <main+0x70>)
 8000af0:	f003 fd30 	bl	8004554 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000af4:	2104      	movs	r1, #4
 8000af6:	480a      	ldr	r0, [pc, #40]	@ (8000b20 <main+0x70>)
 8000af8:	f004 fe14 	bl	8005724 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000afc:	2108      	movs	r1, #8
 8000afe:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <main+0x70>)
 8000b00:	f003 fd28 	bl	8004554 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000b04:	2108      	movs	r1, #8
 8000b06:	4806      	ldr	r0, [pc, #24]	@ (8000b20 <main+0x70>)
 8000b08:	f004 fe0c 	bl	8005724 <HAL_TIMEx_PWMN_Start>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, sizeof(rxBuffer));  // Active la réception en interruption
 8000b0c:	2214      	movs	r2, #20
 8000b0e:	4905      	ldr	r1, [pc, #20]	@ (8000b24 <main+0x74>)
 8000b10:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <main+0x78>)
 8000b12:	f005 f963 	bl	8005ddc <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000b16:	f000 fdb9 	bl	800168c <Shell_Loop>
	{
 8000b1a:	bf00      	nop
 8000b1c:	e7fb      	b.n	8000b16 <main+0x66>
 8000b1e:	bf00      	nop
 8000b20:	20000280 	.word	0x20000280
 8000b24:	2000021c 	.word	0x2000021c
 8000b28:	20000318 	.word	0x20000318

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b094      	sub	sp, #80	@ 0x50
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0318 	add.w	r3, r7, #24
 8000b36:	2238      	movs	r2, #56	@ 0x38
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f007 fa9f 	bl	800807e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f002 fb66 	bl	8003220 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b5c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b62:	2303      	movs	r3, #3
 8000b64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b66:	2306      	movs	r3, #6
 8000b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b6a:	2355      	movs	r3, #85	@ 0x55
 8000b6c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7a:	f107 0318 	add.w	r3, r7, #24
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 fc02 	bl	8003388 <HAL_RCC_OscConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b8a:	f000 f82b 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8e:	230f      	movs	r3, #15
 8000b90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	2303      	movs	r3, #3
 8000b94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 ff06 	bl	80039b8 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000bb2:	f000 f817 	bl	8000be4 <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3750      	adds	r7, #80	@ 0x50
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a04      	ldr	r2, [pc, #16]	@ (8000be0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d101      	bne.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bd2:	f000 fe9f 	bl	8001914 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40001000 	.word	0x40001000

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <Error_Handler+0x8>

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8000c34 <HAL_MspInit+0x44>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c12:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <HAL_MspInit+0x44>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c26:	f002 fb9f 	bl	8003368 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	@ 0x30
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c48:	4b2c      	ldr	r3, [pc, #176]	@ (8000cfc <HAL_InitTick+0xc4>)
 8000c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000cfc <HAL_InitTick+0xc4>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c54:	4b29      	ldr	r3, [pc, #164]	@ (8000cfc <HAL_InitTick+0xc4>)
 8000c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c60:	f107 020c 	add.w	r2, r7, #12
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 f87a 	bl	8003d64 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c70:	f003 f84c 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8000c74:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c78:	4a21      	ldr	r2, [pc, #132]	@ (8000d00 <HAL_InitTick+0xc8>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	0c9b      	lsrs	r3, r3, #18
 8000c80:	3b01      	subs	r3, #1
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <HAL_InitTick+0xcc>)
 8000c86:	4a20      	ldr	r2, [pc, #128]	@ (8000d08 <HAL_InitTick+0xd0>)
 8000c88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <HAL_InitTick+0xcc>)
 8000c8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c90:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c92:	4a1c      	ldr	r2, [pc, #112]	@ (8000d04 <HAL_InitTick+0xcc>)
 8000c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c96:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <HAL_InitTick+0xcc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <HAL_InitTick+0xcc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ca4:	4817      	ldr	r0, [pc, #92]	@ (8000d04 <HAL_InitTick+0xcc>)
 8000ca6:	f003 fb23 	bl	80042f0 <HAL_TIM_Base_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d11b      	bne.n	8000cf0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cb8:	4812      	ldr	r0, [pc, #72]	@ (8000d04 <HAL_InitTick+0xcc>)
 8000cba:	f003 fb7b 	bl	80043b4 <HAL_TIM_Base_Start_IT>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d111      	bne.n	8000cf0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ccc:	2036      	movs	r0, #54	@ 0x36
 8000cce:	f002 f81b 	bl	8002d08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d808      	bhi.n	8000cea <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	2036      	movs	r0, #54	@ 0x36
 8000cde:	f001 fff9 	bl	8002cd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <HAL_InitTick+0xd4>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	e002      	b.n	8000cf0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3730      	adds	r7, #48	@ 0x30
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	431bde83 	.word	0x431bde83
 8000d04:	20000230 	.word	0x20000230
 8000d08:	40001000 	.word	0x40001000
 8000d0c:	200000c0 	.word	0x200000c0

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <NMI_Handler+0x4>

08000d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <MemManage_Handler+0x4>

08000d28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <USART2_IRQHandler+0x10>)
 8000d76:	f005 f887 	bl	8005e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000318 	.word	0x20000318

08000d84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d88:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <USART3_IRQHandler+0x10>)
 8000d8a:	f005 f87d 	bl	8005e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200003a8 	.word	0x200003a8

08000d98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000d9c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000da0:	f002 fa1a 	bl	80031d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dac:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <TIM6_DAC_IRQHandler+0x10>)
 8000dae:	f003 fce3 	bl	8004778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000230 	.word	0x20000230

08000dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return 1;
 8000dc0:	2301      	movs	r3, #1
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <_kill>:

int _kill(int pid, int sig)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dd6:	f007 f9fd 	bl	80081d4 <__errno>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2216      	movs	r2, #22
 8000dde:	601a      	str	r2, [r3, #0]
  return -1;
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <_exit>:

void _exit (int status)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ffe7 	bl	8000dcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dfe:	bf00      	nop
 8000e00:	e7fd      	b.n	8000dfe <_exit+0x12>

08000e02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	e00a      	b.n	8000e2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e14:	f3af 8000 	nop.w
 8000e18:	4601      	mov	r1, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	60ba      	str	r2, [r7, #8]
 8000e20:	b2ca      	uxtb	r2, r1
 8000e22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	3301      	adds	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	dbf0      	blt.n	8000e14 <_read+0x12>
  }

  return len;
 8000e32:	687b      	ldr	r3, [r7, #4]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	e009      	b.n	8000e62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	60ba      	str	r2, [r7, #8]
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	dbf1      	blt.n	8000e4e <_write+0x12>
  }
  return len;
 8000e6a:	687b      	ldr	r3, [r7, #4]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_close>:

int _close(int file)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e9c:	605a      	str	r2, [r3, #4]
  return 0;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <_isatty>:

int _isatty(int file)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f007 f962 	bl	80081d4 <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20020000 	.word	0x20020000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	2000027c 	.word	0x2000027c
 8000f44:	20000648 	.word	0x20000648

08000f48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b098      	sub	sp, #96	@ 0x60
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f72:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2234      	movs	r2, #52	@ 0x34
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 f870 	bl	800807e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f9e:	4b47      	ldr	r3, [pc, #284]	@ (80010bc <MX_TIM1_Init+0x150>)
 8000fa0:	4a47      	ldr	r2, [pc, #284]	@ (80010c0 <MX_TIM1_Init+0x154>)
 8000fa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fa4:	4b45      	ldr	r3, [pc, #276]	@ (80010bc <MX_TIM1_Init+0x150>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000faa:	4b44      	ldr	r3, [pc, #272]	@ (80010bc <MX_TIM1_Init+0x150>)
 8000fac:	2220      	movs	r2, #32
 8000fae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8000fb0:	4b42      	ldr	r3, [pc, #264]	@ (80010bc <MX_TIM1_Init+0x150>)
 8000fb2:	f241 0299 	movw	r2, #4249	@ 0x1099
 8000fb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b40      	ldr	r3, [pc, #256]	@ (80010bc <MX_TIM1_Init+0x150>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80010bc <MX_TIM1_Init+0x150>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80010bc <MX_TIM1_Init+0x150>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fca:	483c      	ldr	r0, [pc, #240]	@ (80010bc <MX_TIM1_Init+0x150>)
 8000fcc:	f003 fa6a 	bl	80044a4 <HAL_TIM_PWM_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000fd6:	f7ff fe05 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fea:	4619      	mov	r1, r3
 8000fec:	4833      	ldr	r0, [pc, #204]	@ (80010bc <MX_TIM1_Init+0x150>)
 8000fee:	f004 fc5b 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ff8:	f7ff fdf4 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffc:	2360      	movs	r3, #96	@ 0x60
 8000ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001004:	2300      	movs	r3, #0
 8001006:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001008:	2300      	movs	r3, #0
 800100a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001018:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800101c:	2200      	movs	r2, #0
 800101e:	4619      	mov	r1, r3
 8001020:	4826      	ldr	r0, [pc, #152]	@ (80010bc <MX_TIM1_Init+0x150>)
 8001022:	f003 fd29 	bl	8004a78 <HAL_TIM_PWM_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800102c:	f7ff fdda 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001030:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001034:	2204      	movs	r2, #4
 8001036:	4619      	mov	r1, r3
 8001038:	4820      	ldr	r0, [pc, #128]	@ (80010bc <MX_TIM1_Init+0x150>)
 800103a:	f003 fd1d 	bl	8004a78 <HAL_TIM_PWM_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001044:	f7ff fdce 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001048:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800104c:	2208      	movs	r2, #8
 800104e:	4619      	mov	r1, r3
 8001050:	481a      	ldr	r0, [pc, #104]	@ (80010bc <MX_TIM1_Init+0x150>)
 8001052:	f003 fd11 	bl	8004a78 <HAL_TIM_PWM_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800105c:	f7ff fdc2 	bl	8000be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 17;
 800106c:	2311      	movs	r3, #17
 800106e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001074:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001078:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001086:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4619      	mov	r1, r3
 800109c:	4807      	ldr	r0, [pc, #28]	@ (80010bc <MX_TIM1_Init+0x150>)
 800109e:	f004 fc99 	bl	80059d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80010a8:	f7ff fd9c 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ac:	4803      	ldr	r0, [pc, #12]	@ (80010bc <MX_TIM1_Init+0x150>)
 80010ae:	f000 f8d7 	bl	8001260 <HAL_TIM_MspPostInit>

}
 80010b2:	bf00      	nop
 80010b4:	3760      	adds	r7, #96	@ 0x60
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000280 	.word	0x20000280
 80010c0:	40012c00 	.word	0x40012c00

080010c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <MX_TIM3_Init+0x90>)
 80010e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001158 <MX_TIM3_Init+0x94>)
 80010e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <MX_TIM3_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <MX_TIM3_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_TIM3_Init+0x90>)
 80010f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <MX_TIM3_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_TIM3_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4619      	mov	r1, r3
 800111e:	480d      	ldr	r0, [pc, #52]	@ (8001154 <MX_TIM3_Init+0x90>)
 8001120:	f004 fa51 	bl	80055c6 <HAL_TIMEx_HallSensor_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800112a:	f7ff fd5b 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800112e:	2350      	movs	r3, #80	@ 0x50
 8001130:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	@ (8001154 <MX_TIM3_Init+0x90>)
 800113c:	f004 fbb4 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001146:	f7ff fd4d 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200002cc 	.word	0x200002cc
 8001158:	40000400 	.word	0x40000400

0800115c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <HAL_TIM_PWM_MspInit+0x38>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10b      	bne.n	8001186 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_TIM_PWM_MspInit+0x3c>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001172:	4a09      	ldr	r2, [pc, #36]	@ (8001198 <HAL_TIM_PWM_MspInit+0x3c>)
 8001174:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001178:	6613      	str	r3, [r2, #96]	@ 0x60
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <HAL_TIM_PWM_MspInit+0x3c>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40012c00 	.word	0x40012c00
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a26      	ldr	r2, [pc, #152]	@ (8001254 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d145      	bne.n	800124a <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011be:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c2:	4a25      	ldr	r2, [pc, #148]	@ (8001258 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ca:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a1f      	ldr	r2, [pc, #124]	@ (8001258 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	4a19      	ldr	r2, [pc, #100]	@ (8001258 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001206:	2350      	movs	r3, #80	@ 0x50
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001216:	2302      	movs	r3, #2
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001224:	f001 fe3e 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001228:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800123a:	2302      	movs	r3, #2
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	@ (800125c <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001246:	f001 fe2d 	bl	8002ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	@ 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40000400 	.word	0x40000400
 8001258:	40021000 	.word	0x40021000
 800125c:	48000800 	.word	0x48000800

08001260 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	@ 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a29      	ldr	r2, [pc, #164]	@ (8001324 <HAL_TIM_MspPostInit+0xc4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d14b      	bne.n	800131a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	4b29      	ldr	r3, [pc, #164]	@ (8001328 <HAL_TIM_MspPostInit+0xc8>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	4a28      	ldr	r2, [pc, #160]	@ (8001328 <HAL_TIM_MspPostInit+0xc8>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128e:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <HAL_TIM_MspPostInit+0xc8>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <HAL_TIM_MspPostInit+0xc8>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	4a22      	ldr	r2, [pc, #136]	@ (8001328 <HAL_TIM_MspPostInit+0xc8>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <HAL_TIM_MspPostInit+0xc8>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80012b2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012c4:	2306      	movs	r3, #6
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4817      	ldr	r0, [pc, #92]	@ (800132c <HAL_TIM_MspPostInit+0xcc>)
 80012d0:	f001 fde8 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80012d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80012e6:	2304      	movs	r3, #4
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	480e      	ldr	r0, [pc, #56]	@ (800132c <HAL_TIM_MspPostInit+0xcc>)
 80012f2:	f001 fdd7 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80012f6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001308:	2306      	movs	r3, #6
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001316:	f001 fdc5 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	@ 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40012c00 	.word	0x40012c00
 8001328:	40021000 	.word	0x40021000
 800132c:	48000400 	.word	0x48000400

08001330 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001334:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 8001336:	4a23      	ldr	r2, [pc, #140]	@ (80013c4 <MX_USART2_UART_Init+0x94>)
 8001338:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 800133c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001340:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001342:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001348:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001354:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 8001356:	220c      	movs	r2, #12
 8001358:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135a:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001378:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 800137a:	f004 fc48 	bl	8005c0e <HAL_UART_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001384:	f7ff fc2e 	bl	8000be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001388:	2100      	movs	r1, #0
 800138a:	480d      	ldr	r0, [pc, #52]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 800138c:	f006 fbeb 	bl	8007b66 <HAL_UARTEx_SetTxFifoThreshold>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001396:	f7ff fc25 	bl	8000be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800139a:	2100      	movs	r1, #0
 800139c:	4808      	ldr	r0, [pc, #32]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 800139e:	f006 fc20 	bl	8007be2 <HAL_UARTEx_SetRxFifoThreshold>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013a8:	f7ff fc1c 	bl	8000be4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	@ (80013c0 <MX_USART2_UART_Init+0x90>)
 80013ae:	f006 fba1 	bl	8007af4 <HAL_UARTEx_DisableFifoMode>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013b8:	f7ff fc14 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000318 	.word	0x20000318
 80013c4:	40004400 	.word	0x40004400

080013c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013cc:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 80013ce:	4a23      	ldr	r2, [pc, #140]	@ (800145c <MX_USART3_UART_Init+0x94>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013d2:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fe:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800140a:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001410:	4811      	ldr	r0, [pc, #68]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 8001412:	f004 fbfc 	bl	8005c0e <HAL_UART_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800141c:	f7ff fbe2 	bl	8000be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001420:	2100      	movs	r1, #0
 8001422:	480d      	ldr	r0, [pc, #52]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 8001424:	f006 fb9f 	bl	8007b66 <HAL_UARTEx_SetTxFifoThreshold>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800142e:	f7ff fbd9 	bl	8000be4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001432:	2100      	movs	r1, #0
 8001434:	4808      	ldr	r0, [pc, #32]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 8001436:	f006 fbd4 	bl	8007be2 <HAL_UARTEx_SetRxFifoThreshold>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001440:	f7ff fbd0 	bl	8000be4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	@ (8001458 <MX_USART3_UART_Init+0x90>)
 8001446:	f006 fb55 	bl	8007af4 <HAL_UARTEx_DisableFifoMode>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001450:	f7ff fbc8 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200003a8 	.word	0x200003a8
 800145c:	40004800 	.word	0x40004800

08001460 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0a0      	sub	sp, #128	@ 0x80
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	2254      	movs	r2, #84	@ 0x54
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f006 fdfc 	bl	800807e <memset>
  if(uartHandle->Instance==USART2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a45      	ldr	r2, [pc, #276]	@ (80015a0 <HAL_UART_MspInit+0x140>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d13f      	bne.n	8001510 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001490:	2302      	movs	r3, #2
 8001492:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	f107 0318 	add.w	r3, r7, #24
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fcd9 	bl	8003e54 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014a8:	f7ff fb9c 	bl	8000be4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ac:	4b3d      	ldr	r3, [pc, #244]	@ (80015a4 <HAL_UART_MspInit+0x144>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b0:	4a3c      	ldr	r2, [pc, #240]	@ (80015a4 <HAL_UART_MspInit+0x144>)
 80014b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014b8:	4b3a      	ldr	r3, [pc, #232]	@ (80015a4 <HAL_UART_MspInit+0x144>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b37      	ldr	r3, [pc, #220]	@ (80015a4 <HAL_UART_MspInit+0x144>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c8:	4a36      	ldr	r2, [pc, #216]	@ (80015a4 <HAL_UART_MspInit+0x144>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d0:	4b34      	ldr	r3, [pc, #208]	@ (80015a4 <HAL_UART_MspInit+0x144>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014dc:	230c      	movs	r3, #12
 80014de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ec:	2307      	movs	r3, #7
 80014ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014f4:	4619      	mov	r1, r3
 80014f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fa:	f001 fcd3 	bl	8002ea4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2026      	movs	r0, #38	@ 0x26
 8001504:	f001 fbe6 	bl	8002cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001508:	2026      	movs	r0, #38	@ 0x26
 800150a:	f001 fbfd 	bl	8002d08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800150e:	e043      	b.n	8001598 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a24      	ldr	r2, [pc, #144]	@ (80015a8 <HAL_UART_MspInit+0x148>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d13e      	bne.n	8001598 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800151a:	2304      	movs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fc94 	bl	8003e54 <HAL_RCCEx_PeriphCLKConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001532:	f7ff fb57 	bl	8000be4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001536:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <HAL_UART_MspInit+0x144>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153a:	4a1a      	ldr	r2, [pc, #104]	@ (80015a4 <HAL_UART_MspInit+0x144>)
 800153c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001540:	6593      	str	r3, [r2, #88]	@ 0x58
 8001542:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <HAL_UART_MspInit+0x144>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001546:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <HAL_UART_MspInit+0x144>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	4a14      	ldr	r2, [pc, #80]	@ (80015a4 <HAL_UART_MspInit+0x144>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_UART_MspInit+0x144>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001566:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800156a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001578:	2307      	movs	r3, #7
 800157a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001580:	4619      	mov	r1, r3
 8001582:	480a      	ldr	r0, [pc, #40]	@ (80015ac <HAL_UART_MspInit+0x14c>)
 8001584:	f001 fc8e 	bl	8002ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2027      	movs	r0, #39	@ 0x27
 800158e:	f001 fba1 	bl	8002cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001592:	2027      	movs	r0, #39	@ 0x27
 8001594:	f001 fbb8 	bl	8002d08 <HAL_NVIC_EnableIRQ>
}
 8001598:	bf00      	nop
 800159a:	3780      	adds	r7, #128	@ 0x80
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40004400 	.word	0x40004400
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40004800 	.word	0x40004800
 80015ac:	48000800 	.word	0x48000800

080015b0 <setPWM>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void setPWM(int percentage) {
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    if (percentage > MAX_PERCENTAGE) {
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b64      	cmp	r3, #100	@ 0x64
 80015bc:	dd02      	ble.n	80015c4 <setPWM+0x14>
        percentage = MAX_PERCENTAGE;
 80015be:	2364      	movs	r3, #100	@ 0x64
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	e004      	b.n	80015ce <setPWM+0x1e>
    } else if (percentage < 0) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da01      	bge.n	80015ce <setPWM+0x1e>
        percentage = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
    }
    int dutyCycle = (percentage * PWM_MAX_DUTY_CYCLE) / MAX_PERCENTAGE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f241 0299 	movw	r2, #4249	@ 0x1099
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <setPWM+0x54>)
 80015da:	fb82 1203 	smull	r1, r2, r2, r3
 80015de:	1152      	asrs	r2, r2, #5
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	60fb      	str	r3, [r7, #12]
    TIM1->CCR1 = dutyCycle;
 80015e6:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <setPWM+0x58>)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM1->CCR2 = PWM_MAX_DUTY_CYCLE - dutyCycle;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f5c3 5384 	rsb	r3, r3, #4224	@ 0x1080
 80015f2:	3319      	adds	r3, #25
 80015f4:	4a04      	ldr	r2, [pc, #16]	@ (8001608 <setPWM+0x58>)
 80015f6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	51eb851f 	.word	0x51eb851f
 8001608:	40012c00 	.word	0x40012c00

0800160c <Shell_Init>:
        HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
    }
}


void Shell_Init(void){
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS*sizeof(char*));
 8001610:	2224      	movs	r2, #36	@ 0x24
 8001612:	2100      	movs	r1, #0
 8001614:	4816      	ldr	r0, [pc, #88]	@ (8001670 <Shell_Init+0x64>)
 8001616:	f006 fd32 	bl	800807e <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE*sizeof(char));
 800161a:	2240      	movs	r2, #64	@ 0x40
 800161c:	2100      	movs	r1, #0
 800161e:	4815      	ldr	r0, [pc, #84]	@ (8001674 <Shell_Init+0x68>)
 8001620:	f006 fd2d 	bl	800807e <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE*sizeof(char));
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <Shell_Init+0x6c>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE*sizeof(char));
 800162a:	2240      	movs	r2, #64	@ 0x40
 800162c:	2100      	movs	r1, #0
 800162e:	4813      	ldr	r0, [pc, #76]	@ (800167c <Shell_Init+0x70>)
 8001630:	f006 fd25 	bl	800807e <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001634:	2201      	movs	r2, #1
 8001636:	4910      	ldr	r1, [pc, #64]	@ (8001678 <Shell_Init+0x6c>)
 8001638:	4811      	ldr	r0, [pc, #68]	@ (8001680 <Shell_Init+0x74>)
 800163a:	f004 fbcf 	bl	8005ddc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 800163e:	4811      	ldr	r0, [pc, #68]	@ (8001684 <Shell_Init+0x78>)
 8001640:	f7fe fdf8 	bl	8000234 <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	490d      	ldr	r1, [pc, #52]	@ (8001684 <Shell_Init+0x78>)
 800164e:	480c      	ldr	r0, [pc, #48]	@ (8001680 <Shell_Init+0x74>)
 8001650:	f004 fb2d 	bl	8005cae <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <Shell_Init+0x7c>)
 8001656:	f7fe fded 	bl	8000234 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	4909      	ldr	r1, [pc, #36]	@ (8001688 <Shell_Init+0x7c>)
 8001664:	4806      	ldr	r0, [pc, #24]	@ (8001680 <Shell_Init+0x74>)
 8001666:	f004 fb22 	bl	8005cae <HAL_UART_Transmit>
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200004c4 	.word	0x200004c4
 8001674:	20000480 	.word	0x20000480
 8001678:	2000043c 	.word	0x2000043c
 800167c:	20000440 	.word	0x20000440
 8001680:	20000318 	.word	0x20000318
 8001684:	20000020 	.word	0x20000020
 8001688:	20000004 	.word	0x20000004

0800168c <Shell_Loop>:

void Shell_Loop(void){
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 8001692:	4b5c      	ldr	r3, [pc, #368]	@ (8001804 <Shell_Loop+0x178>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d05b      	beq.n	8001752 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 800169a:	4b5b      	ldr	r3, [pc, #364]	@ (8001808 <Shell_Loop+0x17c>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d034      	beq.n	800170c <Shell_Loop+0x80>
 80016a2:	2b0d      	cmp	r3, #13
 80016a4:	d142      	bne.n	800172c <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	2203      	movs	r2, #3
 80016ac:	4957      	ldr	r1, [pc, #348]	@ (800180c <Shell_Loop+0x180>)
 80016ae:	4858      	ldr	r0, [pc, #352]	@ (8001810 <Shell_Loop+0x184>)
 80016b0:	f004 fafd 	bl	8005cae <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80016b4:	4b57      	ldr	r3, [pc, #348]	@ (8001814 <Shell_Loop+0x188>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a57      	ldr	r2, [pc, #348]	@ (8001818 <Shell_Loop+0x18c>)
 80016ba:	2100      	movs	r1, #0
 80016bc:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80016be:	4b57      	ldr	r3, [pc, #348]	@ (800181c <Shell_Loop+0x190>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80016c4:	4956      	ldr	r1, [pc, #344]	@ (8001820 <Shell_Loop+0x194>)
 80016c6:	4854      	ldr	r0, [pc, #336]	@ (8001818 <Shell_Loop+0x18c>)
 80016c8:	f006 fce2 	bl	8008090 <strtok>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a55      	ldr	r2, [pc, #340]	@ (8001824 <Shell_Loop+0x198>)
 80016d0:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80016d2:	e010      	b.n	80016f6 <Shell_Loop+0x6a>
				argv[argc++] = token;
 80016d4:	4b51      	ldr	r3, [pc, #324]	@ (800181c <Shell_Loop+0x190>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	4950      	ldr	r1, [pc, #320]	@ (800181c <Shell_Loop+0x190>)
 80016dc:	600a      	str	r2, [r1, #0]
 80016de:	4a51      	ldr	r2, [pc, #324]	@ (8001824 <Shell_Loop+0x198>)
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	4951      	ldr	r1, [pc, #324]	@ (8001828 <Shell_Loop+0x19c>)
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80016e8:	494d      	ldr	r1, [pc, #308]	@ (8001820 <Shell_Loop+0x194>)
 80016ea:	2000      	movs	r0, #0
 80016ec:	f006 fcd0 	bl	8008090 <strtok>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a4c      	ldr	r2, [pc, #304]	@ (8001824 <Shell_Loop+0x198>)
 80016f4:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80016f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001824 <Shell_Loop+0x198>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ea      	bne.n	80016d4 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80016fe:	4b45      	ldr	r3, [pc, #276]	@ (8001814 <Shell_Loop+0x188>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001704:	4b49      	ldr	r3, [pc, #292]	@ (800182c <Shell_Loop+0x1a0>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]
			break;
 800170a:	e01f      	b.n	800174c <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 800170c:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <Shell_Loop+0x188>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	4940      	ldr	r1, [pc, #256]	@ (8001814 <Shell_Loop+0x188>)
 8001714:	600a      	str	r2, [r1, #0]
 8001716:	4a40      	ldr	r2, [pc, #256]	@ (8001818 <Shell_Loop+0x18c>)
 8001718:	2100      	movs	r1, #0
 800171a:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	2204      	movs	r2, #4
 8001722:	4943      	ldr	r1, [pc, #268]	@ (8001830 <Shell_Loop+0x1a4>)
 8001724:	483a      	ldr	r0, [pc, #232]	@ (8001810 <Shell_Loop+0x184>)
 8001726:	f004 fac2 	bl	8005cae <HAL_UART_Transmit>
			break;
 800172a:	e00f      	b.n	800174c <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800172c:	4b39      	ldr	r3, [pc, #228]	@ (8001814 <Shell_Loop+0x188>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	4938      	ldr	r1, [pc, #224]	@ (8001814 <Shell_Loop+0x188>)
 8001734:	600a      	str	r2, [r1, #0]
 8001736:	4a34      	ldr	r2, [pc, #208]	@ (8001808 <Shell_Loop+0x17c>)
 8001738:	7811      	ldrb	r1, [r2, #0]
 800173a:	4a37      	ldr	r2, [pc, #220]	@ (8001818 <Shell_Loop+0x18c>)
 800173c:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	2201      	movs	r2, #1
 8001744:	4930      	ldr	r1, [pc, #192]	@ (8001808 <Shell_Loop+0x17c>)
 8001746:	4832      	ldr	r0, [pc, #200]	@ (8001810 <Shell_Loop+0x184>)
 8001748:	f004 fab1 	bl	8005cae <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <Shell_Loop+0x178>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8001752:	4b36      	ldr	r3, [pc, #216]	@ (800182c <Shell_Loop+0x1a0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d050      	beq.n	80017fc <Shell_Loop+0x170>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 800175a:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <Shell_Loop+0x19c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4935      	ldr	r1, [pc, #212]	@ (8001834 <Shell_Loop+0x1a8>)
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fd5d 	bl	8000220 <strcmp>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d107      	bne.n	800177c <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	221a      	movs	r2, #26
 8001772:	4931      	ldr	r1, [pc, #196]	@ (8001838 <Shell_Loop+0x1ac>)
 8001774:	4826      	ldr	r0, [pc, #152]	@ (8001810 <Shell_Loop+0x184>)
 8001776:	f004 fa9a 	bl	8005cae <HAL_UART_Transmit>
 800177a:	e035      	b.n	80017e8 <Shell_Loop+0x15c>
		}
		else if(strcmp(argv[0], "help") == 0) {
 800177c:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <Shell_Loop+0x19c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	492e      	ldr	r1, [pc, #184]	@ (800183c <Shell_Loop+0x1b0>)
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fd4c 	bl	8000220 <strcmp>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10e      	bne.n	80017ac <Shell_Loop+0x120>
		    int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE,
 800178e:	4a2c      	ldr	r2, [pc, #176]	@ (8001840 <Shell_Loop+0x1b4>)
 8001790:	2140      	movs	r1, #64	@ 0x40
 8001792:	482c      	ldr	r0, [pc, #176]	@ (8001844 <Shell_Loop+0x1b8>)
 8001794:	f006 fbfc 	bl	8007f90 <sniprintf>
 8001798:	6038      	str	r0, [r7, #0]
		                                      "Available commands:\r\n"
		                                      " - speed <percentage>: Set motor speed as a percentage (0-100)\r\n");
		    HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b29a      	uxth	r2, r3
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	4928      	ldr	r1, [pc, #160]	@ (8001844 <Shell_Loop+0x1b8>)
 80017a4:	481a      	ldr	r0, [pc, #104]	@ (8001810 <Shell_Loop+0x184>)
 80017a6:	f004 fa82 	bl	8005cae <HAL_UART_Transmit>
 80017aa:	e01d      	b.n	80017e8 <Shell_Loop+0x15c>
		}
		else if(argc == 2 && strcmp(argv[0], "speed") == 0) {
 80017ac:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <Shell_Loop+0x190>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d112      	bne.n	80017da <Shell_Loop+0x14e>
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <Shell_Loop+0x19c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4923      	ldr	r1, [pc, #140]	@ (8001848 <Shell_Loop+0x1bc>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fd30 	bl	8000220 <strcmp>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d109      	bne.n	80017da <Shell_Loop+0x14e>
	        int percentage = atoi(argv[1]);  // Convertit l'argument en pourcentage
 80017c6:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <Shell_Loop+0x19c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f006 fa96 	bl	8007cfc <atoi>
 80017d0:	6078      	str	r0, [r7, #4]
	        setPWM(percentage);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff feec 	bl	80015b0 <setPWM>
		else if(argc == 2 && strcmp(argv[0], "speed") == 0) {
 80017d8:	e006      	b.n	80017e8 <Shell_Loop+0x15c>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	2214      	movs	r2, #20
 80017e0:	491a      	ldr	r1, [pc, #104]	@ (800184c <Shell_Loop+0x1c0>)
 80017e2:	480b      	ldr	r0, [pc, #44]	@ (8001810 <Shell_Loop+0x184>)
 80017e4:	f004 fa63 	bl	8005cae <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	221c      	movs	r2, #28
 80017ee:	4918      	ldr	r1, [pc, #96]	@ (8001850 <Shell_Loop+0x1c4>)
 80017f0:	4807      	ldr	r0, [pc, #28]	@ (8001810 <Shell_Loop+0x184>)
 80017f2:	f004 fa5c 	bl	8005cae <HAL_UART_Transmit>
		newCmdReady = 0;
 80017f6:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <Shell_Loop+0x1a0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
	}
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000438 	.word	0x20000438
 8001808:	2000043c 	.word	0x2000043c
 800180c:	20000088 	.word	0x20000088
 8001810:	20000318 	.word	0x20000318
 8001814:	200004c0 	.word	0x200004c0
 8001818:	20000480 	.word	0x20000480
 800181c:	200004e8 	.word	0x200004e8
 8001820:	080091f8 	.word	0x080091f8
 8001824:	200004ec 	.word	0x200004ec
 8001828:	200004c4 	.word	0x200004c4
 800182c:	200004f0 	.word	0x200004f0
 8001830:	2000008c 	.word	0x2000008c
 8001834:	080091fc 	.word	0x080091fc
 8001838:	200000a4 	.word	0x200000a4
 800183c:	0800920c 	.word	0x0800920c
 8001840:	08009214 	.word	0x08009214
 8001844:	20000440 	.word	0x20000440
 8001848:	080091f0 	.word	0x080091f0
 800184c:	20000090 	.word	0x20000090
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_UART_RxCpltCallback+0x2c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d107      	bne.n	8001876 <HAL_UART_RxCpltCallback+0x22>
        uartRxReceived = 1;
 8001866:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <HAL_UART_RxCpltCallback+0x30>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800186c:	2201      	movs	r2, #1
 800186e:	4906      	ldr	r1, [pc, #24]	@ (8001888 <HAL_UART_RxCpltCallback+0x34>)
 8001870:	4806      	ldr	r0, [pc, #24]	@ (800188c <HAL_UART_RxCpltCallback+0x38>)
 8001872:	f004 fab3 	bl	8005ddc <HAL_UART_Receive_IT>
    }
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40004400 	.word	0x40004400
 8001884:	20000438 	.word	0x20000438
 8001888:	2000043c 	.word	0x2000043c
 800188c:	20000318 	.word	0x20000318

08001890 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001890:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001892:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001894:	480d      	ldr	r0, [pc, #52]	@ (80018cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001896:	490e      	ldr	r1, [pc, #56]	@ (80018d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001898:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <LoopForever+0xe>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018aa:	4a0b      	ldr	r2, [pc, #44]	@ (80018d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018ac:	4c0b      	ldr	r4, [pc, #44]	@ (80018dc <LoopForever+0x16>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ba:	f7ff fb45 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018be:	f006 fc8f 	bl	80081e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018c2:	f7ff f8f5 	bl	8000ab0 <main>

080018c6 <LoopForever>:

LoopForever:
    b LoopForever
 80018c6:	e7fe      	b.n	80018c6 <LoopForever>
  ldr   r0, =_estack
 80018c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d0:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 80018d4:	080094a0 	.word	0x080094a0
  ldr r2, =_sbss
 80018d8:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 80018dc:	20000644 	.word	0x20000644

080018e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC1_2_IRQHandler>

080018e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f001 f9e6 	bl	8002cbe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018f2:	200f      	movs	r0, #15
 80018f4:	f7ff f9a0 	bl	8000c38 <HAL_InitTick>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	71fb      	strb	r3, [r7, #7]
 8001902:	e001      	b.n	8001908 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001904:	f7ff f974 	bl	8000bf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001908:	79fb      	ldrb	r3, [r7, #7]

}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_IncTick+0x1c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <HAL_IncTick+0x20>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4413      	add	r3, r2
 8001922:	4a03      	ldr	r2, [pc, #12]	@ (8001930 <HAL_IncTick+0x1c>)
 8001924:	6013      	str	r3, [r2, #0]
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	200004f4 	.word	0x200004f4
 8001934:	200000c4 	.word	0x200000c4

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200004f4 	.word	0x200004f4

08001950 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	609a      	str	r2, [r3, #8]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3360      	adds	r3, #96	@ 0x60
 80019ca:	461a      	mov	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <LL_ADC_SetOffset+0x44>)
 80019da:	4013      	ands	r3, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	4313      	orrs	r3, r2
 80019e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	03fff000 	.word	0x03fff000

08001a00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3360      	adds	r3, #96	@ 0x60
 8001a0e:	461a      	mov	r2, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3360      	adds	r3, #96	@ 0x60
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b087      	sub	sp, #28
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3360      	adds	r3, #96	@ 0x60
 8001a72:	461a      	mov	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a8c:	bf00      	nop
 8001a8e:	371c      	adds	r7, #28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3360      	adds	r3, #96	@ 0x60
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ac2:	bf00      	nop
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	615a      	str	r2, [r3, #20]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3330      	adds	r3, #48	@ 0x30
 8001b04:	461a      	mov	r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	4413      	add	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	211f      	movs	r1, #31
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	401a      	ands	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0e9b      	lsrs	r3, r3, #26
 8001b2c:	f003 011f 	and.w	r1, r3, #31
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b40:	bf00      	nop
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3314      	adds	r3, #20
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	0e5b      	lsrs	r3, r3, #25
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	0d1b      	lsrs	r3, r3, #20
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	2107      	movs	r1, #7
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	401a      	ands	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	0d1b      	lsrs	r3, r3, #20
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	431a      	orrs	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b96:	bf00      	nop
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d10a      	bne.n	8001bce <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	401a      	ands	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	407f0000 	.word	0x407f0000

08001bf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6093      	str	r3, [r2, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c2c:	d101      	bne.n	8001c32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c7c:	d101      	bne.n	8001c82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <LL_ADC_IsEnabled+0x18>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <LL_ADC_IsEnabled+0x1a>
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d101      	bne.n	8001cce <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d101      	bne.n	8001cf4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b089      	sub	sp, #36	@ 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e1af      	b.n	800207e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7fe fd35 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff67 	bl	8001c18 <LL_ADC_IsDeepPowerDownEnabled>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d004      	beq.n	8001d5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff4d 	bl	8001bf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff82 	bl	8001c68 <LL_ADC_IsInternalRegulatorEnabled>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d115      	bne.n	8001d96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff66 	bl	8001c40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d74:	4b9f      	ldr	r3, [pc, #636]	@ (8001ff4 <HAL_ADC_Init+0x2f0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	4a9f      	ldr	r2, [pc, #636]	@ (8001ff8 <HAL_ADC_Init+0x2f4>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	3301      	adds	r3, #1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d88:	e002      	b.n	8001d90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f9      	bne.n	8001d8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff64 	bl	8001c68 <LL_ADC_IsInternalRegulatorEnabled>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10d      	bne.n	8001dc2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff75 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8001dcc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 8148 	bne.w	800206c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 8144 	bne.w	800206c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dec:	f043 0202 	orr.w	r2, r3, #2
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff49 	bl	8001c90 <LL_ADC_IsEnabled>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d141      	bne.n	8001e88 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e0c:	d004      	beq.n	8001e18 <HAL_ADC_Init+0x114>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a7a      	ldr	r2, [pc, #488]	@ (8001ffc <HAL_ADC_Init+0x2f8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d10f      	bne.n	8001e38 <HAL_ADC_Init+0x134>
 8001e18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e1c:	f7ff ff38 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e20:	4604      	mov	r4, r0
 8001e22:	4876      	ldr	r0, [pc, #472]	@ (8001ffc <HAL_ADC_Init+0x2f8>)
 8001e24:	f7ff ff34 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4323      	orrs	r3, r4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	e012      	b.n	8001e5e <HAL_ADC_Init+0x15a>
 8001e38:	4871      	ldr	r0, [pc, #452]	@ (8002000 <HAL_ADC_Init+0x2fc>)
 8001e3a:	f7ff ff29 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e3e:	4604      	mov	r4, r0
 8001e40:	4870      	ldr	r0, [pc, #448]	@ (8002004 <HAL_ADC_Init+0x300>)
 8001e42:	f7ff ff25 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e46:	4603      	mov	r3, r0
 8001e48:	431c      	orrs	r4, r3
 8001e4a:	486f      	ldr	r0, [pc, #444]	@ (8002008 <HAL_ADC_Init+0x304>)
 8001e4c:	f7ff ff20 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4323      	orrs	r3, r4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d012      	beq.n	8001e88 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e6a:	d004      	beq.n	8001e76 <HAL_ADC_Init+0x172>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a62      	ldr	r2, [pc, #392]	@ (8001ffc <HAL_ADC_Init+0x2f8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_Init+0x176>
 8001e76:	4a65      	ldr	r2, [pc, #404]	@ (800200c <HAL_ADC_Init+0x308>)
 8001e78:	e000      	b.n	8001e7c <HAL_ADC_Init+0x178>
 8001e7a:	4a65      	ldr	r2, [pc, #404]	@ (8002010 <HAL_ADC_Init+0x30c>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f7ff fd64 	bl	8001950 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7f5b      	ldrb	r3, [r3, #29]
 8001e8c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e92:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e98:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e9e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ea6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d106      	bne.n	8001ec4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	045b      	lsls	r3, r3, #17
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8002014 <HAL_ADC_Init+0x310>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fed1 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8001f14:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fede 	bl	8001cdc <LL_ADC_INJ_IsConversionOngoing>
 8001f20:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d17f      	bne.n	8002028 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d17c      	bne.n	8002028 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f32:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f3a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f4a:	f023 0302 	bic.w	r3, r3, #2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	69b9      	ldr	r1, [r7, #24]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f78:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6911      	ldr	r1, [r2, #16]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001f8e:	e013      	b.n	8001fb8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001fb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fb4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d12a      	bne.n	8002018 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fd8:	4311      	orrs	r1, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	611a      	str	r2, [r3, #16]
 8001ff2:	e019      	b.n	8002028 <HAL_ADC_Init+0x324>
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	053e2d63 	.word	0x053e2d63
 8001ffc:	50000100 	.word	0x50000100
 8002000:	50000400 	.word	0x50000400
 8002004:	50000500 	.word	0x50000500
 8002008:	50000600 	.word	0x50000600
 800200c:	50000300 	.word	0x50000300
 8002010:	50000700 	.word	0x50000700
 8002014:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10c      	bne.n	800204a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f023 010f 	bic.w	r1, r3, #15
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	1e5a      	subs	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	631a      	str	r2, [r3, #48]	@ 0x30
 8002048:	e007      	b.n	800205a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 020f 	bic.w	r2, r2, #15
 8002058:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	65da      	str	r2, [r3, #92]	@ 0x5c
 800206a:	e007      	b.n	800207c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	f043 0210 	orr.w	r2, r3, #16
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800207c:	7ffb      	ldrb	r3, [r7, #31]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	@ 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd90      	pop	{r4, r7, pc}
 8002086:	bf00      	nop

08002088 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0b6      	sub	sp, #216	@ 0xd8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x24>
 80020a6:	2302      	movs	r3, #2
 80020a8:	f000 bc13 	b.w	80028d2 <HAL_ADC_ConfigChannel+0x84a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fdfc 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f040 83f3 	bne.w	80028ac <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6859      	ldr	r1, [r3, #4]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f7ff fd0e 	bl	8001af4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fdea 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 80020e2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fdf6 	bl	8001cdc <LL_ADC_INJ_IsConversionOngoing>
 80020f0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 81d9 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 81d4 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002110:	d10f      	bne.n	8002132 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	4619      	mov	r1, r3
 800211e:	f7ff fd15 	bl	8001b4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fccf 	bl	8001ace <LL_ADC_SetSamplingTimeCommonConfig>
 8002130:	e00e      	b.n	8002150 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	461a      	mov	r2, r3
 8002140:	f7ff fd04 	bl	8001b4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fcbf 	bl	8001ace <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	08db      	lsrs	r3, r3, #3
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b04      	cmp	r3, #4
 8002170:	d022      	beq.n	80021b8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002182:	f7ff fc19 	bl	80019b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6919      	ldr	r1, [r3, #16]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	461a      	mov	r2, r3
 8002194:	f7ff fc65 	bl	8001a62 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6919      	ldr	r1, [r3, #16]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	7f1b      	ldrb	r3, [r3, #28]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d102      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x126>
 80021a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ac:	e000      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x128>
 80021ae:	2300      	movs	r3, #0
 80021b0:	461a      	mov	r2, r3
 80021b2:	f7ff fc71 	bl	8001a98 <LL_ADC_SetOffsetSaturation>
 80021b6:	e17b      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fc1e 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10a      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x15c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fc13 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	0e9b      	lsrs	r3, r3, #26
 80021de:	f003 021f 	and.w	r2, r3, #31
 80021e2:	e01e      	b.n	8002222 <HAL_ADC_ConfigChannel+0x19a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fc08 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002206:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800220a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002212:	2320      	movs	r3, #32
 8002214:	e004      	b.n	8002220 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002216:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <HAL_ADC_ConfigChannel+0x1b2>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0e9b      	lsrs	r3, r3, #26
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	e018      	b.n	800226c <HAL_ADC_ConfigChannel+0x1e4>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800224e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002252:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800225e:	2320      	movs	r3, #32
 8002260:	e004      	b.n	800226c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800226c:	429a      	cmp	r2, r3
 800226e:	d106      	bne.n	800227e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fbd7 	bl	8001a2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2101      	movs	r1, #1
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fbbb 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10a      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x222>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fbb0 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	0e9b      	lsrs	r3, r3, #26
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	e01e      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x260>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2101      	movs	r1, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fba5 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80022c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80022d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e004      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80022dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x278>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0e9b      	lsrs	r3, r3, #26
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	e018      	b.n	8002332 <HAL_ADC_ConfigChannel+0x2aa>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002314:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002318:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800231c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e004      	b.n	8002332 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002328:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002332:	429a      	cmp	r2, r3
 8002334:	d106      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	2101      	movs	r1, #1
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fb74 	bl	8001a2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2102      	movs	r1, #2
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fb58 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x2e8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2102      	movs	r1, #2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fb4d 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	f003 021f 	and.w	r2, r3, #31
 800236e:	e01e      	b.n	80023ae <HAL_ADC_ConfigChannel+0x326>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2102      	movs	r1, #2
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fb42 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800238e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002392:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002396:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800239e:	2320      	movs	r3, #32
 80023a0:	e004      	b.n	80023ac <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80023a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x33e>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	e016      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x36c>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80023d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80023de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e004      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80023ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2102      	movs	r1, #2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fb13 	bl	8001a2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2103      	movs	r1, #3
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff faf7 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x3aa>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2103      	movs	r1, #3
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff faec 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	e017      	b.n	8002462 <HAL_ADC_ConfigChannel+0x3da>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2103      	movs	r1, #3
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fae1 	bl	8001a00 <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800244a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800244c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800244e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002458:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_ADC_ConfigChannel+0x3f2>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0e9b      	lsrs	r3, r3, #26
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	e011      	b.n	800249e <HAL_ADC_ConfigChannel+0x416>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800248a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800248c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002492:	2320      	movs	r3, #32
 8002494:	e003      	b.n	800249e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800249e:	429a      	cmp	r2, r3
 80024a0:	d106      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2103      	movs	r1, #3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fabe 	bl	8001a2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fbeb 	bl	8001c90 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 813d 	bne.w	800273c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f7ff fb68 	bl	8001ba4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4aa2      	ldr	r2, [pc, #648]	@ (8002764 <HAL_ADC_ConfigChannel+0x6dc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	f040 812e 	bne.w	800273c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x480>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	3301      	adds	r3, #1
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e019      	b.n	800253c <HAL_ADC_ConfigChannel+0x4b4>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002516:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002518:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800251a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002520:	2320      	movs	r3, #32
 8002522:	e003      	b.n	800252c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002524:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3301      	adds	r3, #1
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2b09      	cmp	r3, #9
 8002534:	bf94      	ite	ls
 8002536:	2301      	movls	r3, #1
 8002538:	2300      	movhi	r3, #0
 800253a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253c:	2b00      	cmp	r3, #0
 800253e:	d079      	beq.n	8002634 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_ADC_ConfigChannel+0x4d4>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	3301      	adds	r3, #1
 8002554:	069b      	lsls	r3, r3, #26
 8002556:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800255a:	e015      	b.n	8002588 <HAL_ADC_ConfigChannel+0x500>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800256a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800256c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800256e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	069b      	lsls	r3, r3, #26
 8002584:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x520>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	3301      	adds	r3, #1
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	e017      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x550>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80025b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80025ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e003      	b.n	80025cc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80025c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	ea42 0103 	orr.w	r1, r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x576>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	051b      	lsls	r3, r3, #20
 80025fc:	e018      	b.n	8002630 <HAL_ADC_ConfigChannel+0x5a8>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800260c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800260e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002616:	2320      	movs	r3, #32
 8002618:	e003      	b.n	8002622 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800261a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002630:	430b      	orrs	r3, r1
 8002632:	e07e      	b.n	8002732 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x5c8>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0e9b      	lsrs	r3, r3, #26
 8002646:	3301      	adds	r3, #1
 8002648:	069b      	lsls	r3, r3, #26
 800264a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800264e:	e015      	b.n	800267c <HAL_ADC_ConfigChannel+0x5f4>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800265e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002660:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e003      	b.n	8002674 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800266c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3301      	adds	r3, #1
 8002676:	069b      	lsls	r3, r3, #26
 8002678:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_ADC_ConfigChannel+0x614>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	3301      	adds	r3, #1
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	e017      	b.n	80026cc <HAL_ADC_ConfigChannel+0x644>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	61fb      	str	r3, [r7, #28]
  return result;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2101      	movs	r1, #1
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	ea42 0103 	orr.w	r1, r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x670>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	3301      	adds	r3, #1
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	3b1e      	subs	r3, #30
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	e01b      	b.n	8002730 <HAL_ADC_ConfigChannel+0x6a8>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	613b      	str	r3, [r7, #16]
  return result;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002710:	2320      	movs	r3, #32
 8002712:	e003      	b.n	800271c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3301      	adds	r3, #1
 800271e:	f003 021f 	and.w	r2, r3, #31
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	3b1e      	subs	r3, #30
 800272a:	051b      	lsls	r3, r3, #20
 800272c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002730:	430b      	orrs	r3, r1
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	6892      	ldr	r2, [r2, #8]
 8002736:	4619      	mov	r1, r3
 8002738:	f7ff fa08 	bl	8001b4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <HAL_ADC_ConfigChannel+0x6e0>)
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80be 	beq.w	80028c6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002752:	d004      	beq.n	800275e <HAL_ADC_ConfigChannel+0x6d6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a04      	ldr	r2, [pc, #16]	@ (800276c <HAL_ADC_ConfigChannel+0x6e4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10a      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x6ec>
 800275e:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <HAL_ADC_ConfigChannel+0x6e8>)
 8002760:	e009      	b.n	8002776 <HAL_ADC_ConfigChannel+0x6ee>
 8002762:	bf00      	nop
 8002764:	407f0000 	.word	0x407f0000
 8002768:	80080000 	.word	0x80080000
 800276c:	50000100 	.word	0x50000100
 8002770:	50000300 	.word	0x50000300
 8002774:	4b59      	ldr	r3, [pc, #356]	@ (80028dc <HAL_ADC_ConfigChannel+0x854>)
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff f910 	bl	800199c <LL_ADC_GetCommonPathInternalCh>
 800277c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a56      	ldr	r2, [pc, #344]	@ (80028e0 <HAL_ADC_ConfigChannel+0x858>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d004      	beq.n	8002794 <HAL_ADC_ConfigChannel+0x70c>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a55      	ldr	r2, [pc, #340]	@ (80028e4 <HAL_ADC_ConfigChannel+0x85c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d13a      	bne.n	800280a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002794:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002798:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d134      	bne.n	800280a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027a8:	d005      	beq.n	80027b6 <HAL_ADC_ConfigChannel+0x72e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a4e      	ldr	r2, [pc, #312]	@ (80028e8 <HAL_ADC_ConfigChannel+0x860>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	f040 8085 	bne.w	80028c0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027be:	d004      	beq.n	80027ca <HAL_ADC_ConfigChannel+0x742>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a49      	ldr	r2, [pc, #292]	@ (80028ec <HAL_ADC_ConfigChannel+0x864>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x746>
 80027ca:	4a49      	ldr	r2, [pc, #292]	@ (80028f0 <HAL_ADC_ConfigChannel+0x868>)
 80027cc:	e000      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x748>
 80027ce:	4a43      	ldr	r2, [pc, #268]	@ (80028dc <HAL_ADC_ConfigChannel+0x854>)
 80027d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027d8:	4619      	mov	r1, r3
 80027da:	4610      	mov	r0, r2
 80027dc:	f7ff f8cb 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027e0:	4b44      	ldr	r3, [pc, #272]	@ (80028f4 <HAL_ADC_ConfigChannel+0x86c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	4a44      	ldr	r2, [pc, #272]	@ (80028f8 <HAL_ADC_ConfigChannel+0x870>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027fa:	e002      	b.n	8002802 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	3b01      	subs	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f9      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002808:	e05a      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3b      	ldr	r2, [pc, #236]	@ (80028fc <HAL_ADC_ConfigChannel+0x874>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d125      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x7d8>
 8002814:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d11f      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a31      	ldr	r2, [pc, #196]	@ (80028ec <HAL_ADC_ConfigChannel+0x864>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d104      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x7ac>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a34      	ldr	r2, [pc, #208]	@ (8002900 <HAL_ADC_ConfigChannel+0x878>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d047      	beq.n	80028c4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800283c:	d004      	beq.n	8002848 <HAL_ADC_ConfigChannel+0x7c0>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2a      	ldr	r2, [pc, #168]	@ (80028ec <HAL_ADC_ConfigChannel+0x864>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d101      	bne.n	800284c <HAL_ADC_ConfigChannel+0x7c4>
 8002848:	4a29      	ldr	r2, [pc, #164]	@ (80028f0 <HAL_ADC_ConfigChannel+0x868>)
 800284a:	e000      	b.n	800284e <HAL_ADC_ConfigChannel+0x7c6>
 800284c:	4a23      	ldr	r2, [pc, #140]	@ (80028dc <HAL_ADC_ConfigChannel+0x854>)
 800284e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f7ff f88c 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800285e:	e031      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a27      	ldr	r2, [pc, #156]	@ (8002904 <HAL_ADC_ConfigChannel+0x87c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d12d      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800286a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800286e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d127      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1c      	ldr	r2, [pc, #112]	@ (80028ec <HAL_ADC_ConfigChannel+0x864>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d022      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002888:	d004      	beq.n	8002894 <HAL_ADC_ConfigChannel+0x80c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a17      	ldr	r2, [pc, #92]	@ (80028ec <HAL_ADC_ConfigChannel+0x864>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x810>
 8002894:	4a16      	ldr	r2, [pc, #88]	@ (80028f0 <HAL_ADC_ConfigChannel+0x868>)
 8002896:	e000      	b.n	800289a <HAL_ADC_ConfigChannel+0x812>
 8002898:	4a10      	ldr	r2, [pc, #64]	@ (80028dc <HAL_ADC_ConfigChannel+0x854>)
 800289a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800289e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f7ff f866 	bl	8001976 <LL_ADC_SetCommonPathInternalCh>
 80028aa:	e00c      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80028be:	e002      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028c0:	bf00      	nop
 80028c2:	e000      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80028ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	37d8      	adds	r7, #216	@ 0xd8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	50000700 	.word	0x50000700
 80028e0:	c3210000 	.word	0xc3210000
 80028e4:	90c00010 	.word	0x90c00010
 80028e8:	50000600 	.word	0x50000600
 80028ec:	50000100 	.word	0x50000100
 80028f0:	50000300 	.word	0x50000300
 80028f4:	20000000 	.word	0x20000000
 80028f8:	053e2d63 	.word	0x053e2d63
 80028fc:	c7520000 	.word	0xc7520000
 8002900:	50000500 	.word	0x50000500
 8002904:	cb840000 	.word	0xcb840000

08002908 <LL_ADC_IsEnabled>:
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <LL_ADC_IsEnabled+0x18>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <LL_ADC_IsEnabled+0x1a>
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_REG_IsConversionOngoing>:
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b04      	cmp	r3, #4
 8002940:	d101      	bne.n	8002946 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b0a1      	sub	sp, #132	@ 0x84
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800296e:	2302      	movs	r3, #2
 8002970:	e0e7      	b.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800297a:	2300      	movs	r3, #0
 800297c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800297e:	2300      	movs	r3, #0
 8002980:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800298a:	d102      	bne.n	8002992 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800298c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	e009      	b.n	80029a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6e      	ldr	r2, [pc, #440]	@ (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d102      	bne.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800299c:	4b6d      	ldr	r3, [pc, #436]	@ (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	e001      	b.n	80029a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10b      	bne.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0be      	b.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ffb1 	bl	800292e <LL_ADC_REG_IsConversionOngoing>
 80029cc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ffab 	bl	800292e <LL_ADC_REG_IsConversionOngoing>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 80a0 	bne.w	8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 809c 	bne.w	8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029f0:	d004      	beq.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a55      	ldr	r2, [pc, #340]	@ (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80029fc:	4b56      	ldr	r3, [pc, #344]	@ (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80029fe:	e000      	b.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002a00:	4b56      	ldr	r3, [pc, #344]	@ (8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002a02:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d04b      	beq.n	8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a1e:	035b      	lsls	r3, r3, #13
 8002a20:	430b      	orrs	r3, r1
 8002a22:	431a      	orrs	r2, r3
 8002a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a30:	d004      	beq.n	8002a3c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a45      	ldr	r2, [pc, #276]	@ (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d10f      	bne.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002a3c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a40:	f7ff ff62 	bl	8002908 <LL_ADC_IsEnabled>
 8002a44:	4604      	mov	r4, r0
 8002a46:	4841      	ldr	r0, [pc, #260]	@ (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a48:	f7ff ff5e 	bl	8002908 <LL_ADC_IsEnabled>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4323      	orrs	r3, r4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	e012      	b.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002a5c:	483c      	ldr	r0, [pc, #240]	@ (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a5e:	f7ff ff53 	bl	8002908 <LL_ADC_IsEnabled>
 8002a62:	4604      	mov	r4, r0
 8002a64:	483b      	ldr	r0, [pc, #236]	@ (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a66:	f7ff ff4f 	bl	8002908 <LL_ADC_IsEnabled>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	431c      	orrs	r4, r3
 8002a6e:	483c      	ldr	r0, [pc, #240]	@ (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a70:	f7ff ff4a 	bl	8002908 <LL_ADC_IsEnabled>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4323      	orrs	r3, r4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d056      	beq.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a8e:	f023 030f 	bic.w	r3, r3, #15
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	6811      	ldr	r1, [r2, #0]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	6892      	ldr	r2, [r2, #8]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aa0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aa2:	e047      	b.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002aa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ab8:	d004      	beq.n	8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a23      	ldr	r2, [pc, #140]	@ (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d10f      	bne.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002ac4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ac8:	f7ff ff1e 	bl	8002908 <LL_ADC_IsEnabled>
 8002acc:	4604      	mov	r4, r0
 8002ace:	481f      	ldr	r0, [pc, #124]	@ (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ad0:	f7ff ff1a 	bl	8002908 <LL_ADC_IsEnabled>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4323      	orrs	r3, r4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e012      	b.n	8002b0a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ae4:	481a      	ldr	r0, [pc, #104]	@ (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ae6:	f7ff ff0f 	bl	8002908 <LL_ADC_IsEnabled>
 8002aea:	4604      	mov	r4, r0
 8002aec:	4819      	ldr	r0, [pc, #100]	@ (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002aee:	f7ff ff0b 	bl	8002908 <LL_ADC_IsEnabled>
 8002af2:	4603      	mov	r3, r0
 8002af4:	431c      	orrs	r4, r3
 8002af6:	481a      	ldr	r0, [pc, #104]	@ (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002af8:	f7ff ff06 	bl	8002908 <LL_ADC_IsEnabled>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4323      	orrs	r3, r4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d012      	beq.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b16:	f023 030f 	bic.w	r3, r3, #15
 8002b1a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b1e:	e009      	b.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002b32:	e000      	b.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3784      	adds	r7, #132	@ 0x84
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	50000100 	.word	0x50000100
 8002b50:	50000400 	.word	0x50000400
 8002b54:	50000500 	.word	0x50000500
 8002b58:	50000300 	.word	0x50000300
 8002b5c:	50000700 	.word	0x50000700
 8002b60:	50000600 	.word	0x50000600

08002b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b96:	4a04      	ldr	r2, [pc, #16]	@ (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	60d3      	str	r3, [r2, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	db0b      	blt.n	8002bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4907      	ldr	r1, [pc, #28]	@ (8002c00 <__NVIC_EnableIRQ+0x38>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2001      	movs	r0, #1
 8002bea:	fa00 f202 	lsl.w	r2, r0, r2
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db0a      	blt.n	8002c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	490c      	ldr	r1, [pc, #48]	@ (8002c50 <__NVIC_SetPriority+0x4c>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	440b      	add	r3, r1
 8002c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c2c:	e00a      	b.n	8002c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4908      	ldr	r1, [pc, #32]	@ (8002c54 <__NVIC_SetPriority+0x50>)
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	3b04      	subs	r3, #4
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	440b      	add	r3, r1
 8002c42:	761a      	strb	r2, [r3, #24]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000e100 	.word	0xe000e100
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	@ 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f1c3 0307 	rsb	r3, r3, #7
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	bf28      	it	cs
 8002c76:	2304      	movcs	r3, #4
 8002c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d902      	bls.n	8002c88 <NVIC_EncodePriority+0x30>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b03      	subs	r3, #3
 8002c86:	e000      	b.n	8002c8a <NVIC_EncodePriority+0x32>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	4313      	orrs	r3, r2
         );
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3724      	adds	r7, #36	@ 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ff4c 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce2:	f7ff ff63 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002ce6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	6978      	ldr	r0, [r7, #20]
 8002cee:	f7ff ffb3 	bl	8002c58 <NVIC_EncodePriority>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff82 	bl	8002c04 <__NVIC_SetPriority>
}
 8002d00:	bf00      	nop
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff56 	bl	8002bc8 <__NVIC_EnableIRQ>
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d005      	beq.n	8002d48 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
 8002d46:	e037      	b.n	8002db8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 020e 	bic.w	r2, r2, #14
 8002d56:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d66:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	2101      	movs	r1, #1
 8002d86:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d94:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00c      	beq.n	8002db8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dac:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002db6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d00d      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2204      	movs	r2, #4
 8002df2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	e047      	b.n	8002e9a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 020e 	bic.w	r2, r2, #14
 8002e18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f003 021f 	and.w	r2, r3, #31
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e56:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00c      	beq.n	8002e7a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e78:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
    }
  }
  return status;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eb2:	e15a      	b.n	800316a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 814c 	beq.w	8003164 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d005      	beq.n	8002ee4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d130      	bne.n	8002f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	f003 0201 	and.w	r2, r3, #1
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d017      	beq.n	8002f82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d123      	bne.n	8002fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	08da      	lsrs	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3208      	adds	r2, #8
 8002f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	08da      	lsrs	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3208      	adds	r2, #8
 8002fd0:	6939      	ldr	r1, [r7, #16]
 8002fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0203 	and.w	r2, r3, #3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80a6 	beq.w	8003164 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003018:	4b5b      	ldr	r3, [pc, #364]	@ (8003188 <HAL_GPIO_Init+0x2e4>)
 800301a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301c:	4a5a      	ldr	r2, [pc, #360]	@ (8003188 <HAL_GPIO_Init+0x2e4>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6613      	str	r3, [r2, #96]	@ 0x60
 8003024:	4b58      	ldr	r3, [pc, #352]	@ (8003188 <HAL_GPIO_Init+0x2e4>)
 8003026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003030:	4a56      	ldr	r2, [pc, #344]	@ (800318c <HAL_GPIO_Init+0x2e8>)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	3302      	adds	r3, #2
 8003038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	220f      	movs	r2, #15
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800305a:	d01f      	beq.n	800309c <HAL_GPIO_Init+0x1f8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a4c      	ldr	r2, [pc, #304]	@ (8003190 <HAL_GPIO_Init+0x2ec>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d019      	beq.n	8003098 <HAL_GPIO_Init+0x1f4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a4b      	ldr	r2, [pc, #300]	@ (8003194 <HAL_GPIO_Init+0x2f0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d013      	beq.n	8003094 <HAL_GPIO_Init+0x1f0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a4a      	ldr	r2, [pc, #296]	@ (8003198 <HAL_GPIO_Init+0x2f4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00d      	beq.n	8003090 <HAL_GPIO_Init+0x1ec>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a49      	ldr	r2, [pc, #292]	@ (800319c <HAL_GPIO_Init+0x2f8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d007      	beq.n	800308c <HAL_GPIO_Init+0x1e8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a48      	ldr	r2, [pc, #288]	@ (80031a0 <HAL_GPIO_Init+0x2fc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d101      	bne.n	8003088 <HAL_GPIO_Init+0x1e4>
 8003084:	2305      	movs	r3, #5
 8003086:	e00a      	b.n	800309e <HAL_GPIO_Init+0x1fa>
 8003088:	2306      	movs	r3, #6
 800308a:	e008      	b.n	800309e <HAL_GPIO_Init+0x1fa>
 800308c:	2304      	movs	r3, #4
 800308e:	e006      	b.n	800309e <HAL_GPIO_Init+0x1fa>
 8003090:	2303      	movs	r3, #3
 8003092:	e004      	b.n	800309e <HAL_GPIO_Init+0x1fa>
 8003094:	2302      	movs	r3, #2
 8003096:	e002      	b.n	800309e <HAL_GPIO_Init+0x1fa>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_GPIO_Init+0x1fa>
 800309c:	2300      	movs	r3, #0
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	f002 0203 	and.w	r2, r2, #3
 80030a4:	0092      	lsls	r2, r2, #2
 80030a6:	4093      	lsls	r3, r2
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ae:	4937      	ldr	r1, [pc, #220]	@ (800318c <HAL_GPIO_Init+0x2e8>)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030bc:	4b39      	ldr	r3, [pc, #228]	@ (80031a4 <HAL_GPIO_Init+0x300>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030e0:	4a30      	ldr	r2, [pc, #192]	@ (80031a4 <HAL_GPIO_Init+0x300>)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030e6:	4b2f      	ldr	r3, [pc, #188]	@ (80031a4 <HAL_GPIO_Init+0x300>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800310a:	4a26      	ldr	r2, [pc, #152]	@ (80031a4 <HAL_GPIO_Init+0x300>)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003110:	4b24      	ldr	r3, [pc, #144]	@ (80031a4 <HAL_GPIO_Init+0x300>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003134:	4a1b      	ldr	r2, [pc, #108]	@ (80031a4 <HAL_GPIO_Init+0x300>)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800313a:	4b1a      	ldr	r3, [pc, #104]	@ (80031a4 <HAL_GPIO_Init+0x300>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800315e:	4a11      	ldr	r2, [pc, #68]	@ (80031a4 <HAL_GPIO_Init+0x300>)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3301      	adds	r3, #1
 8003168:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	f47f ae9d 	bne.w	8002eb4 <HAL_GPIO_Init+0x10>
  }
}
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	40021000 	.word	0x40021000
 800318c:	40010000 	.word	0x40010000
 8003190:	48000400 	.word	0x48000400
 8003194:	48000800 	.word	0x48000800
 8003198:	48000c00 	.word	0x48000c00
 800319c:	48001000 	.word	0x48001000
 80031a0:	48001400 	.word	0x48001400
 80031a4:	40010400 	.word	0x40010400

080031a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
 80031b4:	4613      	mov	r3, r2
 80031b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031b8:	787b      	ldrb	r3, [r7, #1]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031be:	887a      	ldrh	r2, [r7, #2]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031c4:	e002      	b.n	80031cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031e2:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d006      	beq.n	80031fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031ee:	4a05      	ldr	r2, [pc, #20]	@ (8003204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f806 	bl	8003208 <HAL_GPIO_EXTI_Callback>
  }
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40010400 	.word	0x40010400

08003208 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d141      	bne.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800322e:	4b4b      	ldr	r3, [pc, #300]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323a:	d131      	bne.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800323c:	4b47      	ldr	r3, [pc, #284]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003242:	4a46      	ldr	r2, [pc, #280]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003248:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800324c:	4b43      	ldr	r3, [pc, #268]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003254:	4a41      	ldr	r2, [pc, #260]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800325a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800325c:	4b40      	ldr	r3, [pc, #256]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2232      	movs	r2, #50	@ 0x32
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	4a3f      	ldr	r2, [pc, #252]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	0c9b      	lsrs	r3, r3, #18
 800326e:	3301      	adds	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003272:	e002      	b.n	800327a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3b01      	subs	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800327a:	4b38      	ldr	r3, [pc, #224]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003286:	d102      	bne.n	800328e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f2      	bne.n	8003274 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800328e:	4b33      	ldr	r3, [pc, #204]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329a:	d158      	bne.n	800334e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e057      	b.n	8003350 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032a0:	4b2e      	ldr	r3, [pc, #184]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032a6:	4a2d      	ldr	r2, [pc, #180]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032b0:	e04d      	b.n	800334e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032b8:	d141      	bne.n	800333e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ba:	4b28      	ldr	r3, [pc, #160]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c6:	d131      	bne.n	800332c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c8:	4b24      	ldr	r3, [pc, #144]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032ce:	4a23      	ldr	r2, [pc, #140]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032d8:	4b20      	ldr	r3, [pc, #128]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032e0:	4a1e      	ldr	r2, [pc, #120]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003360 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2232      	movs	r2, #50	@ 0x32
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	0c9b      	lsrs	r3, r3, #18
 80032fa:	3301      	adds	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fe:	e002      	b.n	8003306 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3b01      	subs	r3, #1
 8003304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003306:	4b15      	ldr	r3, [pc, #84]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003312:	d102      	bne.n	800331a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f2      	bne.n	8003300 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800331a:	4b10      	ldr	r3, [pc, #64]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003326:	d112      	bne.n	800334e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e011      	b.n	8003350 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800332c:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003332:	4a0a      	ldr	r2, [pc, #40]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003338:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800333c:	e007      	b.n	800334e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800333e:	4b07      	ldr	r3, [pc, #28]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003346:	4a05      	ldr	r2, [pc, #20]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800334c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	40007000 	.word	0x40007000
 8003360:	20000000 	.word	0x20000000
 8003364:	431bde83 	.word	0x431bde83

08003368 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800336c:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a04      	ldr	r2, [pc, #16]	@ (8003384 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003372:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003376:	6093      	str	r3, [r2, #8]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40007000 	.word	0x40007000

08003388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e306      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d075      	beq.n	8003492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a6:	4b97      	ldr	r3, [pc, #604]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b0:	4b94      	ldr	r3, [pc, #592]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d102      	bne.n	80033c6 <HAL_RCC_OscConfig+0x3e>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d002      	beq.n	80033cc <HAL_RCC_OscConfig+0x44>
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d10b      	bne.n	80033e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	4b8d      	ldr	r3, [pc, #564]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d05b      	beq.n	8003490 <HAL_RCC_OscConfig+0x108>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d157      	bne.n	8003490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e2e1      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ec:	d106      	bne.n	80033fc <HAL_RCC_OscConfig+0x74>
 80033ee:	4b85      	ldr	r3, [pc, #532]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a84      	ldr	r2, [pc, #528]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e01d      	b.n	8003438 <HAL_RCC_OscConfig+0xb0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x98>
 8003406:	4b7f      	ldr	r3, [pc, #508]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7e      	ldr	r2, [pc, #504]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b7c      	ldr	r3, [pc, #496]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a7b      	ldr	r2, [pc, #492]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0xb0>
 8003420:	4b78      	ldr	r3, [pc, #480]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a77      	ldr	r2, [pc, #476]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 8003426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b75      	ldr	r3, [pc, #468]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a74      	ldr	r2, [pc, #464]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 8003432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe fa7a 	bl	8001938 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003448:	f7fe fa76 	bl	8001938 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	@ 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e2a6      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800345a:	4b6a      	ldr	r3, [pc, #424]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0xc0>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe fa66 	bl	8001938 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003470:	f7fe fa62 	bl	8001938 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	@ 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e292      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003482:	4b60      	ldr	r3, [pc, #384]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0xe8>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d075      	beq.n	800358a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800349e:	4b59      	ldr	r3, [pc, #356]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a8:	4b56      	ldr	r3, [pc, #344]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d102      	bne.n	80034be <HAL_RCC_OscConfig+0x136>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d002      	beq.n	80034c4 <HAL_RCC_OscConfig+0x13c>
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d11f      	bne.n	8003504 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_OscConfig+0x154>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e265      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034dc:	4b49      	ldr	r3, [pc, #292]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	061b      	lsls	r3, r3, #24
 80034ea:	4946      	ldr	r1, [pc, #280]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034f0:	4b45      	ldr	r3, [pc, #276]	@ (8003608 <HAL_RCC_OscConfig+0x280>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd fb9f 	bl	8000c38 <HAL_InitTick>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d043      	beq.n	8003588 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e251      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d023      	beq.n	8003554 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800350c:	4b3d      	ldr	r3, [pc, #244]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a3c      	ldr	r2, [pc, #240]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe fa0e 	bl	8001938 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003520:	f7fe fa0a 	bl	8001938 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e23a      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003532:	4b34      	ldr	r3, [pc, #208]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353e:	4b31      	ldr	r3, [pc, #196]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	061b      	lsls	r3, r3, #24
 800354c:	492d      	ldr	r1, [pc, #180]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
 8003552:	e01a      	b.n	800358a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003554:	4b2b      	ldr	r3, [pc, #172]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a2a      	ldr	r2, [pc, #168]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 800355a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800355e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe f9ea 	bl	8001938 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003568:	f7fe f9e6 	bl	8001938 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e216      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800357a:	4b22      	ldr	r3, [pc, #136]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1e0>
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003588:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d041      	beq.n	800361a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01c      	beq.n	80035d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359e:	4b19      	ldr	r3, [pc, #100]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80035a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035a4:	4a17      	ldr	r2, [pc, #92]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ae:	f7fe f9c3 	bl	8001938 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b6:	f7fe f9bf 	bl	8001938 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e1ef      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80035ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0ef      	beq.n	80035b6 <HAL_RCC_OscConfig+0x22e>
 80035d6:	e020      	b.n	800361a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80035da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035de:	4a09      	ldr	r2, [pc, #36]	@ (8003604 <HAL_RCC_OscConfig+0x27c>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe f9a6 	bl	8001938 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ee:	e00d      	b.n	800360c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f0:	f7fe f9a2 	bl	8001938 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d906      	bls.n	800360c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1d2      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
 8003608:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800360c:	4b8c      	ldr	r3, [pc, #560]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1ea      	bne.n	80035f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80a6 	beq.w	8003774 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003628:	2300      	movs	r3, #0
 800362a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800362c:	4b84      	ldr	r3, [pc, #528]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_OscConfig+0x2b4>
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x2b6>
 800363c:	2300      	movs	r3, #0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00d      	beq.n	800365e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003642:	4b7f      	ldr	r3, [pc, #508]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003646:	4a7e      	ldr	r2, [pc, #504]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 8003648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800364c:	6593      	str	r3, [r2, #88]	@ 0x58
 800364e:	4b7c      	ldr	r3, [pc, #496]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800365a:	2301      	movs	r3, #1
 800365c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365e:	4b79      	ldr	r3, [pc, #484]	@ (8003844 <HAL_RCC_OscConfig+0x4bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d118      	bne.n	800369c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800366a:	4b76      	ldr	r3, [pc, #472]	@ (8003844 <HAL_RCC_OscConfig+0x4bc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a75      	ldr	r2, [pc, #468]	@ (8003844 <HAL_RCC_OscConfig+0x4bc>)
 8003670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003676:	f7fe f95f 	bl	8001938 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367e:	f7fe f95b 	bl	8001938 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e18b      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003690:	4b6c      	ldr	r3, [pc, #432]	@ (8003844 <HAL_RCC_OscConfig+0x4bc>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d108      	bne.n	80036b6 <HAL_RCC_OscConfig+0x32e>
 80036a4:	4b66      	ldr	r3, [pc, #408]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036aa:	4a65      	ldr	r2, [pc, #404]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036b4:	e024      	b.n	8003700 <HAL_RCC_OscConfig+0x378>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	d110      	bne.n	80036e0 <HAL_RCC_OscConfig+0x358>
 80036be:	4b60      	ldr	r3, [pc, #384]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80036c6:	f043 0304 	orr.w	r3, r3, #4
 80036ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036de:	e00f      	b.n	8003700 <HAL_RCC_OscConfig+0x378>
 80036e0:	4b57      	ldr	r3, [pc, #348]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e6:	4a56      	ldr	r2, [pc, #344]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036f0:	4b53      	ldr	r3, [pc, #332]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f6:	4a52      	ldr	r2, [pc, #328]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	f023 0304 	bic.w	r3, r3, #4
 80036fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d016      	beq.n	8003736 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7fe f916 	bl	8001938 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800370e:	e00a      	b.n	8003726 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003710:	f7fe f912 	bl	8001938 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e140      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003726:	4b46      	ldr	r3, [pc, #280]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ed      	beq.n	8003710 <HAL_RCC_OscConfig+0x388>
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003736:	f7fe f8ff 	bl	8001938 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800373c:	e00a      	b.n	8003754 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373e:	f7fe f8fb 	bl	8001938 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e129      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003754:	4b3a      	ldr	r3, [pc, #232]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1ed      	bne.n	800373e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003762:	7ffb      	ldrb	r3, [r7, #31]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003768:	4b35      	ldr	r3, [pc, #212]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376c:	4a34      	ldr	r2, [pc, #208]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 800376e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003772:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d03c      	beq.n	80037fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01c      	beq.n	80037c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003788:	4b2d      	ldr	r3, [pc, #180]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 800378a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800378e:	4a2c      	ldr	r2, [pc, #176]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fe f8ce 	bl	8001938 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037a0:	f7fe f8ca 	bl	8001938 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e0fa      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037b2:	4b23      	ldr	r3, [pc, #140]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80037b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0ef      	beq.n	80037a0 <HAL_RCC_OscConfig+0x418>
 80037c0:	e01b      	b.n	80037fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80037c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fe f8b1 	bl	8001938 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037da:	f7fe f8ad 	bl	8001938 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e0dd      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037ec:	4b14      	ldr	r3, [pc, #80]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 80037ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1ef      	bne.n	80037da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80d1 	beq.w	80039a6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003804:	4b0e      	ldr	r3, [pc, #56]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b0c      	cmp	r3, #12
 800380e:	f000 808b 	beq.w	8003928 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d15e      	bne.n	80038d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	4b09      	ldr	r3, [pc, #36]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a08      	ldr	r2, [pc, #32]	@ (8003840 <HAL_RCC_OscConfig+0x4b8>)
 8003820:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fe f887 	bl	8001938 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800382c:	e00c      	b.n	8003848 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382e:	f7fe f883 	bl	8001938 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d905      	bls.n	8003848 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0b3      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
 8003840:	40021000 	.word	0x40021000
 8003844:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003848:	4b59      	ldr	r3, [pc, #356]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ec      	bne.n	800382e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003854:	4b56      	ldr	r3, [pc, #344]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	4b56      	ldr	r3, [pc, #344]	@ (80039b4 <HAL_RCC_OscConfig+0x62c>)
 800385a:	4013      	ands	r3, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6a11      	ldr	r1, [r2, #32]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003864:	3a01      	subs	r2, #1
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800386e:	0212      	lsls	r2, r2, #8
 8003870:	4311      	orrs	r1, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003876:	0852      	lsrs	r2, r2, #1
 8003878:	3a01      	subs	r2, #1
 800387a:	0552      	lsls	r2, r2, #21
 800387c:	4311      	orrs	r1, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003882:	0852      	lsrs	r2, r2, #1
 8003884:	3a01      	subs	r2, #1
 8003886:	0652      	lsls	r2, r2, #25
 8003888:	4311      	orrs	r1, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800388e:	06d2      	lsls	r2, r2, #27
 8003890:	430a      	orrs	r2, r1
 8003892:	4947      	ldr	r1, [pc, #284]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 8003894:	4313      	orrs	r3, r2
 8003896:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003898:	4b45      	ldr	r3, [pc, #276]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a44      	ldr	r2, [pc, #272]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 800389e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a4:	4b42      	ldr	r3, [pc, #264]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4a41      	ldr	r2, [pc, #260]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 80038aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe f842 	bl	8001938 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fe f83e 	bl	8001938 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e06e      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ca:	4b39      	ldr	r3, [pc, #228]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x530>
 80038d6:	e066      	b.n	80039a6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d8:	4b35      	ldr	r3, [pc, #212]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a34      	ldr	r2, [pc, #208]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 80038de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038e4:	4b32      	ldr	r3, [pc, #200]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a31      	ldr	r2, [pc, #196]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 80038ea:	f023 0303 	bic.w	r3, r3, #3
 80038ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038f0:	4b2f      	ldr	r3, [pc, #188]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a2e      	ldr	r2, [pc, #184]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 80038f6:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fe f81a 	bl	8001938 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003908:	f7fe f816 	bl	8001938 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e046      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800391a:	4b25      	ldr	r3, [pc, #148]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x580>
 8003926:	e03e      	b.n	80039a6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e039      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003934:	4b1e      	ldr	r3, [pc, #120]	@ (80039b0 <HAL_RCC_OscConfig+0x628>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0203 	and.w	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	429a      	cmp	r2, r3
 8003946:	d12c      	bne.n	80039a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	3b01      	subs	r3, #1
 8003954:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d123      	bne.n	80039a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d11b      	bne.n	80039a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d113      	bne.n	80039a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	3b01      	subs	r3, #1
 8003988:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d109      	bne.n	80039a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	3b01      	subs	r3, #1
 800399c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800399e:	429a      	cmp	r2, r3
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000
 80039b4:	019f800c 	.word	0x019f800c

080039b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e11e      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039d0:	4b91      	ldr	r3, [pc, #580]	@ (8003c18 <HAL_RCC_ClockConfig+0x260>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d910      	bls.n	8003a00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039de:	4b8e      	ldr	r3, [pc, #568]	@ (8003c18 <HAL_RCC_ClockConfig+0x260>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 020f 	bic.w	r2, r3, #15
 80039e6:	498c      	ldr	r1, [pc, #560]	@ (8003c18 <HAL_RCC_ClockConfig+0x260>)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003c18 <HAL_RCC_ClockConfig+0x260>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e106      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d073      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d129      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a14:	4b81      	ldr	r3, [pc, #516]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0f4      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a24:	f000 f9d0 	bl	8003dc8 <RCC_GetSysClockFreqFromPLLSource>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4a7c      	ldr	r2, [pc, #496]	@ (8003c20 <HAL_RCC_ClockConfig+0x268>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d93f      	bls.n	8003ab2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a32:	4b7a      	ldr	r3, [pc, #488]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d033      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d12f      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a52:	4b72      	ldr	r3, [pc, #456]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a5a:	4a70      	ldr	r2, [pc, #448]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a62:	2380      	movs	r3, #128	@ 0x80
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e024      	b.n	8003ab2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a70:	4b6a      	ldr	r3, [pc, #424]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0c6      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a80:	4b66      	ldr	r3, [pc, #408]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0be      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a90:	f000 f8ce 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4a61      	ldr	r2, [pc, #388]	@ (8003c20 <HAL_RCC_ClockConfig+0x268>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d909      	bls.n	8003ab2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003aa6:	4a5d      	ldr	r2, [pc, #372]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b5a      	ldr	r3, [pc, #360]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4957      	ldr	r1, [pc, #348]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac4:	f7fd ff38 	bl	8001938 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fd ff34 	bl	8001938 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e095      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d023      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b0c:	4b43      	ldr	r3, [pc, #268]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4a42      	ldr	r2, [pc, #264]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b24:	4b3d      	ldr	r3, [pc, #244]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b2c:	4a3b      	ldr	r2, [pc, #236]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b39      	ldr	r3, [pc, #228]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4936      	ldr	r1, [pc, #216]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b80      	cmp	r3, #128	@ 0x80
 8003b4c:	d105      	bne.n	8003b5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b4e:	4b33      	ldr	r3, [pc, #204]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	4a32      	ldr	r2, [pc, #200]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003b54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c18 <HAL_RCC_ClockConfig+0x260>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d21d      	bcs.n	8003ba4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b68:	4b2b      	ldr	r3, [pc, #172]	@ (8003c18 <HAL_RCC_ClockConfig+0x260>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 020f 	bic.w	r2, r3, #15
 8003b70:	4929      	ldr	r1, [pc, #164]	@ (8003c18 <HAL_RCC_ClockConfig+0x260>)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b78:	f7fd fede 	bl	8001938 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b80:	f7fd feda 	bl	8001938 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e03b      	b.n	8003c0e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b20      	ldr	r3, [pc, #128]	@ (8003c18 <HAL_RCC_ClockConfig+0x260>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d1ed      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4917      	ldr	r1, [pc, #92]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bce:	4b13      	ldr	r3, [pc, #76]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	490f      	ldr	r1, [pc, #60]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003be2:	f000 f825 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003be6:	4602      	mov	r2, r0
 8003be8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c1c <HAL_RCC_ClockConfig+0x264>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	490c      	ldr	r1, [pc, #48]	@ (8003c24 <HAL_RCC_ClockConfig+0x26c>)
 8003bf4:	5ccb      	ldrb	r3, [r1, r3]
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8003c28 <HAL_RCC_ClockConfig+0x270>)
 8003c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c02:	4b0a      	ldr	r3, [pc, #40]	@ (8003c2c <HAL_RCC_ClockConfig+0x274>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd f816 	bl	8000c38 <HAL_InitTick>
 8003c0c:	4603      	mov	r3, r0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40022000 	.word	0x40022000
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	04c4b400 	.word	0x04c4b400
 8003c24:	0800926c 	.word	0x0800926c
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	200000c0 	.word	0x200000c0

08003c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c36:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d102      	bne.n	8003c48 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c42:	4b2a      	ldr	r3, [pc, #168]	@ (8003cec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	e047      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c48:	4b27      	ldr	r3, [pc, #156]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d102      	bne.n	8003c5a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c54:	4b26      	ldr	r3, [pc, #152]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	e03e      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c5a:	4b23      	ldr	r3, [pc, #140]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d136      	bne.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c66:	4b20      	ldr	r3, [pc, #128]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c70:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d10c      	bne.n	8003c9e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c84:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	4a16      	ldr	r2, [pc, #88]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c8e:	68d2      	ldr	r2, [r2, #12]
 8003c90:	0a12      	lsrs	r2, r2, #8
 8003c92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	617b      	str	r3, [r7, #20]
      break;
 8003c9c:	e00c      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c9e:	4a13      	ldr	r2, [pc, #76]	@ (8003cec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	4a10      	ldr	r2, [pc, #64]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca8:	68d2      	ldr	r2, [r2, #12]
 8003caa:	0a12      	lsrs	r2, r2, #8
 8003cac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cb0:	fb02 f303 	mul.w	r3, r2, r3
 8003cb4:	617b      	str	r3, [r7, #20]
      break;
 8003cb6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	0e5b      	lsrs	r3, r3, #25
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	e001      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cd8:	693b      	ldr	r3, [r7, #16]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	00f42400 	.word	0x00f42400
 8003cf0:	016e3600 	.word	0x016e3600

08003cf4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	@ (8003d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000000 	.word	0x20000000

08003d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d10:	f7ff fff0 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4904      	ldr	r1, [pc, #16]	@ (8003d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021000 	.word	0x40021000
 8003d34:	0800927c 	.word	0x0800927c

08003d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d3c:	f7ff ffda 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0adb      	lsrs	r3, r3, #11
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4904      	ldr	r1, [pc, #16]	@ (8003d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	0800927c 	.word	0x0800927c

08003d64 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	220f      	movs	r2, #15
 8003d72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d74:	4b12      	ldr	r3, [pc, #72]	@ (8003dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0203 	and.w	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d80:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d98:	4b09      	ldr	r3, [pc, #36]	@ (8003dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	08db      	lsrs	r3, r3, #3
 8003d9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003da6:	4b07      	ldr	r3, [pc, #28]	@ (8003dc4 <HAL_RCC_GetClockConfig+0x60>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 020f 	and.w	r2, r3, #15
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	601a      	str	r2, [r3, #0]
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40022000 	.word	0x40022000

08003dc8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dce:	4b1e      	ldr	r3, [pc, #120]	@ (8003e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	3301      	adds	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d10c      	bne.n	8003e06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dec:	4a17      	ldr	r2, [pc, #92]	@ (8003e4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	4a14      	ldr	r2, [pc, #80]	@ (8003e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003df6:	68d2      	ldr	r2, [r2, #12]
 8003df8:	0a12      	lsrs	r2, r2, #8
 8003dfa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	617b      	str	r3, [r7, #20]
    break;
 8003e04:	e00c      	b.n	8003e20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e06:	4a12      	ldr	r2, [pc, #72]	@ (8003e50 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e10:	68d2      	ldr	r2, [r2, #12]
 8003e12:	0a12      	lsrs	r2, r2, #8
 8003e14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e18:	fb02 f303 	mul.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]
    break;
 8003e1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e20:	4b09      	ldr	r3, [pc, #36]	@ (8003e48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	0e5b      	lsrs	r3, r3, #25
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e3a:	687b      	ldr	r3, [r7, #4]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	016e3600 	.word	0x016e3600
 8003e50:	00f42400 	.word	0x00f42400

08003e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e60:	2300      	movs	r3, #0
 8003e62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8098 	beq.w	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e76:	4b43      	ldr	r3, [pc, #268]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	4b40      	ldr	r3, [pc, #256]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e86:	4a3f      	ldr	r2, [pc, #252]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a39      	ldr	r2, [pc, #228]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eaa:	f7fd fd45 	bl	8001938 <HAL_GetTick>
 8003eae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eb0:	e009      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb2:	f7fd fd41 	bl	8001938 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d902      	bls.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	74fb      	strb	r3, [r7, #19]
        break;
 8003ec4:	e005      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ec6:	4b30      	ldr	r3, [pc, #192]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0ef      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d159      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01e      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d019      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ef4:	4b23      	ldr	r3, [pc, #140]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003efe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f00:	4b20      	ldr	r3, [pc, #128]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f06:	4a1f      	ldr	r2, [pc, #124]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f10:	4b1c      	ldr	r3, [pc, #112]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f16:	4a1b      	ldr	r2, [pc, #108]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f20:	4a18      	ldr	r2, [pc, #96]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d016      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fd fd01 	bl	8001938 <HAL_GetTick>
 8003f36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f38:	e00b      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3a:	f7fd fcfd 	bl	8001938 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d902      	bls.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	74fb      	strb	r3, [r7, #19]
            break;
 8003f50:	e006      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f52:	4b0c      	ldr	r3, [pc, #48]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ec      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f66:	4b07      	ldr	r3, [pc, #28]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f74:	4903      	ldr	r1, [pc, #12]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f7c:	e008      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f7e:	7cfb      	ldrb	r3, [r7, #19]
 8003f80:	74bb      	strb	r3, [r7, #18]
 8003f82:	e005      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f90:	7c7b      	ldrb	r3, [r7, #17]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d105      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f96:	4ba7      	ldr	r3, [pc, #668]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9a:	4aa6      	ldr	r2, [pc, #664]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fae:	4ba1      	ldr	r3, [pc, #644]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb4:	f023 0203 	bic.w	r2, r3, #3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	499d      	ldr	r1, [pc, #628]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fd0:	4b98      	ldr	r3, [pc, #608]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	f023 020c 	bic.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4995      	ldr	r1, [pc, #596]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ff2:	4b90      	ldr	r3, [pc, #576]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	498c      	ldr	r1, [pc, #560]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004014:	4b87      	ldr	r3, [pc, #540]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	4984      	ldr	r1, [pc, #528]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004036:	4b7f      	ldr	r3, [pc, #508]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	497b      	ldr	r1, [pc, #492]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004058:	4b76      	ldr	r3, [pc, #472]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	4973      	ldr	r1, [pc, #460]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800407a:	4b6e      	ldr	r3, [pc, #440]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004080:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	496a      	ldr	r1, [pc, #424]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800409c:	4b65      	ldr	r3, [pc, #404]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	4962      	ldr	r1, [pc, #392]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040be:	4b5d      	ldr	r3, [pc, #372]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	4959      	ldr	r1, [pc, #356]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040e0:	4b54      	ldr	r3, [pc, #336]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040e6:	f023 0203 	bic.w	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	4951      	ldr	r1, [pc, #324]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004102:	4b4c      	ldr	r3, [pc, #304]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004110:	4948      	ldr	r1, [pc, #288]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d015      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004124:	4b43      	ldr	r3, [pc, #268]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	4940      	ldr	r1, [pc, #256]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004142:	d105      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004144:	4b3b      	ldr	r3, [pc, #236]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a3a      	ldr	r2, [pc, #232]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800414e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004158:	2b00      	cmp	r3, #0
 800415a:	d015      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800415c:	4b35      	ldr	r3, [pc, #212]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004162:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416a:	4932      	ldr	r1, [pc, #200]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004176:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800417a:	d105      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800417c:	4b2d      	ldr	r3, [pc, #180]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4a2c      	ldr	r2, [pc, #176]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004186:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d015      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004194:	4b27      	ldr	r3, [pc, #156]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a2:	4924      	ldr	r1, [pc, #144]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041b2:	d105      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d015      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041cc:	4b19      	ldr	r3, [pc, #100]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	4916      	ldr	r1, [pc, #88]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041ea:	d105      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ec:	4b11      	ldr	r3, [pc, #68]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4a10      	ldr	r2, [pc, #64]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d019      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004204:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	4908      	ldr	r1, [pc, #32]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004222:	d109      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a02      	ldr	r2, [pc, #8]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800422e:	60d3      	str	r3, [r2, #12]
 8004230:	e002      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004232:	bf00      	nop
 8004234:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d015      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004244:	4b29      	ldr	r3, [pc, #164]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004252:	4926      	ldr	r1, [pc, #152]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004262:	d105      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004264:	4b21      	ldr	r3, [pc, #132]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4a20      	ldr	r2, [pc, #128]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800426a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d015      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800427c:	4b1b      	ldr	r3, [pc, #108]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004282:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800428a:	4918      	ldr	r1, [pc, #96]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800429a:	d105      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800429c:	4b13      	ldr	r3, [pc, #76]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d015      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042b4:	4b0d      	ldr	r3, [pc, #52]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c2:	490a      	ldr	r1, [pc, #40]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042d2:	d105      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d4:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a04      	ldr	r2, [pc, #16]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000

080042f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e049      	b.n	8004396 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f841 	bl	800439e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3304      	adds	r3, #4
 800432c:	4619      	mov	r1, r3
 800432e:	4610      	mov	r0, r2
 8004330:	f000 fcde 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d001      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e054      	b.n	8004476 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a26      	ldr	r2, [pc, #152]	@ (8004484 <HAL_TIM_Base_Start_IT+0xd0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d022      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f6:	d01d      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a22      	ldr	r2, [pc, #136]	@ (8004488 <HAL_TIM_Base_Start_IT+0xd4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d018      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a21      	ldr	r2, [pc, #132]	@ (800448c <HAL_TIM_Base_Start_IT+0xd8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d013      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1f      	ldr	r2, [pc, #124]	@ (8004490 <HAL_TIM_Base_Start_IT+0xdc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00e      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1e      	ldr	r2, [pc, #120]	@ (8004494 <HAL_TIM_Base_Start_IT+0xe0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d009      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1c      	ldr	r2, [pc, #112]	@ (8004498 <HAL_TIM_Base_Start_IT+0xe4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1b      	ldr	r2, [pc, #108]	@ (800449c <HAL_TIM_Base_Start_IT+0xe8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d115      	bne.n	8004460 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	4b19      	ldr	r3, [pc, #100]	@ (80044a0 <HAL_TIM_Base_Start_IT+0xec>)
 800443c:	4013      	ands	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b06      	cmp	r3, #6
 8004444:	d015      	beq.n	8004472 <HAL_TIM_Base_Start_IT+0xbe>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800444c:	d011      	beq.n	8004472 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445e:	e008      	b.n	8004472 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	e000      	b.n	8004474 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004472:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800
 8004490:	40000c00 	.word	0x40000c00
 8004494:	40013400 	.word	0x40013400
 8004498:	40014000 	.word	0x40014000
 800449c:	40015000 	.word	0x40015000
 80044a0:	00010007 	.word	0x00010007

080044a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e049      	b.n	800454a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fc fe46 	bl	800115c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f000 fc04 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_TIM_PWM_Start+0x24>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	bf14      	ite	ne
 8004570:	2301      	movne	r3, #1
 8004572:	2300      	moveq	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	e03c      	b.n	80045f2 <HAL_TIM_PWM_Start+0x9e>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b04      	cmp	r3, #4
 800457c:	d109      	bne.n	8004592 <HAL_TIM_PWM_Start+0x3e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b01      	cmp	r3, #1
 8004588:	bf14      	ite	ne
 800458a:	2301      	movne	r3, #1
 800458c:	2300      	moveq	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	e02f      	b.n	80045f2 <HAL_TIM_PWM_Start+0x9e>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b08      	cmp	r3, #8
 8004596:	d109      	bne.n	80045ac <HAL_TIM_PWM_Start+0x58>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e022      	b.n	80045f2 <HAL_TIM_PWM_Start+0x9e>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b0c      	cmp	r3, #12
 80045b0:	d109      	bne.n	80045c6 <HAL_TIM_PWM_Start+0x72>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	bf14      	ite	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	2300      	moveq	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	e015      	b.n	80045f2 <HAL_TIM_PWM_Start+0x9e>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d109      	bne.n	80045e0 <HAL_TIM_PWM_Start+0x8c>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e008      	b.n	80045f2 <HAL_TIM_PWM_Start+0x9e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0a6      	b.n	8004748 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <HAL_TIM_PWM_Start+0xb6>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004608:	e023      	b.n	8004652 <HAL_TIM_PWM_Start+0xfe>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b04      	cmp	r3, #4
 800460e:	d104      	bne.n	800461a <HAL_TIM_PWM_Start+0xc6>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004618:	e01b      	b.n	8004652 <HAL_TIM_PWM_Start+0xfe>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d104      	bne.n	800462a <HAL_TIM_PWM_Start+0xd6>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004628:	e013      	b.n	8004652 <HAL_TIM_PWM_Start+0xfe>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d104      	bne.n	800463a <HAL_TIM_PWM_Start+0xe6>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004638:	e00b      	b.n	8004652 <HAL_TIM_PWM_Start+0xfe>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b10      	cmp	r3, #16
 800463e:	d104      	bne.n	800464a <HAL_TIM_PWM_Start+0xf6>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004648:	e003      	b.n	8004652 <HAL_TIM_PWM_Start+0xfe>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2201      	movs	r2, #1
 8004658:	6839      	ldr	r1, [r7, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 ff8e 	bl	800557c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a3a      	ldr	r2, [pc, #232]	@ (8004750 <HAL_TIM_PWM_Start+0x1fc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d018      	beq.n	800469c <HAL_TIM_PWM_Start+0x148>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a39      	ldr	r2, [pc, #228]	@ (8004754 <HAL_TIM_PWM_Start+0x200>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d013      	beq.n	800469c <HAL_TIM_PWM_Start+0x148>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a37      	ldr	r2, [pc, #220]	@ (8004758 <HAL_TIM_PWM_Start+0x204>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00e      	beq.n	800469c <HAL_TIM_PWM_Start+0x148>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a36      	ldr	r2, [pc, #216]	@ (800475c <HAL_TIM_PWM_Start+0x208>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d009      	beq.n	800469c <HAL_TIM_PWM_Start+0x148>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a34      	ldr	r2, [pc, #208]	@ (8004760 <HAL_TIM_PWM_Start+0x20c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_TIM_PWM_Start+0x148>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a33      	ldr	r2, [pc, #204]	@ (8004764 <HAL_TIM_PWM_Start+0x210>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d101      	bne.n	80046a0 <HAL_TIM_PWM_Start+0x14c>
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <HAL_TIM_PWM_Start+0x14e>
 80046a0:	2300      	movs	r3, #0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a25      	ldr	r2, [pc, #148]	@ (8004750 <HAL_TIM_PWM_Start+0x1fc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d022      	beq.n	8004706 <HAL_TIM_PWM_Start+0x1b2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c8:	d01d      	beq.n	8004706 <HAL_TIM_PWM_Start+0x1b2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a26      	ldr	r2, [pc, #152]	@ (8004768 <HAL_TIM_PWM_Start+0x214>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_TIM_PWM_Start+0x1b2>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a24      	ldr	r2, [pc, #144]	@ (800476c <HAL_TIM_PWM_Start+0x218>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_TIM_PWM_Start+0x1b2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a23      	ldr	r2, [pc, #140]	@ (8004770 <HAL_TIM_PWM_Start+0x21c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIM_PWM_Start+0x1b2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a19      	ldr	r2, [pc, #100]	@ (8004754 <HAL_TIM_PWM_Start+0x200>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIM_PWM_Start+0x1b2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a18      	ldr	r2, [pc, #96]	@ (8004758 <HAL_TIM_PWM_Start+0x204>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIM_PWM_Start+0x1b2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a18      	ldr	r2, [pc, #96]	@ (8004764 <HAL_TIM_PWM_Start+0x210>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d115      	bne.n	8004732 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	4b19      	ldr	r3, [pc, #100]	@ (8004774 <HAL_TIM_PWM_Start+0x220>)
 800470e:	4013      	ands	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b06      	cmp	r3, #6
 8004716:	d015      	beq.n	8004744 <HAL_TIM_PWM_Start+0x1f0>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471e:	d011      	beq.n	8004744 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	e008      	b.n	8004744 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0201 	orr.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	e000      	b.n	8004746 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004744:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40013400 	.word	0x40013400
 8004758:	40014000 	.word	0x40014000
 800475c:	40014400 	.word	0x40014400
 8004760:	40014800 	.word	0x40014800
 8004764:	40015000 	.word	0x40015000
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	00010007 	.word	0x00010007

08004778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b02      	cmp	r3, #2
 800478c:	d122      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d11b      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0202 	mvn.w	r2, #2
 80047a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa7a 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 80047c0:	e005      	b.n	80047ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fa6c 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fa7d 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d122      	bne.n	8004828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d11b      	bne.n	8004828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0204 	mvn.w	r2, #4
 80047f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa50 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 8004814:	e005      	b.n	8004822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa42 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fa53 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b08      	cmp	r3, #8
 8004834:	d122      	bne.n	800487c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b08      	cmp	r3, #8
 8004842:	d11b      	bne.n	800487c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0208 	mvn.w	r2, #8
 800484c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2204      	movs	r2, #4
 8004852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa26 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 8004868:	e005      	b.n	8004876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa18 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fa29 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b10      	cmp	r3, #16
 8004888:	d122      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	d11b      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0210 	mvn.w	r2, #16
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2208      	movs	r2, #8
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9fc 	bl	8004cb4 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f9ee 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f9ff 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d10e      	bne.n	80048fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d107      	bne.n	80048fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0201 	mvn.w	r2, #1
 80048f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fc f962 	bl	8000bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004906:	2b80      	cmp	r3, #128	@ 0x80
 8004908:	d10e      	bne.n	8004928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004914:	2b80      	cmp	r3, #128	@ 0x80
 8004916:	d107      	bne.n	8004928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f001 f912 	bl	8005b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004936:	d10e      	bne.n	8004956 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004942:	2b80      	cmp	r3, #128	@ 0x80
 8004944:	d107      	bne.n	8004956 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800494e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f001 f905 	bl	8005b60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004960:	2b40      	cmp	r3, #64	@ 0x40
 8004962:	d10e      	bne.n	8004982 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496e:	2b40      	cmp	r3, #64	@ 0x40
 8004970:	d107      	bne.n	8004982 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800497a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f9ad 	bl	8004cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b20      	cmp	r3, #32
 800498e:	d10e      	bne.n	80049ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b20      	cmp	r3, #32
 800499c:	d107      	bne.n	80049ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f06f 0220 	mvn.w	r2, #32
 80049a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f001 f8c5 	bl	8005b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049bc:	d10f      	bne.n	80049de <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049cc:	d107      	bne.n	80049de <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f001 f8cb 	bl	8005b74 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049ec:	d10f      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049fc:	d107      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f001 f8bd 	bl	8005b88 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a1c:	d10f      	bne.n	8004a3e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a2c:	d107      	bne.n	8004a3e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f001 f8af 	bl	8005b9c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a4c:	d10f      	bne.n	8004a6e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a5c:	d107      	bne.n	8004a6e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f001 f8a1 	bl	8005bb0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e0ff      	b.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b14      	cmp	r3, #20
 8004aa2:	f200 80f0 	bhi.w	8004c86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8004aac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aac:	08004b01 	.word	0x08004b01
 8004ab0:	08004c87 	.word	0x08004c87
 8004ab4:	08004c87 	.word	0x08004c87
 8004ab8:	08004c87 	.word	0x08004c87
 8004abc:	08004b41 	.word	0x08004b41
 8004ac0:	08004c87 	.word	0x08004c87
 8004ac4:	08004c87 	.word	0x08004c87
 8004ac8:	08004c87 	.word	0x08004c87
 8004acc:	08004b83 	.word	0x08004b83
 8004ad0:	08004c87 	.word	0x08004c87
 8004ad4:	08004c87 	.word	0x08004c87
 8004ad8:	08004c87 	.word	0x08004c87
 8004adc:	08004bc3 	.word	0x08004bc3
 8004ae0:	08004c87 	.word	0x08004c87
 8004ae4:	08004c87 	.word	0x08004c87
 8004ae8:	08004c87 	.word	0x08004c87
 8004aec:	08004c05 	.word	0x08004c05
 8004af0:	08004c87 	.word	0x08004c87
 8004af4:	08004c87 	.word	0x08004c87
 8004af8:	08004c87 	.word	0x08004c87
 8004afc:	08004c45 	.word	0x08004c45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f99a 	bl	8004e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0208 	orr.w	r2, r2, #8
 8004b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0204 	bic.w	r2, r2, #4
 8004b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6999      	ldr	r1, [r3, #24]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	619a      	str	r2, [r3, #24]
      break;
 8004b3e:	e0a5      	b.n	8004c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fa14 	bl	8004f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6999      	ldr	r1, [r3, #24]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	021a      	lsls	r2, r3, #8
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	619a      	str	r2, [r3, #24]
      break;
 8004b80:	e084      	b.n	8004c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fa87 	bl	800509c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0208 	orr.w	r2, r2, #8
 8004b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0204 	bic.w	r2, r2, #4
 8004bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	61da      	str	r2, [r3, #28]
      break;
 8004bc0:	e064      	b.n	8004c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 faf9 	bl	80051c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69d9      	ldr	r1, [r3, #28]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	021a      	lsls	r2, r3, #8
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	61da      	str	r2, [r3, #28]
      break;
 8004c02:	e043      	b.n	8004c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fb6c 	bl	80052e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0208 	orr.w	r2, r2, #8
 8004c1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0204 	bic.w	r2, r2, #4
 8004c2e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c42:	e023      	b.n	8004c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fbb6 	bl	80053bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c6e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	021a      	lsls	r2, r3, #8
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c84:	e002      	b.n	8004c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop

08004ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a46      	ldr	r2, [pc, #280]	@ (8004e1c <TIM_Base_SetConfig+0x12c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d017      	beq.n	8004d38 <TIM_Base_SetConfig+0x48>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d0e:	d013      	beq.n	8004d38 <TIM_Base_SetConfig+0x48>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a43      	ldr	r2, [pc, #268]	@ (8004e20 <TIM_Base_SetConfig+0x130>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00f      	beq.n	8004d38 <TIM_Base_SetConfig+0x48>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a42      	ldr	r2, [pc, #264]	@ (8004e24 <TIM_Base_SetConfig+0x134>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <TIM_Base_SetConfig+0x48>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a41      	ldr	r2, [pc, #260]	@ (8004e28 <TIM_Base_SetConfig+0x138>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_Base_SetConfig+0x48>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a40      	ldr	r2, [pc, #256]	@ (8004e2c <TIM_Base_SetConfig+0x13c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_Base_SetConfig+0x48>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a3f      	ldr	r2, [pc, #252]	@ (8004e30 <TIM_Base_SetConfig+0x140>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d108      	bne.n	8004d4a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a33      	ldr	r2, [pc, #204]	@ (8004e1c <TIM_Base_SetConfig+0x12c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d023      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d58:	d01f      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a30      	ldr	r2, [pc, #192]	@ (8004e20 <TIM_Base_SetConfig+0x130>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d01b      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a2f      	ldr	r2, [pc, #188]	@ (8004e24 <TIM_Base_SetConfig+0x134>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d017      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004e28 <TIM_Base_SetConfig+0x138>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2d      	ldr	r2, [pc, #180]	@ (8004e2c <TIM_Base_SetConfig+0x13c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00f      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2d      	ldr	r2, [pc, #180]	@ (8004e34 <TIM_Base_SetConfig+0x144>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00b      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2c      	ldr	r2, [pc, #176]	@ (8004e38 <TIM_Base_SetConfig+0x148>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d007      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8004e3c <TIM_Base_SetConfig+0x14c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d003      	beq.n	8004d9a <TIM_Base_SetConfig+0xaa>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a26      	ldr	r2, [pc, #152]	@ (8004e30 <TIM_Base_SetConfig+0x140>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d108      	bne.n	8004dac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a12      	ldr	r2, [pc, #72]	@ (8004e1c <TIM_Base_SetConfig+0x12c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d013      	beq.n	8004e00 <TIM_Base_SetConfig+0x110>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a14      	ldr	r2, [pc, #80]	@ (8004e2c <TIM_Base_SetConfig+0x13c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <TIM_Base_SetConfig+0x110>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a14      	ldr	r2, [pc, #80]	@ (8004e34 <TIM_Base_SetConfig+0x144>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0x110>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a13      	ldr	r2, [pc, #76]	@ (8004e38 <TIM_Base_SetConfig+0x148>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0x110>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a12      	ldr	r2, [pc, #72]	@ (8004e3c <TIM_Base_SetConfig+0x14c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0x110>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a0d      	ldr	r2, [pc, #52]	@ (8004e30 <TIM_Base_SetConfig+0x140>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d103      	bne.n	8004e08 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	615a      	str	r2, [r3, #20]
}
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40000800 	.word	0x40000800
 8004e28:	40000c00 	.word	0x40000c00
 8004e2c:	40013400 	.word	0x40013400
 8004e30:	40015000 	.word	0x40015000
 8004e34:	40014000 	.word	0x40014000
 8004e38:	40014400 	.word	0x40014400
 8004e3c:	40014800 	.word	0x40014800

08004e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f023 0201 	bic.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0303 	bic.w	r3, r3, #3
 8004e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f023 0302 	bic.w	r3, r3, #2
 8004e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a30      	ldr	r2, [pc, #192]	@ (8004f5c <TIM_OC1_SetConfig+0x11c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x88>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8004f60 <TIM_OC1_SetConfig+0x120>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00f      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x88>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8004f64 <TIM_OC1_SetConfig+0x124>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x88>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a2d      	ldr	r2, [pc, #180]	@ (8004f68 <TIM_OC1_SetConfig+0x128>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d007      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x88>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a2c      	ldr	r2, [pc, #176]	@ (8004f6c <TIM_OC1_SetConfig+0x12c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x88>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8004f70 <TIM_OC1_SetConfig+0x130>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d10c      	bne.n	8004ee2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0308 	bic.w	r3, r3, #8
 8004ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f5c <TIM_OC1_SetConfig+0x11c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <TIM_OC1_SetConfig+0xd2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a1c      	ldr	r2, [pc, #112]	@ (8004f60 <TIM_OC1_SetConfig+0x120>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00f      	beq.n	8004f12 <TIM_OC1_SetConfig+0xd2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f64 <TIM_OC1_SetConfig+0x124>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00b      	beq.n	8004f12 <TIM_OC1_SetConfig+0xd2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1a      	ldr	r2, [pc, #104]	@ (8004f68 <TIM_OC1_SetConfig+0x128>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d007      	beq.n	8004f12 <TIM_OC1_SetConfig+0xd2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a19      	ldr	r2, [pc, #100]	@ (8004f6c <TIM_OC1_SetConfig+0x12c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d003      	beq.n	8004f12 <TIM_OC1_SetConfig+0xd2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a18      	ldr	r2, [pc, #96]	@ (8004f70 <TIM_OC1_SetConfig+0x130>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d111      	bne.n	8004f36 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	621a      	str	r2, [r3, #32]
}
 8004f50:	bf00      	nop
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40012c00 	.word	0x40012c00
 8004f60:	40013400 	.word	0x40013400
 8004f64:	40014000 	.word	0x40014000
 8004f68:	40014400 	.word	0x40014400
 8004f6c:	40014800 	.word	0x40014800
 8004f70:	40015000 	.word	0x40015000

08004f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0210 	bic.w	r2, r3, #16
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f023 0320 	bic.w	r3, r3, #32
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8005084 <TIM_OC2_SetConfig+0x110>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_OC2_SetConfig+0x74>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a2b      	ldr	r2, [pc, #172]	@ (8005088 <TIM_OC2_SetConfig+0x114>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_OC2_SetConfig+0x74>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800508c <TIM_OC2_SetConfig+0x118>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d10d      	bne.n	8005004 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005002:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a1f      	ldr	r2, [pc, #124]	@ (8005084 <TIM_OC2_SetConfig+0x110>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <TIM_OC2_SetConfig+0xc0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a1e      	ldr	r2, [pc, #120]	@ (8005088 <TIM_OC2_SetConfig+0x114>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00f      	beq.n	8005034 <TIM_OC2_SetConfig+0xc0>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a1e      	ldr	r2, [pc, #120]	@ (8005090 <TIM_OC2_SetConfig+0x11c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00b      	beq.n	8005034 <TIM_OC2_SetConfig+0xc0>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a1d      	ldr	r2, [pc, #116]	@ (8005094 <TIM_OC2_SetConfig+0x120>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_OC2_SetConfig+0xc0>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a1c      	ldr	r2, [pc, #112]	@ (8005098 <TIM_OC2_SetConfig+0x124>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_OC2_SetConfig+0xc0>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a17      	ldr	r2, [pc, #92]	@ (800508c <TIM_OC2_SetConfig+0x118>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d113      	bne.n	800505c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800503a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40013400 	.word	0x40013400
 800508c:	40015000 	.word	0x40015000
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800

0800509c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2b      	ldr	r2, [pc, #172]	@ (80051a8 <TIM_OC3_SetConfig+0x10c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <TIM_OC3_SetConfig+0x72>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2a      	ldr	r2, [pc, #168]	@ (80051ac <TIM_OC3_SetConfig+0x110>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <TIM_OC3_SetConfig+0x72>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a29      	ldr	r2, [pc, #164]	@ (80051b0 <TIM_OC3_SetConfig+0x114>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d10d      	bne.n	800512a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a1e      	ldr	r2, [pc, #120]	@ (80051a8 <TIM_OC3_SetConfig+0x10c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <TIM_OC3_SetConfig+0xbe>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a1d      	ldr	r2, [pc, #116]	@ (80051ac <TIM_OC3_SetConfig+0x110>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00f      	beq.n	800515a <TIM_OC3_SetConfig+0xbe>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a1d      	ldr	r2, [pc, #116]	@ (80051b4 <TIM_OC3_SetConfig+0x118>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00b      	beq.n	800515a <TIM_OC3_SetConfig+0xbe>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1c      	ldr	r2, [pc, #112]	@ (80051b8 <TIM_OC3_SetConfig+0x11c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d007      	beq.n	800515a <TIM_OC3_SetConfig+0xbe>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1b      	ldr	r2, [pc, #108]	@ (80051bc <TIM_OC3_SetConfig+0x120>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d003      	beq.n	800515a <TIM_OC3_SetConfig+0xbe>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a16      	ldr	r2, [pc, #88]	@ (80051b0 <TIM_OC3_SetConfig+0x114>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d113      	bne.n	8005182 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	621a      	str	r2, [r3, #32]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40013400 	.word	0x40013400
 80051b0:	40015000 	.word	0x40015000
 80051b4:	40014000 	.word	0x40014000
 80051b8:	40014400 	.word	0x40014400
 80051bc:	40014800 	.word	0x40014800

080051c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800520e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	031b      	lsls	r3, r3, #12
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a2c      	ldr	r2, [pc, #176]	@ (80052d0 <TIM_OC4_SetConfig+0x110>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_OC4_SetConfig+0x74>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a2b      	ldr	r2, [pc, #172]	@ (80052d4 <TIM_OC4_SetConfig+0x114>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC4_SetConfig+0x74>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a2a      	ldr	r2, [pc, #168]	@ (80052d8 <TIM_OC4_SetConfig+0x118>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d10d      	bne.n	8005250 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800523a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	031b      	lsls	r3, r3, #12
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800524e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a1f      	ldr	r2, [pc, #124]	@ (80052d0 <TIM_OC4_SetConfig+0x110>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d013      	beq.n	8005280 <TIM_OC4_SetConfig+0xc0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a1e      	ldr	r2, [pc, #120]	@ (80052d4 <TIM_OC4_SetConfig+0x114>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00f      	beq.n	8005280 <TIM_OC4_SetConfig+0xc0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a1e      	ldr	r2, [pc, #120]	@ (80052dc <TIM_OC4_SetConfig+0x11c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00b      	beq.n	8005280 <TIM_OC4_SetConfig+0xc0>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a1d      	ldr	r2, [pc, #116]	@ (80052e0 <TIM_OC4_SetConfig+0x120>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d007      	beq.n	8005280 <TIM_OC4_SetConfig+0xc0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a1c      	ldr	r2, [pc, #112]	@ (80052e4 <TIM_OC4_SetConfig+0x124>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_OC4_SetConfig+0xc0>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a17      	ldr	r2, [pc, #92]	@ (80052d8 <TIM_OC4_SetConfig+0x118>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d113      	bne.n	80052a8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005286:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800528e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	019b      	lsls	r3, r3, #6
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	019b      	lsls	r3, r3, #6
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	621a      	str	r2, [r3, #32]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40013400 	.word	0x40013400
 80052d8:	40015000 	.word	0x40015000
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40014400 	.word	0x40014400
 80052e4:	40014800 	.word	0x40014800

080052e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800532c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a19      	ldr	r2, [pc, #100]	@ (80053a4 <TIM_OC5_SetConfig+0xbc>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <TIM_OC5_SetConfig+0x82>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a18      	ldr	r2, [pc, #96]	@ (80053a8 <TIM_OC5_SetConfig+0xc0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00f      	beq.n	800536a <TIM_OC5_SetConfig+0x82>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a17      	ldr	r2, [pc, #92]	@ (80053ac <TIM_OC5_SetConfig+0xc4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00b      	beq.n	800536a <TIM_OC5_SetConfig+0x82>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a16      	ldr	r2, [pc, #88]	@ (80053b0 <TIM_OC5_SetConfig+0xc8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_OC5_SetConfig+0x82>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a15      	ldr	r2, [pc, #84]	@ (80053b4 <TIM_OC5_SetConfig+0xcc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_OC5_SetConfig+0x82>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a14      	ldr	r2, [pc, #80]	@ (80053b8 <TIM_OC5_SetConfig+0xd0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d109      	bne.n	800537e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005370:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	621a      	str	r2, [r3, #32]
}
 8005398:	bf00      	nop
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40013400 	.word	0x40013400
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40014400 	.word	0x40014400
 80053b4:	40014800 	.word	0x40014800
 80053b8:	40015000 	.word	0x40015000

080053bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	051b      	lsls	r3, r3, #20
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a1a      	ldr	r2, [pc, #104]	@ (800547c <TIM_OC6_SetConfig+0xc0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <TIM_OC6_SetConfig+0x84>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a19      	ldr	r2, [pc, #100]	@ (8005480 <TIM_OC6_SetConfig+0xc4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00f      	beq.n	8005440 <TIM_OC6_SetConfig+0x84>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a18      	ldr	r2, [pc, #96]	@ (8005484 <TIM_OC6_SetConfig+0xc8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00b      	beq.n	8005440 <TIM_OC6_SetConfig+0x84>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a17      	ldr	r2, [pc, #92]	@ (8005488 <TIM_OC6_SetConfig+0xcc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d007      	beq.n	8005440 <TIM_OC6_SetConfig+0x84>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a16      	ldr	r2, [pc, #88]	@ (800548c <TIM_OC6_SetConfig+0xd0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_OC6_SetConfig+0x84>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a15      	ldr	r2, [pc, #84]	@ (8005490 <TIM_OC6_SetConfig+0xd4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d109      	bne.n	8005454 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005446:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	029b      	lsls	r3, r3, #10
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40013400 	.word	0x40013400
 8005484:	40014000 	.word	0x40014000
 8005488:	40014400 	.word	0x40014400
 800548c:	40014800 	.word	0x40014800
 8005490:	40015000 	.word	0x40015000

08005494 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f023 0201 	bic.w	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a28      	ldr	r2, [pc, #160]	@ (8005560 <TIM_TI1_SetConfig+0xcc>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01b      	beq.n	80054fa <TIM_TI1_SetConfig+0x66>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c8:	d017      	beq.n	80054fa <TIM_TI1_SetConfig+0x66>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a25      	ldr	r2, [pc, #148]	@ (8005564 <TIM_TI1_SetConfig+0xd0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <TIM_TI1_SetConfig+0x66>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a24      	ldr	r2, [pc, #144]	@ (8005568 <TIM_TI1_SetConfig+0xd4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00f      	beq.n	80054fa <TIM_TI1_SetConfig+0x66>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4a23      	ldr	r2, [pc, #140]	@ (800556c <TIM_TI1_SetConfig+0xd8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00b      	beq.n	80054fa <TIM_TI1_SetConfig+0x66>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4a22      	ldr	r2, [pc, #136]	@ (8005570 <TIM_TI1_SetConfig+0xdc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d007      	beq.n	80054fa <TIM_TI1_SetConfig+0x66>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a21      	ldr	r2, [pc, #132]	@ (8005574 <TIM_TI1_SetConfig+0xe0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d003      	beq.n	80054fa <TIM_TI1_SetConfig+0x66>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4a20      	ldr	r2, [pc, #128]	@ (8005578 <TIM_TI1_SetConfig+0xe4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d101      	bne.n	80054fe <TIM_TI1_SetConfig+0x6a>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <TIM_TI1_SetConfig+0x6c>
 80054fe:	2300      	movs	r3, #0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	e003      	b.n	800551e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	b2db      	uxtb	r3, r3
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f023 030a 	bic.w	r3, r3, #10
 8005538:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f003 030a 	and.w	r3, r3, #10
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40000c00 	.word	0x40000c00
 8005570:	40013400 	.word	0x40013400
 8005574:	40014000 	.word	0x40014000
 8005578:	40015000 	.word	0x40015000

0800557c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	2201      	movs	r2, #1
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1a      	ldr	r2, [r3, #32]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	43db      	mvns	r3, r3
 800559e:	401a      	ands	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1a      	ldr	r2, [r3, #32]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 031f 	and.w	r3, r3, #31
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	fa01 f303 	lsl.w	r3, r1, r3
 80055b4:	431a      	orrs	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b08a      	sub	sp, #40	@ 0x28
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e0a0      	b.n	800571c <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fb fdd4 	bl	800119c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f7ff fb72 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2203      	movs	r2, #3
 800561a:	f7ff ff3b 	bl	8005494 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699a      	ldr	r2, [r3, #24]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 020c 	bic.w	r2, r2, #12
 800562c:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6999      	ldr	r1, [r3, #24]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800564e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800565e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005662:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005672:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005682:	f023 0307 	bic.w	r3, r3, #7
 8005686:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0204 	orr.w	r2, r2, #4
 8005696:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005698:	2300      	movs	r3, #0
 800569a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800569c:	2300      	movs	r3, #0
 800569e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80056a0:	2370      	movs	r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056a4:	2300      	movs	r3, #0
 80056a6:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f107 020c 	add.w	r2, r7, #12
 80056be:	4611      	mov	r1, r2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fc57 	bl	8004f74 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80056d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d8:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80056e8:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3728      	adds	r7, #40	@ 0x28
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d109      	bne.n	8005748 <HAL_TIMEx_PWMN_Start+0x24>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	bf14      	ite	ne
 8005740:	2301      	movne	r3, #1
 8005742:	2300      	moveq	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	e022      	b.n	800578e <HAL_TIMEx_PWMN_Start+0x6a>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b04      	cmp	r3, #4
 800574c:	d109      	bne.n	8005762 <HAL_TIMEx_PWMN_Start+0x3e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b01      	cmp	r3, #1
 8005758:	bf14      	ite	ne
 800575a:	2301      	movne	r3, #1
 800575c:	2300      	moveq	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	e015      	b.n	800578e <HAL_TIMEx_PWMN_Start+0x6a>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b08      	cmp	r3, #8
 8005766:	d109      	bne.n	800577c <HAL_TIMEx_PWMN_Start+0x58>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b01      	cmp	r3, #1
 8005772:	bf14      	ite	ne
 8005774:	2301      	movne	r3, #1
 8005776:	2300      	moveq	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	e008      	b.n	800578e <HAL_TIMEx_PWMN_Start+0x6a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	bf14      	ite	ne
 8005788:	2301      	movne	r3, #1
 800578a:	2300      	moveq	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e073      	b.n	800587e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d104      	bne.n	80057a6 <HAL_TIMEx_PWMN_Start+0x82>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057a4:	e013      	b.n	80057ce <HAL_TIMEx_PWMN_Start+0xaa>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d104      	bne.n	80057b6 <HAL_TIMEx_PWMN_Start+0x92>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057b4:	e00b      	b.n	80057ce <HAL_TIMEx_PWMN_Start+0xaa>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d104      	bne.n	80057c6 <HAL_TIMEx_PWMN_Start+0xa2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057c4:	e003      	b.n	80057ce <HAL_TIMEx_PWMN_Start+0xaa>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2204      	movs	r2, #4
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f9f4 	bl	8005bc4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a25      	ldr	r2, [pc, #148]	@ (8005888 <HAL_TIMEx_PWMN_Start+0x164>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d022      	beq.n	800583c <HAL_TIMEx_PWMN_Start+0x118>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fe:	d01d      	beq.n	800583c <HAL_TIMEx_PWMN_Start+0x118>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a21      	ldr	r2, [pc, #132]	@ (800588c <HAL_TIMEx_PWMN_Start+0x168>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d018      	beq.n	800583c <HAL_TIMEx_PWMN_Start+0x118>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a20      	ldr	r2, [pc, #128]	@ (8005890 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d013      	beq.n	800583c <HAL_TIMEx_PWMN_Start+0x118>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1e      	ldr	r2, [pc, #120]	@ (8005894 <HAL_TIMEx_PWMN_Start+0x170>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00e      	beq.n	800583c <HAL_TIMEx_PWMN_Start+0x118>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1d      	ldr	r2, [pc, #116]	@ (8005898 <HAL_TIMEx_PWMN_Start+0x174>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d009      	beq.n	800583c <HAL_TIMEx_PWMN_Start+0x118>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1b      	ldr	r2, [pc, #108]	@ (800589c <HAL_TIMEx_PWMN_Start+0x178>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <HAL_TIMEx_PWMN_Start+0x118>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1a      	ldr	r2, [pc, #104]	@ (80058a0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d115      	bne.n	8005868 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	4b18      	ldr	r3, [pc, #96]	@ (80058a4 <HAL_TIMEx_PWMN_Start+0x180>)
 8005844:	4013      	ands	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b06      	cmp	r3, #6
 800584c:	d015      	beq.n	800587a <HAL_TIMEx_PWMN_Start+0x156>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005854:	d011      	beq.n	800587a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0201 	orr.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005866:	e008      	b.n	800587a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	e000      	b.n	800587c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40012c00 	.word	0x40012c00
 800588c:	40000400 	.word	0x40000400
 8005890:	40000800 	.word	0x40000800
 8005894:	40000c00 	.word	0x40000c00
 8005898:	40013400 	.word	0x40013400
 800589c:	40014000 	.word	0x40014000
 80058a0:	40015000 	.word	0x40015000
 80058a4:	00010007 	.word	0x00010007

080058a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058bc:	2302      	movs	r3, #2
 80058be:	e074      	b.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a34      	ldr	r2, [pc, #208]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a33      	ldr	r2, [pc, #204]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a31      	ldr	r2, [pc, #196]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d108      	bne.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005904:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a21      	ldr	r2, [pc, #132]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d022      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005940:	d01d      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1f      	ldr	r2, [pc, #124]	@ (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d018      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1d      	ldr	r2, [pc, #116]	@ (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1c      	ldr	r2, [pc, #112]	@ (80059cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00e      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a15      	ldr	r2, [pc, #84]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d009      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a18      	ldr	r2, [pc, #96]	@ (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a11      	ldr	r2, [pc, #68]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d10c      	bne.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	4313      	orrs	r3, r2
 800598e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	40013400 	.word	0x40013400
 80059c0:	40015000 	.word	0x40015000
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40000c00 	.word	0x40000c00
 80059d0:	40014000 	.word	0x40014000

080059d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e096      	b.n	8005b1e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	041b      	lsls	r3, r3, #16
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8005b2c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d009      	beq.n	8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a2d      	ldr	r2, [pc, #180]	@ (8005b30 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d004      	beq.n	8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a2c      	ldr	r2, [pc, #176]	@ (8005b34 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d106      	bne.n	8005a96 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a24      	ldr	r2, [pc, #144]	@ (8005b2c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d009      	beq.n	8005ab4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a22      	ldr	r2, [pc, #136]	@ (8005b30 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d004      	beq.n	8005ab4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a21      	ldr	r2, [pc, #132]	@ (8005b34 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d12b      	bne.n	8005b0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abe:	051b      	lsls	r3, r3, #20
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a11      	ldr	r2, [pc, #68]	@ (8005b2c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d009      	beq.n	8005afe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a10      	ldr	r2, [pc, #64]	@ (8005b30 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a0e      	ldr	r2, [pc, #56]	@ (8005b34 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d106      	bne.n	8005b0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40012c00 	.word	0x40012c00
 8005b30:	40013400 	.word	0x40013400
 8005b34:	40015000 	.word	0x40015000

08005b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1a      	ldr	r2, [r3, #32]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	401a      	ands	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1a      	ldr	r2, [r3, #32]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e042      	b.n	8005ca6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fb fc14 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2224      	movs	r2, #36	@ 0x24
 8005c3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fc51 	bl	80064f8 <UART_SetConfig>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e022      	b.n	8005ca6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 ff41 	bl	8006af0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0201 	orr.w	r2, r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 ffc8 	bl	8006c34 <UART_CheckIdleState>
 8005ca4:	4603      	mov	r3, r0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b08a      	sub	sp, #40	@ 0x28
 8005cb2:	af02      	add	r7, sp, #8
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	603b      	str	r3, [r7, #0]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	f040 8083 	bne.w	8005dd0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <HAL_UART_Transmit+0x28>
 8005cd0:	88fb      	ldrh	r3, [r7, #6]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e07b      	b.n	8005dd2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_UART_Transmit+0x3a>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e074      	b.n	8005dd2 <HAL_UART_Transmit+0x124>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2221      	movs	r2, #33	@ 0x21
 8005cfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d00:	f7fb fe1a 	bl	8001938 <HAL_GetTick>
 8005d04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	88fa      	ldrh	r2, [r7, #6]
 8005d0a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	88fa      	ldrh	r2, [r7, #6]
 8005d12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d1e:	d108      	bne.n	8005d32 <HAL_UART_Transmit+0x84>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	61bb      	str	r3, [r7, #24]
 8005d30:	e003      	b.n	8005d3a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8005d42:	e02c      	b.n	8005d9e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2180      	movs	r1, #128	@ 0x80
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 ffbb 	bl	8006cca <UART_WaitOnFlagUntilTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e039      	b.n	8005dd2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10b      	bne.n	8005d7c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	3302      	adds	r3, #2
 8005d78:	61bb      	str	r3, [r7, #24]
 8005d7a:	e007      	b.n	8005d8c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	781a      	ldrb	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1cc      	bne.n	8005d44 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2200      	movs	r2, #0
 8005db2:	2140      	movs	r1, #64	@ 0x40
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 ff88 	bl	8006cca <UART_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e006      	b.n	8005dd2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e000      	b.n	8005dd2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005dd0:	2302      	movs	r3, #2
  }
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	@ 0x28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	4613      	mov	r3, r2
 8005de8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d142      	bne.n	8005e7a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_UART_Receive_IT+0x24>
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e03b      	b.n	8005e7c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Receive_IT+0x36>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e034      	b.n	8005e7c <HAL_UART_Receive_IT+0xa0>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a17      	ldr	r2, [pc, #92]	@ (8005e84 <HAL_UART_Receive_IT+0xa8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d01f      	beq.n	8005e6a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d018      	beq.n	8005e6a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	613b      	str	r3, [r7, #16]
   return(result);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e56:	623b      	str	r3, [r7, #32]
 8005e58:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	69f9      	ldr	r1, [r7, #28]
 8005e5c:	6a3a      	ldr	r2, [r7, #32]
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e6      	bne.n	8005e38 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 fff3 	bl	8006e5c <UART_Start_Receive_IT>
 8005e76:	4603      	mov	r3, r0
 8005e78:	e000      	b.n	8005e7c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005e7a:	2302      	movs	r3, #2
  }
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3728      	adds	r7, #40	@ 0x28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40008000 	.word	0x40008000

08005e88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b0ba      	sub	sp, #232	@ 0xe8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005eae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005eb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005ebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d11b      	bne.n	8005efc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d015      	beq.n	8005efc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d105      	bne.n	8005ee8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d009      	beq.n	8005efc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 82d6 	beq.w	800649e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	4798      	blx	r3
      }
      return;
 8005efa:	e2d0      	b.n	800649e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 811f 	beq.w	8006144 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005f0a:	4b8b      	ldr	r3, [pc, #556]	@ (8006138 <HAL_UART_IRQHandler+0x2b0>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005f16:	4b89      	ldr	r3, [pc, #548]	@ (800613c <HAL_UART_IRQHandler+0x2b4>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 8112 	beq.w	8006144 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d011      	beq.n	8005f50 <HAL_UART_IRQHandler+0xc8>
 8005f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f46:	f043 0201 	orr.w	r2, r3, #1
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d011      	beq.n	8005f80 <HAL_UART_IRQHandler+0xf8>
 8005f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00b      	beq.n	8005f80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f76:	f043 0204 	orr.w	r2, r3, #4
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d011      	beq.n	8005fb0 <HAL_UART_IRQHandler+0x128>
 8005f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fa6:	f043 0202 	orr.w	r2, r3, #2
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d017      	beq.n	8005fec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc0:	f003 0320 	and.w	r3, r3, #32
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d105      	bne.n	8005fd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005fc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8006138 <HAL_UART_IRQHandler+0x2b0>)
 8005fce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2208      	movs	r2, #8
 8005fda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fe2:	f043 0208 	orr.w	r2, r3, #8
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d012      	beq.n	800601e <HAL_UART_IRQHandler+0x196>
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ffc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00c      	beq.n	800601e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800600c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006014:	f043 0220 	orr.w	r2, r3, #32
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 823c 	beq.w	80064a2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800602a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	2b00      	cmp	r3, #0
 8006034:	d013      	beq.n	800605e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b00      	cmp	r3, #0
 8006040:	d105      	bne.n	800604e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006064:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006072:	2b40      	cmp	r3, #64	@ 0x40
 8006074:	d005      	beq.n	8006082 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800607a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800607e:	2b00      	cmp	r3, #0
 8006080:	d04f      	beq.n	8006122 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 f814 	bl	80070b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006092:	2b40      	cmp	r3, #64	@ 0x40
 8006094:	d141      	bne.n	800611a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3308      	adds	r3, #8
 800609c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3308      	adds	r3, #8
 80060be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80060c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80060c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1d9      	bne.n	8006096 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d013      	beq.n	8006112 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060ee:	4a14      	ldr	r2, [pc, #80]	@ (8006140 <HAL_UART_IRQHandler+0x2b8>)
 80060f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fc fe6d 	bl	8002dd6 <HAL_DMA_Abort_IT>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d017      	beq.n	8006132 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 800610c:	4610      	mov	r0, r2
 800610e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006110:	e00f      	b.n	8006132 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f9da 	bl	80064cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006118:	e00b      	b.n	8006132 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f9d6 	bl	80064cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006120:	e007      	b.n	8006132 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f9d2 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8006130:	e1b7      	b.n	80064a2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006132:	bf00      	nop
    return;
 8006134:	e1b5      	b.n	80064a2 <HAL_UART_IRQHandler+0x61a>
 8006136:	bf00      	nop
 8006138:	10000001 	.word	0x10000001
 800613c:	04000120 	.word	0x04000120
 8006140:	0800717d 	.word	0x0800717d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006148:	2b01      	cmp	r3, #1
 800614a:	f040 814a 	bne.w	80063e2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8143 	beq.w	80063e2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 813c 	beq.w	80063e2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2210      	movs	r2, #16
 8006170:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	f040 80b5 	bne.w	80062ec <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800618e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 8187 	beq.w	80064a6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800619e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061a2:	429a      	cmp	r2, r3
 80061a4:	f080 817f 	bcs.w	80064a6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f040 8086 	bne.w	80062d0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80061d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	461a      	mov	r2, r3
 80061ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1da      	bne.n	80061c4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3308      	adds	r3, #8
 8006214:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800621e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006220:	f023 0301 	bic.w	r3, r3, #1
 8006224:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3308      	adds	r3, #8
 800622e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006232:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006236:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800623a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e1      	bne.n	800620e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800625a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800625c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006260:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3308      	adds	r3, #8
 800626a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800626e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006270:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006274:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800627c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e3      	bne.n	800624a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800629e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062a0:	f023 0310 	bic.w	r3, r3, #16
 80062a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e4      	bne.n	8006290 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fc fd2a 	bl	8002d24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062dc:	b29b      	uxth	r3, r3
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f8fb 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062ea:	e0dc      	b.n	80064a6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80ce 	beq.w	80064aa <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800630e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 80c9 	beq.w	80064aa <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006328:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800632c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800633a:	647b      	str	r3, [r7, #68]	@ 0x44
 800633c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006340:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e4      	bne.n	8006318 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3308      	adds	r3, #8
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	623b      	str	r3, [r7, #32]
   return(result);
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006364:	f023 0301 	bic.w	r3, r3, #1
 8006368:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3308      	adds	r3, #8
 8006372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006376:	633a      	str	r2, [r7, #48]	@ 0x30
 8006378:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800637c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e1      	bne.n	800634e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0310 	bic.w	r3, r3, #16
 80063b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	69b9      	ldr	r1, [r7, #24]
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	617b      	str	r3, [r7, #20]
   return(result);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e4      	bne.n	800639e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063d8:	4619      	mov	r1, r3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f880 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063e0:	e063      	b.n	80064aa <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00e      	beq.n	800640c <HAL_UART_IRQHandler+0x584>
 80063ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d008      	beq.n	800640c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006402:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 fb57 	bl	8007ab8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800640a:	e051      	b.n	80064b0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006414:	2b00      	cmp	r3, #0
 8006416:	d014      	beq.n	8006442 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006420:	2b00      	cmp	r3, #0
 8006422:	d105      	bne.n	8006430 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006428:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006434:	2b00      	cmp	r3, #0
 8006436:	d03a      	beq.n	80064ae <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
    }
    return;
 8006440:	e035      	b.n	80064ae <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <HAL_UART_IRQHandler+0x5da>
 800644e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fea4 	bl	80071a8 <UART_EndTransmit_IT>
    return;
 8006460:	e026      	b.n	80064b0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <HAL_UART_IRQHandler+0x5fa>
 800646e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006472:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 fb30 	bl	8007ae0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006480:	e016      	b.n	80064b0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006486:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d010      	beq.n	80064b0 <HAL_UART_IRQHandler+0x628>
 800648e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006492:	2b00      	cmp	r3, #0
 8006494:	da0c      	bge.n	80064b0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f001 fb18 	bl	8007acc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800649c:	e008      	b.n	80064b0 <HAL_UART_IRQHandler+0x628>
      return;
 800649e:	bf00      	nop
 80064a0:	e006      	b.n	80064b0 <HAL_UART_IRQHandler+0x628>
    return;
 80064a2:	bf00      	nop
 80064a4:	e004      	b.n	80064b0 <HAL_UART_IRQHandler+0x628>
      return;
 80064a6:	bf00      	nop
 80064a8:	e002      	b.n	80064b0 <HAL_UART_IRQHandler+0x628>
      return;
 80064aa:	bf00      	nop
 80064ac:	e000      	b.n	80064b0 <HAL_UART_IRQHandler+0x628>
    return;
 80064ae:	bf00      	nop
  }
}
 80064b0:	37e8      	adds	r7, #232	@ 0xe8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop

080064b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064fc:	b08c      	sub	sp, #48	@ 0x30
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	431a      	orrs	r2, r3
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	431a      	orrs	r2, r3
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	4313      	orrs	r3, r2
 800651e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4baa      	ldr	r3, [pc, #680]	@ (80067d0 <UART_SetConfig+0x2d8>)
 8006528:	4013      	ands	r3, r2
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	6812      	ldr	r2, [r2, #0]
 800652e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006530:	430b      	orrs	r3, r1
 8006532:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a9f      	ldr	r2, [pc, #636]	@ (80067d4 <UART_SetConfig+0x2dc>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d004      	beq.n	8006564 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006560:	4313      	orrs	r3, r2
 8006562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800656e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006578:	430b      	orrs	r3, r1
 800657a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006582:	f023 010f 	bic.w	r1, r3, #15
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a90      	ldr	r2, [pc, #576]	@ (80067d8 <UART_SetConfig+0x2e0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d125      	bne.n	80065e8 <UART_SetConfig+0xf0>
 800659c:	4b8f      	ldr	r3, [pc, #572]	@ (80067dc <UART_SetConfig+0x2e4>)
 800659e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d81a      	bhi.n	80065e0 <UART_SetConfig+0xe8>
 80065aa:	a201      	add	r2, pc, #4	@ (adr r2, 80065b0 <UART_SetConfig+0xb8>)
 80065ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b0:	080065c1 	.word	0x080065c1
 80065b4:	080065d1 	.word	0x080065d1
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	080065d9 	.word	0x080065d9
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065c6:	e116      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80065c8:	2302      	movs	r3, #2
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ce:	e112      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80065d0:	2304      	movs	r3, #4
 80065d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065d6:	e10e      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80065d8:	2308      	movs	r3, #8
 80065da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065de:	e10a      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80065e0:	2310      	movs	r3, #16
 80065e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065e6:	e106      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a7c      	ldr	r2, [pc, #496]	@ (80067e0 <UART_SetConfig+0x2e8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d138      	bne.n	8006664 <UART_SetConfig+0x16c>
 80065f2:	4b7a      	ldr	r3, [pc, #488]	@ (80067dc <UART_SetConfig+0x2e4>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f8:	f003 030c 	and.w	r3, r3, #12
 80065fc:	2b0c      	cmp	r3, #12
 80065fe:	d82d      	bhi.n	800665c <UART_SetConfig+0x164>
 8006600:	a201      	add	r2, pc, #4	@ (adr r2, 8006608 <UART_SetConfig+0x110>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	0800663d 	.word	0x0800663d
 800660c:	0800665d 	.word	0x0800665d
 8006610:	0800665d 	.word	0x0800665d
 8006614:	0800665d 	.word	0x0800665d
 8006618:	0800664d 	.word	0x0800664d
 800661c:	0800665d 	.word	0x0800665d
 8006620:	0800665d 	.word	0x0800665d
 8006624:	0800665d 	.word	0x0800665d
 8006628:	08006645 	.word	0x08006645
 800662c:	0800665d 	.word	0x0800665d
 8006630:	0800665d 	.word	0x0800665d
 8006634:	0800665d 	.word	0x0800665d
 8006638:	08006655 	.word	0x08006655
 800663c:	2300      	movs	r3, #0
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006642:	e0d8      	b.n	80067f6 <UART_SetConfig+0x2fe>
 8006644:	2302      	movs	r3, #2
 8006646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800664a:	e0d4      	b.n	80067f6 <UART_SetConfig+0x2fe>
 800664c:	2304      	movs	r3, #4
 800664e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006652:	e0d0      	b.n	80067f6 <UART_SetConfig+0x2fe>
 8006654:	2308      	movs	r3, #8
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800665a:	e0cc      	b.n	80067f6 <UART_SetConfig+0x2fe>
 800665c:	2310      	movs	r3, #16
 800665e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006662:	e0c8      	b.n	80067f6 <UART_SetConfig+0x2fe>
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a5e      	ldr	r2, [pc, #376]	@ (80067e4 <UART_SetConfig+0x2ec>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d125      	bne.n	80066ba <UART_SetConfig+0x1c2>
 800666e:	4b5b      	ldr	r3, [pc, #364]	@ (80067dc <UART_SetConfig+0x2e4>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006674:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006678:	2b30      	cmp	r3, #48	@ 0x30
 800667a:	d016      	beq.n	80066aa <UART_SetConfig+0x1b2>
 800667c:	2b30      	cmp	r3, #48	@ 0x30
 800667e:	d818      	bhi.n	80066b2 <UART_SetConfig+0x1ba>
 8006680:	2b20      	cmp	r3, #32
 8006682:	d00a      	beq.n	800669a <UART_SetConfig+0x1a2>
 8006684:	2b20      	cmp	r3, #32
 8006686:	d814      	bhi.n	80066b2 <UART_SetConfig+0x1ba>
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <UART_SetConfig+0x19a>
 800668c:	2b10      	cmp	r3, #16
 800668e:	d008      	beq.n	80066a2 <UART_SetConfig+0x1aa>
 8006690:	e00f      	b.n	80066b2 <UART_SetConfig+0x1ba>
 8006692:	2300      	movs	r3, #0
 8006694:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006698:	e0ad      	b.n	80067f6 <UART_SetConfig+0x2fe>
 800669a:	2302      	movs	r3, #2
 800669c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a0:	e0a9      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80066a2:	2304      	movs	r3, #4
 80066a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066a8:	e0a5      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80066aa:	2308      	movs	r3, #8
 80066ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b0:	e0a1      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80066b2:	2310      	movs	r3, #16
 80066b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066b8:	e09d      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a4a      	ldr	r2, [pc, #296]	@ (80067e8 <UART_SetConfig+0x2f0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d125      	bne.n	8006710 <UART_SetConfig+0x218>
 80066c4:	4b45      	ldr	r3, [pc, #276]	@ (80067dc <UART_SetConfig+0x2e4>)
 80066c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80066d0:	d016      	beq.n	8006700 <UART_SetConfig+0x208>
 80066d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80066d4:	d818      	bhi.n	8006708 <UART_SetConfig+0x210>
 80066d6:	2b80      	cmp	r3, #128	@ 0x80
 80066d8:	d00a      	beq.n	80066f0 <UART_SetConfig+0x1f8>
 80066da:	2b80      	cmp	r3, #128	@ 0x80
 80066dc:	d814      	bhi.n	8006708 <UART_SetConfig+0x210>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <UART_SetConfig+0x1f0>
 80066e2:	2b40      	cmp	r3, #64	@ 0x40
 80066e4:	d008      	beq.n	80066f8 <UART_SetConfig+0x200>
 80066e6:	e00f      	b.n	8006708 <UART_SetConfig+0x210>
 80066e8:	2300      	movs	r3, #0
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ee:	e082      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80066f0:	2302      	movs	r3, #2
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066f6:	e07e      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80066f8:	2304      	movs	r3, #4
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066fe:	e07a      	b.n	80067f6 <UART_SetConfig+0x2fe>
 8006700:	2308      	movs	r3, #8
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006706:	e076      	b.n	80067f6 <UART_SetConfig+0x2fe>
 8006708:	2310      	movs	r3, #16
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800670e:	e072      	b.n	80067f6 <UART_SetConfig+0x2fe>
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a35      	ldr	r2, [pc, #212]	@ (80067ec <UART_SetConfig+0x2f4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d12a      	bne.n	8006770 <UART_SetConfig+0x278>
 800671a:	4b30      	ldr	r3, [pc, #192]	@ (80067dc <UART_SetConfig+0x2e4>)
 800671c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006724:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006728:	d01a      	beq.n	8006760 <UART_SetConfig+0x268>
 800672a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800672e:	d81b      	bhi.n	8006768 <UART_SetConfig+0x270>
 8006730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006734:	d00c      	beq.n	8006750 <UART_SetConfig+0x258>
 8006736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800673a:	d815      	bhi.n	8006768 <UART_SetConfig+0x270>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <UART_SetConfig+0x250>
 8006740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006744:	d008      	beq.n	8006758 <UART_SetConfig+0x260>
 8006746:	e00f      	b.n	8006768 <UART_SetConfig+0x270>
 8006748:	2300      	movs	r3, #0
 800674a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800674e:	e052      	b.n	80067f6 <UART_SetConfig+0x2fe>
 8006750:	2302      	movs	r3, #2
 8006752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006756:	e04e      	b.n	80067f6 <UART_SetConfig+0x2fe>
 8006758:	2304      	movs	r3, #4
 800675a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800675e:	e04a      	b.n	80067f6 <UART_SetConfig+0x2fe>
 8006760:	2308      	movs	r3, #8
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006766:	e046      	b.n	80067f6 <UART_SetConfig+0x2fe>
 8006768:	2310      	movs	r3, #16
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800676e:	e042      	b.n	80067f6 <UART_SetConfig+0x2fe>
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a17      	ldr	r2, [pc, #92]	@ (80067d4 <UART_SetConfig+0x2dc>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d13a      	bne.n	80067f0 <UART_SetConfig+0x2f8>
 800677a:	4b18      	ldr	r3, [pc, #96]	@ (80067dc <UART_SetConfig+0x2e4>)
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006780:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006784:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006788:	d01a      	beq.n	80067c0 <UART_SetConfig+0x2c8>
 800678a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800678e:	d81b      	bhi.n	80067c8 <UART_SetConfig+0x2d0>
 8006790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006794:	d00c      	beq.n	80067b0 <UART_SetConfig+0x2b8>
 8006796:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800679a:	d815      	bhi.n	80067c8 <UART_SetConfig+0x2d0>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <UART_SetConfig+0x2b0>
 80067a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a4:	d008      	beq.n	80067b8 <UART_SetConfig+0x2c0>
 80067a6:	e00f      	b.n	80067c8 <UART_SetConfig+0x2d0>
 80067a8:	2300      	movs	r3, #0
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ae:	e022      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80067b0:	2302      	movs	r3, #2
 80067b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b6:	e01e      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80067b8:	2304      	movs	r3, #4
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067be:	e01a      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80067c0:	2308      	movs	r3, #8
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c6:	e016      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80067c8:	2310      	movs	r3, #16
 80067ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ce:	e012      	b.n	80067f6 <UART_SetConfig+0x2fe>
 80067d0:	cfff69f3 	.word	0xcfff69f3
 80067d4:	40008000 	.word	0x40008000
 80067d8:	40013800 	.word	0x40013800
 80067dc:	40021000 	.word	0x40021000
 80067e0:	40004400 	.word	0x40004400
 80067e4:	40004800 	.word	0x40004800
 80067e8:	40004c00 	.word	0x40004c00
 80067ec:	40005000 	.word	0x40005000
 80067f0:	2310      	movs	r3, #16
 80067f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4aae      	ldr	r2, [pc, #696]	@ (8006ab4 <UART_SetConfig+0x5bc>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	f040 8097 	bne.w	8006930 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006802:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006806:	2b08      	cmp	r3, #8
 8006808:	d823      	bhi.n	8006852 <UART_SetConfig+0x35a>
 800680a:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <UART_SetConfig+0x318>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006835 	.word	0x08006835
 8006814:	08006853 	.word	0x08006853
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006853 	.word	0x08006853
 8006820:	08006843 	.word	0x08006843
 8006824:	08006853 	.word	0x08006853
 8006828:	08006853 	.word	0x08006853
 800682c:	08006853 	.word	0x08006853
 8006830:	0800684b 	.word	0x0800684b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006834:	f7fd fa6a 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8006838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800683a:	e010      	b.n	800685e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800683c:	4b9e      	ldr	r3, [pc, #632]	@ (8006ab8 <UART_SetConfig+0x5c0>)
 800683e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006840:	e00d      	b.n	800685e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006842:	f7fd f9f5 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8006846:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006848:	e009      	b.n	800685e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800684e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006850:	e005      	b.n	800685e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800685c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8130 	beq.w	8006ac6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686a:	4a94      	ldr	r2, [pc, #592]	@ (8006abc <UART_SetConfig+0x5c4>)
 800686c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006870:	461a      	mov	r2, r3
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	fbb3 f3f2 	udiv	r3, r3, r2
 8006878:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	4613      	mov	r3, r2
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	4413      	add	r3, r2
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	429a      	cmp	r2, r3
 8006888:	d305      	bcc.n	8006896 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	429a      	cmp	r2, r3
 8006894:	d903      	bls.n	800689e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800689c:	e113      	b.n	8006ac6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	2200      	movs	r2, #0
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	60fa      	str	r2, [r7, #12]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068aa:	4a84      	ldr	r2, [pc, #528]	@ (8006abc <UART_SetConfig+0x5c4>)
 80068ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2200      	movs	r2, #0
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068c0:	f7f9 fd16 	bl	80002f0 <__aeabi_uldivmod>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4610      	mov	r0, r2
 80068ca:	4619      	mov	r1, r3
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	020b      	lsls	r3, r1, #8
 80068d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068da:	0202      	lsls	r2, r0, #8
 80068dc:	6979      	ldr	r1, [r7, #20]
 80068de:	6849      	ldr	r1, [r1, #4]
 80068e0:	0849      	lsrs	r1, r1, #1
 80068e2:	2000      	movs	r0, #0
 80068e4:	460c      	mov	r4, r1
 80068e6:	4605      	mov	r5, r0
 80068e8:	eb12 0804 	adds.w	r8, r2, r4
 80068ec:	eb43 0905 	adc.w	r9, r3, r5
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	469a      	mov	sl, r3
 80068f8:	4693      	mov	fp, r2
 80068fa:	4652      	mov	r2, sl
 80068fc:	465b      	mov	r3, fp
 80068fe:	4640      	mov	r0, r8
 8006900:	4649      	mov	r1, r9
 8006902:	f7f9 fcf5 	bl	80002f0 <__aeabi_uldivmod>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4613      	mov	r3, r2
 800690c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006914:	d308      	bcc.n	8006928 <UART_SetConfig+0x430>
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800691c:	d204      	bcs.n	8006928 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6a3a      	ldr	r2, [r7, #32]
 8006924:	60da      	str	r2, [r3, #12]
 8006926:	e0ce      	b.n	8006ac6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800692e:	e0ca      	b.n	8006ac6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006938:	d166      	bne.n	8006a08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800693a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800693e:	2b08      	cmp	r3, #8
 8006940:	d827      	bhi.n	8006992 <UART_SetConfig+0x49a>
 8006942:	a201      	add	r2, pc, #4	@ (adr r2, 8006948 <UART_SetConfig+0x450>)
 8006944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006948:	0800696d 	.word	0x0800696d
 800694c:	08006975 	.word	0x08006975
 8006950:	0800697d 	.word	0x0800697d
 8006954:	08006993 	.word	0x08006993
 8006958:	08006983 	.word	0x08006983
 800695c:	08006993 	.word	0x08006993
 8006960:	08006993 	.word	0x08006993
 8006964:	08006993 	.word	0x08006993
 8006968:	0800698b 	.word	0x0800698b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800696c:	f7fd f9ce 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8006970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006972:	e014      	b.n	800699e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006974:	f7fd f9e0 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8006978:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800697a:	e010      	b.n	800699e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800697c:	4b4e      	ldr	r3, [pc, #312]	@ (8006ab8 <UART_SetConfig+0x5c0>)
 800697e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006980:	e00d      	b.n	800699e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006982:	f7fd f955 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8006986:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006988:	e009      	b.n	800699e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800698e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006990:	e005      	b.n	800699e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800699c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800699e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8090 	beq.w	8006ac6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	4a44      	ldr	r2, [pc, #272]	@ (8006abc <UART_SetConfig+0x5c4>)
 80069ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069b8:	005a      	lsls	r2, r3, #1
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	441a      	add	r2, r3
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	2b0f      	cmp	r3, #15
 80069d0:	d916      	bls.n	8006a00 <UART_SetConfig+0x508>
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069d8:	d212      	bcs.n	8006a00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	f023 030f 	bic.w	r3, r3, #15
 80069e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	085b      	lsrs	r3, r3, #1
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	8bfb      	ldrh	r3, [r7, #30]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	8bfa      	ldrh	r2, [r7, #30]
 80069fc:	60da      	str	r2, [r3, #12]
 80069fe:	e062      	b.n	8006ac6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a06:	e05e      	b.n	8006ac6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d828      	bhi.n	8006a62 <UART_SetConfig+0x56a>
 8006a10:	a201      	add	r2, pc, #4	@ (adr r2, 8006a18 <UART_SetConfig+0x520>)
 8006a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a16:	bf00      	nop
 8006a18:	08006a3d 	.word	0x08006a3d
 8006a1c:	08006a45 	.word	0x08006a45
 8006a20:	08006a4d 	.word	0x08006a4d
 8006a24:	08006a63 	.word	0x08006a63
 8006a28:	08006a53 	.word	0x08006a53
 8006a2c:	08006a63 	.word	0x08006a63
 8006a30:	08006a63 	.word	0x08006a63
 8006a34:	08006a63 	.word	0x08006a63
 8006a38:	08006a5b 	.word	0x08006a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a3c:	f7fd f966 	bl	8003d0c <HAL_RCC_GetPCLK1Freq>
 8006a40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a42:	e014      	b.n	8006a6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a44:	f7fd f978 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8006a48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a4a:	e010      	b.n	8006a6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab8 <UART_SetConfig+0x5c0>)
 8006a4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a50:	e00d      	b.n	8006a6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a52:	f7fd f8ed 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8006a56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a58:	e009      	b.n	8006a6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a60:	e005      	b.n	8006a6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a6c:	bf00      	nop
    }

    if (pclk != 0U)
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d028      	beq.n	8006ac6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a78:	4a10      	ldr	r2, [pc, #64]	@ (8006abc <UART_SetConfig+0x5c4>)
 8006a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	441a      	add	r2, r3
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	2b0f      	cmp	r3, #15
 8006a9c:	d910      	bls.n	8006ac0 <UART_SetConfig+0x5c8>
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aa4:	d20c      	bcs.n	8006ac0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60da      	str	r2, [r3, #12]
 8006ab0:	e009      	b.n	8006ac6 <UART_SetConfig+0x5ce>
 8006ab2:	bf00      	nop
 8006ab4:	40008000 	.word	0x40008000
 8006ab8:	00f42400 	.word	0x00f42400
 8006abc:	08009284 	.word	0x08009284
      }
      else
      {
        ret = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8006ae2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3730      	adds	r7, #48	@ 0x30
 8006aea:	46bd      	mov	sp, r7
 8006aec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b84:	f003 0310 	and.w	r3, r3, #16
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01a      	beq.n	8006c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bee:	d10a      	bne.n	8006c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	605a      	str	r2, [r3, #4]
  }
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c44:	f7fa fe78 	bl	8001938 <HAL_GetTick>
 8006c48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d10e      	bne.n	8006c76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f82f 	bl	8006cca <UART_WaitOnFlagUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e025      	b.n	8006cc2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d10e      	bne.n	8006ca2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f819 	bl	8006cca <UART_WaitOnFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e00f      	b.n	8006cc2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b09c      	sub	sp, #112	@ 0x70
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	603b      	str	r3, [r7, #0]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cda:	e0a9      	b.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce2:	f000 80a5 	beq.w	8006e30 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce6:	f7fa fe27 	bl	8001938 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d302      	bcc.n	8006cfc <UART_WaitOnFlagUntilTimeout+0x32>
 8006cf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d140      	bne.n	8006d7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d0c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006d10:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d1c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006d20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e6      	bne.n	8006cfc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3308      	adds	r3, #8
 8006d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d4e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006d50:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e5      	bne.n	8006d2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e069      	b.n	8006e52 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d051      	beq.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d9a:	d149      	bne.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006da4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dc6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006dca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e6      	bne.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	613b      	str	r3, [r7, #16]
   return(result);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f023 0301 	bic.w	r3, r3, #1
 8006dee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006df8:	623a      	str	r2, [r7, #32]
 8006dfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	69f9      	ldr	r1, [r7, #28]
 8006dfe:	6a3a      	ldr	r2, [r7, #32]
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e5      	bne.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e010      	b.n	8006e52 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69da      	ldr	r2, [r3, #28]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	bf0c      	ite	eq
 8006e40:	2301      	moveq	r3, #1
 8006e42:	2300      	movne	r3, #0
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	461a      	mov	r2, r3
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	f43f af46 	beq.w	8006cdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3770      	adds	r7, #112	@ 0x70
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b0a3      	sub	sp, #140	@ 0x8c
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	4613      	mov	r3, r2
 8006e68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	88fa      	ldrh	r2, [r7, #6]
 8006e74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	88fa      	ldrh	r2, [r7, #6]
 8006e7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e8e:	d10e      	bne.n	8006eae <UART_Start_Receive_IT+0x52>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d105      	bne.n	8006ea4 <UART_Start_Receive_IT+0x48>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006e9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ea2:	e02d      	b.n	8006f00 <UART_Start_Receive_IT+0xa4>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	22ff      	movs	r2, #255	@ 0xff
 8006ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006eac:	e028      	b.n	8006f00 <UART_Start_Receive_IT+0xa4>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10d      	bne.n	8006ed2 <UART_Start_Receive_IT+0x76>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d104      	bne.n	8006ec8 <UART_Start_Receive_IT+0x6c>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	22ff      	movs	r2, #255	@ 0xff
 8006ec2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ec6:	e01b      	b.n	8006f00 <UART_Start_Receive_IT+0xa4>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	227f      	movs	r2, #127	@ 0x7f
 8006ecc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ed0:	e016      	b.n	8006f00 <UART_Start_Receive_IT+0xa4>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eda:	d10d      	bne.n	8006ef8 <UART_Start_Receive_IT+0x9c>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <UART_Start_Receive_IT+0x92>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	227f      	movs	r2, #127	@ 0x7f
 8006ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006eec:	e008      	b.n	8006f00 <UART_Start_Receive_IT+0xa4>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	223f      	movs	r2, #63	@ 0x3f
 8006ef2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ef6:	e003      	b.n	8006f00 <UART_Start_Receive_IT+0xa4>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2222      	movs	r2, #34	@ 0x22
 8006f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006f20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f22:	f043 0301 	orr.w	r3, r3, #1
 8006f26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006f34:	673a      	str	r2, [r7, #112]	@ 0x70
 8006f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006f3a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006f42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e3      	bne.n	8006f10 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f50:	d153      	bne.n	8006ffa <UART_Start_Receive_IT+0x19e>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f58:	88fa      	ldrh	r2, [r7, #6]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d34d      	bcc.n	8006ffa <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f66:	d107      	bne.n	8006f78 <UART_Start_Receive_IT+0x11c>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d103      	bne.n	8006f78 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a4b      	ldr	r2, [pc, #300]	@ (80070a0 <UART_Start_Receive_IT+0x244>)
 8006f74:	671a      	str	r2, [r3, #112]	@ 0x70
 8006f76:	e002      	b.n	8006f7e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4a4a      	ldr	r2, [pc, #296]	@ (80070a4 <UART_Start_Receive_IT+0x248>)
 8006f7c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d01a      	beq.n	8006fc4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fb2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006fb6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e4      	bne.n	8006f8e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3308      	adds	r3, #8
 8006fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fce:	e853 3f00 	ldrex	r3, [r3]
 8006fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006fe4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006fe6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e5      	bne.n	8006fc4 <UART_Start_Receive_IT+0x168>
 8006ff8:	e04a      	b.n	8007090 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007002:	d107      	bne.n	8007014 <UART_Start_Receive_IT+0x1b8>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d103      	bne.n	8007014 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4a26      	ldr	r2, [pc, #152]	@ (80070a8 <UART_Start_Receive_IT+0x24c>)
 8007010:	671a      	str	r2, [r3, #112]	@ 0x70
 8007012:	e002      	b.n	800701a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4a25      	ldr	r2, [pc, #148]	@ (80070ac <UART_Start_Receive_IT+0x250>)
 8007018:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d019      	beq.n	800705e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800703e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007048:	637b      	str	r3, [r7, #52]	@ 0x34
 800704a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800704e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e6      	bne.n	800702a <UART_Start_Receive_IT+0x1ce>
 800705c:	e018      	b.n	8007090 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	613b      	str	r3, [r7, #16]
   return(result);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f043 0320 	orr.w	r3, r3, #32
 8007072:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800707c:	623b      	str	r3, [r7, #32]
 800707e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	69f9      	ldr	r1, [r7, #28]
 8007082:	6a3a      	ldr	r2, [r7, #32]
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	61bb      	str	r3, [r7, #24]
   return(result);
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e6      	bne.n	800705e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	378c      	adds	r7, #140	@ 0x8c
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	080077b9 	.word	0x080077b9
 80070a4:	080074c1 	.word	0x080074c1
 80070a8:	0800735f 	.word	0x0800735f
 80070ac:	080071ff 	.word	0x080071ff

080070b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b095      	sub	sp, #84	@ 0x54
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80070d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e6      	bne.n	80070b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3308      	adds	r3, #8
 80070f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3308      	adds	r3, #8
 800710c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800710e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007110:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e3      	bne.n	80070ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007126:	2b01      	cmp	r3, #1
 8007128:	d118      	bne.n	800715c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	e853 3f00 	ldrex	r3, [r3]
 8007136:	60bb      	str	r3, [r7, #8]
   return(result);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f023 0310 	bic.w	r3, r3, #16
 800713e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	461a      	mov	r2, r3
 8007146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6979      	ldr	r1, [r7, #20]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	e841 2300 	strex	r3, r2, [r1]
 8007154:	613b      	str	r3, [r7, #16]
   return(result);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e6      	bne.n	800712a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8007170:	bf00      	nop
 8007172:	3754      	adds	r7, #84	@ 0x54
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007188:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7ff f996 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071a0:	bf00      	nop
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071c4:	61fb      	str	r3, [r7, #28]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6979      	ldr	r1, [r7, #20]
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	613b      	str	r3, [r7, #16]
   return(result);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e6      	bne.n	80071b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff f961 	bl	80064b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071f6:	bf00      	nop
 80071f8:	3720      	adds	r7, #32
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b096      	sub	sp, #88	@ 0x58
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800720c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007216:	2b22      	cmp	r3, #34	@ 0x22
 8007218:	f040 8095 	bne.w	8007346 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007222:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007226:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800722a:	b2d9      	uxtb	r1, r3
 800722c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007230:	b2da      	uxtb	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007236:	400a      	ands	r2, r1
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b29a      	uxth	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800725e:	b29b      	uxth	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	d178      	bne.n	8007356 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007278:	653b      	str	r3, [r7, #80]	@ 0x50
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007282:	647b      	str	r3, [r7, #68]	@ 0x44
 8007284:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007288:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e6      	bne.n	8007264 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3308      	adds	r3, #8
 800729c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	623b      	str	r3, [r7, #32]
   return(result);
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	f023 0301 	bic.w	r3, r3, #1
 80072ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3308      	adds	r3, #8
 80072b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80072b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e5      	bne.n	8007296 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d12e      	bne.n	800733e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0310 	bic.w	r3, r3, #16
 80072fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007304:	61fb      	str	r3, [r7, #28]
 8007306:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	69b9      	ldr	r1, [r7, #24]
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	617b      	str	r3, [r7, #20]
   return(result);
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e6      	bne.n	80072e6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f003 0310 	and.w	r3, r3, #16
 8007322:	2b10      	cmp	r3, #16
 8007324:	d103      	bne.n	800732e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2210      	movs	r2, #16
 800732c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7ff f8d2 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800733c:	e00b      	b.n	8007356 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fa fa88 	bl	8001854 <HAL_UART_RxCpltCallback>
}
 8007344:	e007      	b.n	8007356 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	699a      	ldr	r2, [r3, #24]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0208 	orr.w	r2, r2, #8
 8007354:	619a      	str	r2, [r3, #24]
}
 8007356:	bf00      	nop
 8007358:	3758      	adds	r7, #88	@ 0x58
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b096      	sub	sp, #88	@ 0x58
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800736c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007376:	2b22      	cmp	r3, #34	@ 0x22
 8007378:	f040 8095 	bne.w	80074a6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007382:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800738a:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800738c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007390:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007394:	4013      	ands	r3, r2
 8007396:	b29a      	uxth	r2, r3
 8007398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800739a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a0:	1c9a      	adds	r2, r3, #2
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d178      	bne.n	80074b6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80073e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e6      	bne.n	80073c4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3308      	adds	r3, #8
 80073fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	61fb      	str	r3, [r7, #28]
   return(result);
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007416:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007418:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800741c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e5      	bne.n	80073f6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800743c:	2b01      	cmp	r3, #1
 800743e:	d12e      	bne.n	800749e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	60bb      	str	r3, [r7, #8]
   return(result);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f023 0310 	bic.w	r3, r3, #16
 800745a:	647b      	str	r3, [r7, #68]	@ 0x44
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	461a      	mov	r2, r3
 8007462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007464:	61bb      	str	r3, [r7, #24]
 8007466:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6979      	ldr	r1, [r7, #20]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	613b      	str	r3, [r7, #16]
   return(result);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e6      	bne.n	8007446 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	2b10      	cmp	r3, #16
 8007484:	d103      	bne.n	800748e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2210      	movs	r2, #16
 800748c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff f822 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800749c:	e00b      	b.n	80074b6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fa f9d8 	bl	8001854 <HAL_UART_RxCpltCallback>
}
 80074a4:	e007      	b.n	80074b6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	699a      	ldr	r2, [r3, #24]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f042 0208 	orr.w	r2, r2, #8
 80074b4:	619a      	str	r2, [r3, #24]
}
 80074b6:	bf00      	nop
 80074b8:	3758      	adds	r7, #88	@ 0x58
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
	...

080074c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b0a6      	sub	sp, #152	@ 0x98
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80074ce:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f6:	2b22      	cmp	r3, #34	@ 0x22
 80074f8:	f040 814f 	bne.w	800779a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007502:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007506:	e0f6      	b.n	80076f6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007512:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8007516:	b2d9      	uxtb	r1, r3
 8007518:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800751c:	b2da      	uxtb	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007522:	400a      	ands	r2, r1
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007538:	b29b      	uxth	r3, r3
 800753a:	3b01      	subs	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800754e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	2b00      	cmp	r3, #0
 8007558:	d053      	beq.n	8007602 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800755a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d011      	beq.n	800758a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007566:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800756a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00b      	beq.n	800758a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2201      	movs	r2, #1
 8007578:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007580:	f043 0201 	orr.w	r2, r3, #1
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800758a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d011      	beq.n	80075ba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007596:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2202      	movs	r2, #2
 80075a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075b0:	f043 0204 	orr.w	r2, r3, #4
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d011      	beq.n	80075ea <UART_RxISR_8BIT_FIFOEN+0x12a>
 80075c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00b      	beq.n	80075ea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2204      	movs	r2, #4
 80075d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075e0:	f043 0202 	orr.w	r2, r3, #2
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d006      	beq.n	8007602 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7fe ff69 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007608:	b29b      	uxth	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d173      	bne.n	80076f6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800761c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800761e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007622:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007632:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007636:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800763e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e4      	bne.n	800760e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3308      	adds	r3, #8
 800764a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800765a:	f023 0301 	bic.w	r3, r3, #1
 800765e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3308      	adds	r3, #8
 8007666:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007668:	657a      	str	r2, [r7, #84]	@ 0x54
 800766a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800766e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e3      	bne.n	8007644 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2220      	movs	r2, #32
 8007680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800768e:	2b01      	cmp	r3, #1
 8007690:	d12e      	bne.n	80076f0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a8:	f023 0310 	bic.w	r3, r3, #16
 80076ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80076b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e6      	bne.n	8007698 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f003 0310 	and.w	r3, r3, #16
 80076d4:	2b10      	cmp	r3, #16
 80076d6:	d103      	bne.n	80076e0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2210      	movs	r2, #16
 80076de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7fe fef9 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
 80076ee:	e002      	b.n	80076f6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7fa f8af 	bl	8001854 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d006      	beq.n	800770c <UART_RxISR_8BIT_FIFOEN+0x24c>
 80076fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b00      	cmp	r3, #0
 8007708:	f47f aefe 	bne.w	8007508 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007712:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007716:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800771a:	2b00      	cmp	r3, #0
 800771c:	d045      	beq.n	80077aa <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007724:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007728:	429a      	cmp	r2, r3
 800772a:	d23e      	bcs.n	80077aa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3308      	adds	r3, #8
 8007732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	61fb      	str	r3, [r7, #28]
   return(result);
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007742:	673b      	str	r3, [r7, #112]	@ 0x70
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3308      	adds	r3, #8
 800774a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800774c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800774e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e5      	bne.n	800772c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a14      	ldr	r2, [pc, #80]	@ (80077b4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007764:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	60bb      	str	r3, [r7, #8]
   return(result);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f043 0320 	orr.w	r3, r3, #32
 800777a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6979      	ldr	r1, [r7, #20]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	613b      	str	r3, [r7, #16]
   return(result);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e6      	bne.n	8007766 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007798:	e007      	b.n	80077aa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	699a      	ldr	r2, [r3, #24]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0208 	orr.w	r2, r2, #8
 80077a8:	619a      	str	r2, [r3, #24]
}
 80077aa:	bf00      	nop
 80077ac:	3798      	adds	r7, #152	@ 0x98
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	080071ff 	.word	0x080071ff

080077b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b0a8      	sub	sp, #160	@ 0xa0
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80077c6:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ee:	2b22      	cmp	r3, #34	@ 0x22
 80077f0:	f040 8153 	bne.w	8007a9a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077fa:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077fe:	e0fa      	b.n	80079f6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007806:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800780e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007812:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8007816:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800781a:	4013      	ands	r3, r2
 800781c:	b29a      	uxth	r2, r3
 800781e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007822:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007828:	1c9a      	adds	r2, r3, #2
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007834:	b29b      	uxth	r3, r3
 8007836:	3b01      	subs	r3, #1
 8007838:	b29a      	uxth	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800784a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	2b00      	cmp	r3, #0
 8007854:	d053      	beq.n	80078fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007856:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d011      	beq.n	8007886 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007862:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00b      	beq.n	8007886 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2201      	movs	r2, #1
 8007874:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800787c:	f043 0201 	orr.w	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007886:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d011      	beq.n	80078b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007892:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00b      	beq.n	80078b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2202      	movs	r2, #2
 80078a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ac:	f043 0204 	orr.w	r2, r3, #4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d011      	beq.n	80078e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80078c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00b      	beq.n	80078e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2204      	movs	r2, #4
 80078d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078dc:	f043 0202 	orr.w	r2, r3, #2
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d006      	beq.n	80078fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7fe fdeb 	bl	80064cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d175      	bne.n	80079f6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007918:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800791a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800791e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800792c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800792e:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007932:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800793a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e4      	bne.n	800790a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3308      	adds	r3, #8
 8007946:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007956:	f023 0301 	bic.w	r3, r3, #1
 800795a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3308      	adds	r3, #8
 8007964:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007968:	65ba      	str	r2, [r7, #88]	@ 0x58
 800796a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800796e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007970:	e841 2300 	strex	r3, r2, [r1]
 8007974:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e1      	bne.n	8007940 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800798e:	2b01      	cmp	r3, #1
 8007990:	d12e      	bne.n	80079f0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a8:	f023 0310 	bic.w	r3, r3, #16
 80079ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80079b8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e6      	bne.n	8007998 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	f003 0310 	and.w	r3, r3, #16
 80079d4:	2b10      	cmp	r3, #16
 80079d6:	d103      	bne.n	80079e0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2210      	movs	r2, #16
 80079de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fe fd79 	bl	80064e0 <HAL_UARTEx_RxEventCallback>
 80079ee:	e002      	b.n	80079f6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7f9 ff2f 	bl	8001854 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d006      	beq.n	8007a0c <UART_RxISR_16BIT_FIFOEN+0x254>
 80079fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f47f aefa 	bne.w	8007800 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a12:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a16:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d045      	beq.n	8007aaa <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a24:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d23e      	bcs.n	8007aaa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3308      	adds	r3, #8
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a42:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3308      	adds	r3, #8
 8007a4a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007a4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e5      	bne.n	8007a2c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a14      	ldr	r2, [pc, #80]	@ (8007ab4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007a64:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f043 0320 	orr.w	r3, r3, #32
 8007a7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a84:	61fb      	str	r3, [r7, #28]
 8007a86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	69b9      	ldr	r1, [r7, #24]
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	617b      	str	r3, [r7, #20]
   return(result);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e6      	bne.n	8007a66 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a98:	e007      	b.n	8007aaa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	699a      	ldr	r2, [r3, #24]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f042 0208 	orr.w	r2, r2, #8
 8007aa8:	619a      	str	r2, [r3, #24]
}
 8007aaa:	bf00      	nop
 8007aac:	37a0      	adds	r7, #160	@ 0xa0
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	0800735f 	.word	0x0800735f

08007ab8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d101      	bne.n	8007b0a <HAL_UARTEx_DisableFifoMode+0x16>
 8007b06:	2302      	movs	r3, #2
 8007b08:	e027      	b.n	8007b5a <HAL_UARTEx_DisableFifoMode+0x66>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2224      	movs	r2, #36	@ 0x24
 8007b16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f022 0201 	bic.w	r2, r2, #1
 8007b30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d101      	bne.n	8007b7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e02d      	b.n	8007bda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2224      	movs	r2, #36	@ 0x24
 8007b8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0201 	bic.w	r2, r2, #1
 8007ba4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f850 	bl	8007c60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d101      	bne.n	8007bfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e02d      	b.n	8007c56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2224      	movs	r2, #36	@ 0x24
 8007c06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0201 	bic.w	r2, r2, #1
 8007c20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f812 	bl	8007c60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d108      	bne.n	8007c82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c80:	e031      	b.n	8007ce6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c82:	2308      	movs	r3, #8
 8007c84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c86:	2308      	movs	r3, #8
 8007c88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	0e5b      	lsrs	r3, r3, #25
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	0f5b      	lsrs	r3, r3, #29
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	f003 0307 	and.w	r3, r3, #7
 8007ca8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	7b3a      	ldrb	r2, [r7, #12]
 8007cae:	4911      	ldr	r1, [pc, #68]	@ (8007cf4 <UARTEx_SetNbDataToProcess+0x94>)
 8007cb0:	5c8a      	ldrb	r2, [r1, r2]
 8007cb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cb6:	7b3a      	ldrb	r2, [r7, #12]
 8007cb8:	490f      	ldr	r1, [pc, #60]	@ (8007cf8 <UARTEx_SetNbDataToProcess+0x98>)
 8007cba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	7b7a      	ldrb	r2, [r7, #13]
 8007ccc:	4909      	ldr	r1, [pc, #36]	@ (8007cf4 <UARTEx_SetNbDataToProcess+0x94>)
 8007cce:	5c8a      	ldrb	r2, [r1, r2]
 8007cd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cd4:	7b7a      	ldrb	r2, [r7, #13]
 8007cd6:	4908      	ldr	r1, [pc, #32]	@ (8007cf8 <UARTEx_SetNbDataToProcess+0x98>)
 8007cd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cda:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007ce6:	bf00      	nop
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	0800929c 	.word	0x0800929c
 8007cf8:	080092a4 	.word	0x080092a4

08007cfc <atoi>:
 8007cfc:	220a      	movs	r2, #10
 8007cfe:	2100      	movs	r1, #0
 8007d00:	f000 b87a 	b.w	8007df8 <strtol>

08007d04 <_strtol_l.constprop.0>:
 8007d04:	2b24      	cmp	r3, #36	@ 0x24
 8007d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d0a:	4686      	mov	lr, r0
 8007d0c:	4690      	mov	r8, r2
 8007d0e:	d801      	bhi.n	8007d14 <_strtol_l.constprop.0+0x10>
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d106      	bne.n	8007d22 <_strtol_l.constprop.0+0x1e>
 8007d14:	f000 fa5e 	bl	80081d4 <__errno>
 8007d18:	2316      	movs	r3, #22
 8007d1a:	6003      	str	r3, [r0, #0]
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d22:	4834      	ldr	r0, [pc, #208]	@ (8007df4 <_strtol_l.constprop.0+0xf0>)
 8007d24:	460d      	mov	r5, r1
 8007d26:	462a      	mov	r2, r5
 8007d28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d2c:	5d06      	ldrb	r6, [r0, r4]
 8007d2e:	f016 0608 	ands.w	r6, r6, #8
 8007d32:	d1f8      	bne.n	8007d26 <_strtol_l.constprop.0+0x22>
 8007d34:	2c2d      	cmp	r4, #45	@ 0x2d
 8007d36:	d12d      	bne.n	8007d94 <_strtol_l.constprop.0+0x90>
 8007d38:	782c      	ldrb	r4, [r5, #0]
 8007d3a:	2601      	movs	r6, #1
 8007d3c:	1c95      	adds	r5, r2, #2
 8007d3e:	f033 0210 	bics.w	r2, r3, #16
 8007d42:	d109      	bne.n	8007d58 <_strtol_l.constprop.0+0x54>
 8007d44:	2c30      	cmp	r4, #48	@ 0x30
 8007d46:	d12a      	bne.n	8007d9e <_strtol_l.constprop.0+0x9a>
 8007d48:	782a      	ldrb	r2, [r5, #0]
 8007d4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d4e:	2a58      	cmp	r2, #88	@ 0x58
 8007d50:	d125      	bne.n	8007d9e <_strtol_l.constprop.0+0x9a>
 8007d52:	786c      	ldrb	r4, [r5, #1]
 8007d54:	2310      	movs	r3, #16
 8007d56:	3502      	adds	r5, #2
 8007d58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007d5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d60:	2200      	movs	r2, #0
 8007d62:	fbbc f9f3 	udiv	r9, ip, r3
 8007d66:	4610      	mov	r0, r2
 8007d68:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007d70:	2f09      	cmp	r7, #9
 8007d72:	d81b      	bhi.n	8007dac <_strtol_l.constprop.0+0xa8>
 8007d74:	463c      	mov	r4, r7
 8007d76:	42a3      	cmp	r3, r4
 8007d78:	dd27      	ble.n	8007dca <_strtol_l.constprop.0+0xc6>
 8007d7a:	1c57      	adds	r7, r2, #1
 8007d7c:	d007      	beq.n	8007d8e <_strtol_l.constprop.0+0x8a>
 8007d7e:	4581      	cmp	r9, r0
 8007d80:	d320      	bcc.n	8007dc4 <_strtol_l.constprop.0+0xc0>
 8007d82:	d101      	bne.n	8007d88 <_strtol_l.constprop.0+0x84>
 8007d84:	45a2      	cmp	sl, r4
 8007d86:	db1d      	blt.n	8007dc4 <_strtol_l.constprop.0+0xc0>
 8007d88:	fb00 4003 	mla	r0, r0, r3, r4
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d92:	e7eb      	b.n	8007d6c <_strtol_l.constprop.0+0x68>
 8007d94:	2c2b      	cmp	r4, #43	@ 0x2b
 8007d96:	bf04      	itt	eq
 8007d98:	782c      	ldrbeq	r4, [r5, #0]
 8007d9a:	1c95      	addeq	r5, r2, #2
 8007d9c:	e7cf      	b.n	8007d3e <_strtol_l.constprop.0+0x3a>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1da      	bne.n	8007d58 <_strtol_l.constprop.0+0x54>
 8007da2:	2c30      	cmp	r4, #48	@ 0x30
 8007da4:	bf0c      	ite	eq
 8007da6:	2308      	moveq	r3, #8
 8007da8:	230a      	movne	r3, #10
 8007daa:	e7d5      	b.n	8007d58 <_strtol_l.constprop.0+0x54>
 8007dac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007db0:	2f19      	cmp	r7, #25
 8007db2:	d801      	bhi.n	8007db8 <_strtol_l.constprop.0+0xb4>
 8007db4:	3c37      	subs	r4, #55	@ 0x37
 8007db6:	e7de      	b.n	8007d76 <_strtol_l.constprop.0+0x72>
 8007db8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007dbc:	2f19      	cmp	r7, #25
 8007dbe:	d804      	bhi.n	8007dca <_strtol_l.constprop.0+0xc6>
 8007dc0:	3c57      	subs	r4, #87	@ 0x57
 8007dc2:	e7d8      	b.n	8007d76 <_strtol_l.constprop.0+0x72>
 8007dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc8:	e7e1      	b.n	8007d8e <_strtol_l.constprop.0+0x8a>
 8007dca:	1c53      	adds	r3, r2, #1
 8007dcc:	d108      	bne.n	8007de0 <_strtol_l.constprop.0+0xdc>
 8007dce:	2322      	movs	r3, #34	@ 0x22
 8007dd0:	f8ce 3000 	str.w	r3, [lr]
 8007dd4:	4660      	mov	r0, ip
 8007dd6:	f1b8 0f00 	cmp.w	r8, #0
 8007dda:	d0a0      	beq.n	8007d1e <_strtol_l.constprop.0+0x1a>
 8007ddc:	1e69      	subs	r1, r5, #1
 8007dde:	e006      	b.n	8007dee <_strtol_l.constprop.0+0xea>
 8007de0:	b106      	cbz	r6, 8007de4 <_strtol_l.constprop.0+0xe0>
 8007de2:	4240      	negs	r0, r0
 8007de4:	f1b8 0f00 	cmp.w	r8, #0
 8007de8:	d099      	beq.n	8007d1e <_strtol_l.constprop.0+0x1a>
 8007dea:	2a00      	cmp	r2, #0
 8007dec:	d1f6      	bne.n	8007ddc <_strtol_l.constprop.0+0xd8>
 8007dee:	f8c8 1000 	str.w	r1, [r8]
 8007df2:	e794      	b.n	8007d1e <_strtol_l.constprop.0+0x1a>
 8007df4:	080092ad 	.word	0x080092ad

08007df8 <strtol>:
 8007df8:	4613      	mov	r3, r2
 8007dfa:	460a      	mov	r2, r1
 8007dfc:	4601      	mov	r1, r0
 8007dfe:	4802      	ldr	r0, [pc, #8]	@ (8007e08 <strtol+0x10>)
 8007e00:	6800      	ldr	r0, [r0, #0]
 8007e02:	f7ff bf7f 	b.w	8007d04 <_strtol_l.constprop.0>
 8007e06:	bf00      	nop
 8007e08:	200000d4 	.word	0x200000d4

08007e0c <std>:
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	b510      	push	{r4, lr}
 8007e10:	4604      	mov	r4, r0
 8007e12:	e9c0 3300 	strd	r3, r3, [r0]
 8007e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e1a:	6083      	str	r3, [r0, #8]
 8007e1c:	8181      	strh	r1, [r0, #12]
 8007e1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e20:	81c2      	strh	r2, [r0, #14]
 8007e22:	6183      	str	r3, [r0, #24]
 8007e24:	4619      	mov	r1, r3
 8007e26:	2208      	movs	r2, #8
 8007e28:	305c      	adds	r0, #92	@ 0x5c
 8007e2a:	f000 f928 	bl	800807e <memset>
 8007e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e64 <std+0x58>)
 8007e30:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e32:	4b0d      	ldr	r3, [pc, #52]	@ (8007e68 <std+0x5c>)
 8007e34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e36:	4b0d      	ldr	r3, [pc, #52]	@ (8007e6c <std+0x60>)
 8007e38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e70 <std+0x64>)
 8007e3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e74 <std+0x68>)
 8007e40:	6224      	str	r4, [r4, #32]
 8007e42:	429c      	cmp	r4, r3
 8007e44:	d006      	beq.n	8007e54 <std+0x48>
 8007e46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e4a:	4294      	cmp	r4, r2
 8007e4c:	d002      	beq.n	8007e54 <std+0x48>
 8007e4e:	33d0      	adds	r3, #208	@ 0xd0
 8007e50:	429c      	cmp	r4, r3
 8007e52:	d105      	bne.n	8007e60 <std+0x54>
 8007e54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e5c:	f000 b9e4 	b.w	8008228 <__retarget_lock_init_recursive>
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	bf00      	nop
 8007e64:	08007ff9 	.word	0x08007ff9
 8007e68:	0800801b 	.word	0x0800801b
 8007e6c:	08008053 	.word	0x08008053
 8007e70:	08008077 	.word	0x08008077
 8007e74:	200004f8 	.word	0x200004f8

08007e78 <stdio_exit_handler>:
 8007e78:	4a02      	ldr	r2, [pc, #8]	@ (8007e84 <stdio_exit_handler+0xc>)
 8007e7a:	4903      	ldr	r1, [pc, #12]	@ (8007e88 <stdio_exit_handler+0x10>)
 8007e7c:	4803      	ldr	r0, [pc, #12]	@ (8007e8c <stdio_exit_handler+0x14>)
 8007e7e:	f000 b869 	b.w	8007f54 <_fwalk_sglue>
 8007e82:	bf00      	nop
 8007e84:	200000c8 	.word	0x200000c8
 8007e88:	08008b41 	.word	0x08008b41
 8007e8c:	200000d8 	.word	0x200000d8

08007e90 <cleanup_stdio>:
 8007e90:	6841      	ldr	r1, [r0, #4]
 8007e92:	4b0c      	ldr	r3, [pc, #48]	@ (8007ec4 <cleanup_stdio+0x34>)
 8007e94:	4299      	cmp	r1, r3
 8007e96:	b510      	push	{r4, lr}
 8007e98:	4604      	mov	r4, r0
 8007e9a:	d001      	beq.n	8007ea0 <cleanup_stdio+0x10>
 8007e9c:	f000 fe50 	bl	8008b40 <_fflush_r>
 8007ea0:	68a1      	ldr	r1, [r4, #8]
 8007ea2:	4b09      	ldr	r3, [pc, #36]	@ (8007ec8 <cleanup_stdio+0x38>)
 8007ea4:	4299      	cmp	r1, r3
 8007ea6:	d002      	beq.n	8007eae <cleanup_stdio+0x1e>
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 fe49 	bl	8008b40 <_fflush_r>
 8007eae:	68e1      	ldr	r1, [r4, #12]
 8007eb0:	4b06      	ldr	r3, [pc, #24]	@ (8007ecc <cleanup_stdio+0x3c>)
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	d004      	beq.n	8007ec0 <cleanup_stdio+0x30>
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ebc:	f000 be40 	b.w	8008b40 <_fflush_r>
 8007ec0:	bd10      	pop	{r4, pc}
 8007ec2:	bf00      	nop
 8007ec4:	200004f8 	.word	0x200004f8
 8007ec8:	20000560 	.word	0x20000560
 8007ecc:	200005c8 	.word	0x200005c8

08007ed0 <global_stdio_init.part.0>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8007f00 <global_stdio_init.part.0+0x30>)
 8007ed4:	4c0b      	ldr	r4, [pc, #44]	@ (8007f04 <global_stdio_init.part.0+0x34>)
 8007ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8007f08 <global_stdio_init.part.0+0x38>)
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	4620      	mov	r0, r4
 8007edc:	2200      	movs	r2, #0
 8007ede:	2104      	movs	r1, #4
 8007ee0:	f7ff ff94 	bl	8007e0c <std>
 8007ee4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ee8:	2201      	movs	r2, #1
 8007eea:	2109      	movs	r1, #9
 8007eec:	f7ff ff8e 	bl	8007e0c <std>
 8007ef0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007efa:	2112      	movs	r1, #18
 8007efc:	f7ff bf86 	b.w	8007e0c <std>
 8007f00:	20000630 	.word	0x20000630
 8007f04:	200004f8 	.word	0x200004f8
 8007f08:	08007e79 	.word	0x08007e79

08007f0c <__sfp_lock_acquire>:
 8007f0c:	4801      	ldr	r0, [pc, #4]	@ (8007f14 <__sfp_lock_acquire+0x8>)
 8007f0e:	f000 b98c 	b.w	800822a <__retarget_lock_acquire_recursive>
 8007f12:	bf00      	nop
 8007f14:	20000639 	.word	0x20000639

08007f18 <__sfp_lock_release>:
 8007f18:	4801      	ldr	r0, [pc, #4]	@ (8007f20 <__sfp_lock_release+0x8>)
 8007f1a:	f000 b987 	b.w	800822c <__retarget_lock_release_recursive>
 8007f1e:	bf00      	nop
 8007f20:	20000639 	.word	0x20000639

08007f24 <__sinit>:
 8007f24:	b510      	push	{r4, lr}
 8007f26:	4604      	mov	r4, r0
 8007f28:	f7ff fff0 	bl	8007f0c <__sfp_lock_acquire>
 8007f2c:	6a23      	ldr	r3, [r4, #32]
 8007f2e:	b11b      	cbz	r3, 8007f38 <__sinit+0x14>
 8007f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f34:	f7ff bff0 	b.w	8007f18 <__sfp_lock_release>
 8007f38:	4b04      	ldr	r3, [pc, #16]	@ (8007f4c <__sinit+0x28>)
 8007f3a:	6223      	str	r3, [r4, #32]
 8007f3c:	4b04      	ldr	r3, [pc, #16]	@ (8007f50 <__sinit+0x2c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1f5      	bne.n	8007f30 <__sinit+0xc>
 8007f44:	f7ff ffc4 	bl	8007ed0 <global_stdio_init.part.0>
 8007f48:	e7f2      	b.n	8007f30 <__sinit+0xc>
 8007f4a:	bf00      	nop
 8007f4c:	08007e91 	.word	0x08007e91
 8007f50:	20000630 	.word	0x20000630

08007f54 <_fwalk_sglue>:
 8007f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f58:	4607      	mov	r7, r0
 8007f5a:	4688      	mov	r8, r1
 8007f5c:	4614      	mov	r4, r2
 8007f5e:	2600      	movs	r6, #0
 8007f60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f64:	f1b9 0901 	subs.w	r9, r9, #1
 8007f68:	d505      	bpl.n	8007f76 <_fwalk_sglue+0x22>
 8007f6a:	6824      	ldr	r4, [r4, #0]
 8007f6c:	2c00      	cmp	r4, #0
 8007f6e:	d1f7      	bne.n	8007f60 <_fwalk_sglue+0xc>
 8007f70:	4630      	mov	r0, r6
 8007f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f76:	89ab      	ldrh	r3, [r5, #12]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d907      	bls.n	8007f8c <_fwalk_sglue+0x38>
 8007f7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f80:	3301      	adds	r3, #1
 8007f82:	d003      	beq.n	8007f8c <_fwalk_sglue+0x38>
 8007f84:	4629      	mov	r1, r5
 8007f86:	4638      	mov	r0, r7
 8007f88:	47c0      	blx	r8
 8007f8a:	4306      	orrs	r6, r0
 8007f8c:	3568      	adds	r5, #104	@ 0x68
 8007f8e:	e7e9      	b.n	8007f64 <_fwalk_sglue+0x10>

08007f90 <sniprintf>:
 8007f90:	b40c      	push	{r2, r3}
 8007f92:	b530      	push	{r4, r5, lr}
 8007f94:	4b17      	ldr	r3, [pc, #92]	@ (8007ff4 <sniprintf+0x64>)
 8007f96:	1e0c      	subs	r4, r1, #0
 8007f98:	681d      	ldr	r5, [r3, #0]
 8007f9a:	b09d      	sub	sp, #116	@ 0x74
 8007f9c:	da08      	bge.n	8007fb0 <sniprintf+0x20>
 8007f9e:	238b      	movs	r3, #139	@ 0x8b
 8007fa0:	602b      	str	r3, [r5, #0]
 8007fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa6:	b01d      	add	sp, #116	@ 0x74
 8007fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fac:	b002      	add	sp, #8
 8007fae:	4770      	bx	lr
 8007fb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007fb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007fb8:	bf14      	ite	ne
 8007fba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fbe:	4623      	moveq	r3, r4
 8007fc0:	9304      	str	r3, [sp, #16]
 8007fc2:	9307      	str	r3, [sp, #28]
 8007fc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fc8:	9002      	str	r0, [sp, #8]
 8007fca:	9006      	str	r0, [sp, #24]
 8007fcc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007fd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007fd2:	ab21      	add	r3, sp, #132	@ 0x84
 8007fd4:	a902      	add	r1, sp, #8
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	f000 faa3 	bl	8008524 <_svfiprintf_r>
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	bfbc      	itt	lt
 8007fe2:	238b      	movlt	r3, #139	@ 0x8b
 8007fe4:	602b      	strlt	r3, [r5, #0]
 8007fe6:	2c00      	cmp	r4, #0
 8007fe8:	d0dd      	beq.n	8007fa6 <sniprintf+0x16>
 8007fea:	9b02      	ldr	r3, [sp, #8]
 8007fec:	2200      	movs	r2, #0
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	e7d9      	b.n	8007fa6 <sniprintf+0x16>
 8007ff2:	bf00      	nop
 8007ff4:	200000d4 	.word	0x200000d4

08007ff8 <__sread>:
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008000:	f000 f8c4 	bl	800818c <_read_r>
 8008004:	2800      	cmp	r0, #0
 8008006:	bfab      	itete	ge
 8008008:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800800a:	89a3      	ldrhlt	r3, [r4, #12]
 800800c:	181b      	addge	r3, r3, r0
 800800e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008012:	bfac      	ite	ge
 8008014:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008016:	81a3      	strhlt	r3, [r4, #12]
 8008018:	bd10      	pop	{r4, pc}

0800801a <__swrite>:
 800801a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800801e:	461f      	mov	r7, r3
 8008020:	898b      	ldrh	r3, [r1, #12]
 8008022:	05db      	lsls	r3, r3, #23
 8008024:	4605      	mov	r5, r0
 8008026:	460c      	mov	r4, r1
 8008028:	4616      	mov	r6, r2
 800802a:	d505      	bpl.n	8008038 <__swrite+0x1e>
 800802c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008030:	2302      	movs	r3, #2
 8008032:	2200      	movs	r2, #0
 8008034:	f000 f898 	bl	8008168 <_lseek_r>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800803e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008042:	81a3      	strh	r3, [r4, #12]
 8008044:	4632      	mov	r2, r6
 8008046:	463b      	mov	r3, r7
 8008048:	4628      	mov	r0, r5
 800804a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800804e:	f000 b8af 	b.w	80081b0 <_write_r>

08008052 <__sseek>:
 8008052:	b510      	push	{r4, lr}
 8008054:	460c      	mov	r4, r1
 8008056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805a:	f000 f885 	bl	8008168 <_lseek_r>
 800805e:	1c43      	adds	r3, r0, #1
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	bf15      	itete	ne
 8008064:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008066:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800806a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800806e:	81a3      	strheq	r3, [r4, #12]
 8008070:	bf18      	it	ne
 8008072:	81a3      	strhne	r3, [r4, #12]
 8008074:	bd10      	pop	{r4, pc}

08008076 <__sclose>:
 8008076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807a:	f000 b865 	b.w	8008148 <_close_r>

0800807e <memset>:
 800807e:	4402      	add	r2, r0
 8008080:	4603      	mov	r3, r0
 8008082:	4293      	cmp	r3, r2
 8008084:	d100      	bne.n	8008088 <memset+0xa>
 8008086:	4770      	bx	lr
 8008088:	f803 1b01 	strb.w	r1, [r3], #1
 800808c:	e7f9      	b.n	8008082 <memset+0x4>
	...

08008090 <strtok>:
 8008090:	4b16      	ldr	r3, [pc, #88]	@ (80080ec <strtok+0x5c>)
 8008092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008096:	681f      	ldr	r7, [r3, #0]
 8008098:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800809a:	4605      	mov	r5, r0
 800809c:	460e      	mov	r6, r1
 800809e:	b9ec      	cbnz	r4, 80080dc <strtok+0x4c>
 80080a0:	2050      	movs	r0, #80	@ 0x50
 80080a2:	f000 f92d 	bl	8008300 <malloc>
 80080a6:	4602      	mov	r2, r0
 80080a8:	6478      	str	r0, [r7, #68]	@ 0x44
 80080aa:	b920      	cbnz	r0, 80080b6 <strtok+0x26>
 80080ac:	4b10      	ldr	r3, [pc, #64]	@ (80080f0 <strtok+0x60>)
 80080ae:	4811      	ldr	r0, [pc, #68]	@ (80080f4 <strtok+0x64>)
 80080b0:	215b      	movs	r1, #91	@ 0x5b
 80080b2:	f000 f8bd 	bl	8008230 <__assert_func>
 80080b6:	e9c0 4400 	strd	r4, r4, [r0]
 80080ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80080be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80080c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80080c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80080ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80080ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80080d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80080d6:	6184      	str	r4, [r0, #24]
 80080d8:	7704      	strb	r4, [r0, #28]
 80080da:	6244      	str	r4, [r0, #36]	@ 0x24
 80080dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080de:	4631      	mov	r1, r6
 80080e0:	4628      	mov	r0, r5
 80080e2:	2301      	movs	r3, #1
 80080e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080e8:	f000 b806 	b.w	80080f8 <__strtok_r>
 80080ec:	200000d4 	.word	0x200000d4
 80080f0:	080093ad 	.word	0x080093ad
 80080f4:	080093c4 	.word	0x080093c4

080080f8 <__strtok_r>:
 80080f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080fa:	4604      	mov	r4, r0
 80080fc:	b908      	cbnz	r0, 8008102 <__strtok_r+0xa>
 80080fe:	6814      	ldr	r4, [r2, #0]
 8008100:	b144      	cbz	r4, 8008114 <__strtok_r+0x1c>
 8008102:	4620      	mov	r0, r4
 8008104:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008108:	460f      	mov	r7, r1
 800810a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800810e:	b91e      	cbnz	r6, 8008118 <__strtok_r+0x20>
 8008110:	b965      	cbnz	r5, 800812c <__strtok_r+0x34>
 8008112:	6015      	str	r5, [r2, #0]
 8008114:	2000      	movs	r0, #0
 8008116:	e005      	b.n	8008124 <__strtok_r+0x2c>
 8008118:	42b5      	cmp	r5, r6
 800811a:	d1f6      	bne.n	800810a <__strtok_r+0x12>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1f0      	bne.n	8008102 <__strtok_r+0xa>
 8008120:	6014      	str	r4, [r2, #0]
 8008122:	7003      	strb	r3, [r0, #0]
 8008124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008126:	461c      	mov	r4, r3
 8008128:	e00c      	b.n	8008144 <__strtok_r+0x4c>
 800812a:	b915      	cbnz	r5, 8008132 <__strtok_r+0x3a>
 800812c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008130:	460e      	mov	r6, r1
 8008132:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008136:	42ab      	cmp	r3, r5
 8008138:	d1f7      	bne.n	800812a <__strtok_r+0x32>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0f3      	beq.n	8008126 <__strtok_r+0x2e>
 800813e:	2300      	movs	r3, #0
 8008140:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008144:	6014      	str	r4, [r2, #0]
 8008146:	e7ed      	b.n	8008124 <__strtok_r+0x2c>

08008148 <_close_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4d06      	ldr	r5, [pc, #24]	@ (8008164 <_close_r+0x1c>)
 800814c:	2300      	movs	r3, #0
 800814e:	4604      	mov	r4, r0
 8008150:	4608      	mov	r0, r1
 8008152:	602b      	str	r3, [r5, #0]
 8008154:	f7f8 fe8e 	bl	8000e74 <_close>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d102      	bne.n	8008162 <_close_r+0x1a>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	b103      	cbz	r3, 8008162 <_close_r+0x1a>
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	20000634 	.word	0x20000634

08008168 <_lseek_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d07      	ldr	r5, [pc, #28]	@ (8008188 <_lseek_r+0x20>)
 800816c:	4604      	mov	r4, r0
 800816e:	4608      	mov	r0, r1
 8008170:	4611      	mov	r1, r2
 8008172:	2200      	movs	r2, #0
 8008174:	602a      	str	r2, [r5, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	f7f8 fea3 	bl	8000ec2 <_lseek>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_lseek_r+0x1e>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_lseek_r+0x1e>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	20000634 	.word	0x20000634

0800818c <_read_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4d07      	ldr	r5, [pc, #28]	@ (80081ac <_read_r+0x20>)
 8008190:	4604      	mov	r4, r0
 8008192:	4608      	mov	r0, r1
 8008194:	4611      	mov	r1, r2
 8008196:	2200      	movs	r2, #0
 8008198:	602a      	str	r2, [r5, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	f7f8 fe31 	bl	8000e02 <_read>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	d102      	bne.n	80081aa <_read_r+0x1e>
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	b103      	cbz	r3, 80081aa <_read_r+0x1e>
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	bd38      	pop	{r3, r4, r5, pc}
 80081ac:	20000634 	.word	0x20000634

080081b0 <_write_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4d07      	ldr	r5, [pc, #28]	@ (80081d0 <_write_r+0x20>)
 80081b4:	4604      	mov	r4, r0
 80081b6:	4608      	mov	r0, r1
 80081b8:	4611      	mov	r1, r2
 80081ba:	2200      	movs	r2, #0
 80081bc:	602a      	str	r2, [r5, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	f7f8 fe3c 	bl	8000e3c <_write>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_write_r+0x1e>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_write_r+0x1e>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	20000634 	.word	0x20000634

080081d4 <__errno>:
 80081d4:	4b01      	ldr	r3, [pc, #4]	@ (80081dc <__errno+0x8>)
 80081d6:	6818      	ldr	r0, [r3, #0]
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	200000d4 	.word	0x200000d4

080081e0 <__libc_init_array>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	4d0d      	ldr	r5, [pc, #52]	@ (8008218 <__libc_init_array+0x38>)
 80081e4:	4c0d      	ldr	r4, [pc, #52]	@ (800821c <__libc_init_array+0x3c>)
 80081e6:	1b64      	subs	r4, r4, r5
 80081e8:	10a4      	asrs	r4, r4, #2
 80081ea:	2600      	movs	r6, #0
 80081ec:	42a6      	cmp	r6, r4
 80081ee:	d109      	bne.n	8008204 <__libc_init_array+0x24>
 80081f0:	4d0b      	ldr	r5, [pc, #44]	@ (8008220 <__libc_init_array+0x40>)
 80081f2:	4c0c      	ldr	r4, [pc, #48]	@ (8008224 <__libc_init_array+0x44>)
 80081f4:	f000 fff0 	bl	80091d8 <_init>
 80081f8:	1b64      	subs	r4, r4, r5
 80081fa:	10a4      	asrs	r4, r4, #2
 80081fc:	2600      	movs	r6, #0
 80081fe:	42a6      	cmp	r6, r4
 8008200:	d105      	bne.n	800820e <__libc_init_array+0x2e>
 8008202:	bd70      	pop	{r4, r5, r6, pc}
 8008204:	f855 3b04 	ldr.w	r3, [r5], #4
 8008208:	4798      	blx	r3
 800820a:	3601      	adds	r6, #1
 800820c:	e7ee      	b.n	80081ec <__libc_init_array+0xc>
 800820e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008212:	4798      	blx	r3
 8008214:	3601      	adds	r6, #1
 8008216:	e7f2      	b.n	80081fe <__libc_init_array+0x1e>
 8008218:	08009498 	.word	0x08009498
 800821c:	08009498 	.word	0x08009498
 8008220:	08009498 	.word	0x08009498
 8008224:	0800949c 	.word	0x0800949c

08008228 <__retarget_lock_init_recursive>:
 8008228:	4770      	bx	lr

0800822a <__retarget_lock_acquire_recursive>:
 800822a:	4770      	bx	lr

0800822c <__retarget_lock_release_recursive>:
 800822c:	4770      	bx	lr
	...

08008230 <__assert_func>:
 8008230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008232:	4614      	mov	r4, r2
 8008234:	461a      	mov	r2, r3
 8008236:	4b09      	ldr	r3, [pc, #36]	@ (800825c <__assert_func+0x2c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4605      	mov	r5, r0
 800823c:	68d8      	ldr	r0, [r3, #12]
 800823e:	b954      	cbnz	r4, 8008256 <__assert_func+0x26>
 8008240:	4b07      	ldr	r3, [pc, #28]	@ (8008260 <__assert_func+0x30>)
 8008242:	461c      	mov	r4, r3
 8008244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008248:	9100      	str	r1, [sp, #0]
 800824a:	462b      	mov	r3, r5
 800824c:	4905      	ldr	r1, [pc, #20]	@ (8008264 <__assert_func+0x34>)
 800824e:	f000 fc9f 	bl	8008b90 <fiprintf>
 8008252:	f000 fce7 	bl	8008c24 <abort>
 8008256:	4b04      	ldr	r3, [pc, #16]	@ (8008268 <__assert_func+0x38>)
 8008258:	e7f4      	b.n	8008244 <__assert_func+0x14>
 800825a:	bf00      	nop
 800825c:	200000d4 	.word	0x200000d4
 8008260:	08009459 	.word	0x08009459
 8008264:	0800942b 	.word	0x0800942b
 8008268:	0800941e 	.word	0x0800941e

0800826c <_free_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4605      	mov	r5, r0
 8008270:	2900      	cmp	r1, #0
 8008272:	d041      	beq.n	80082f8 <_free_r+0x8c>
 8008274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008278:	1f0c      	subs	r4, r1, #4
 800827a:	2b00      	cmp	r3, #0
 800827c:	bfb8      	it	lt
 800827e:	18e4      	addlt	r4, r4, r3
 8008280:	f000 f8e8 	bl	8008454 <__malloc_lock>
 8008284:	4a1d      	ldr	r2, [pc, #116]	@ (80082fc <_free_r+0x90>)
 8008286:	6813      	ldr	r3, [r2, #0]
 8008288:	b933      	cbnz	r3, 8008298 <_free_r+0x2c>
 800828a:	6063      	str	r3, [r4, #4]
 800828c:	6014      	str	r4, [r2, #0]
 800828e:	4628      	mov	r0, r5
 8008290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008294:	f000 b8e4 	b.w	8008460 <__malloc_unlock>
 8008298:	42a3      	cmp	r3, r4
 800829a:	d908      	bls.n	80082ae <_free_r+0x42>
 800829c:	6820      	ldr	r0, [r4, #0]
 800829e:	1821      	adds	r1, r4, r0
 80082a0:	428b      	cmp	r3, r1
 80082a2:	bf01      	itttt	eq
 80082a4:	6819      	ldreq	r1, [r3, #0]
 80082a6:	685b      	ldreq	r3, [r3, #4]
 80082a8:	1809      	addeq	r1, r1, r0
 80082aa:	6021      	streq	r1, [r4, #0]
 80082ac:	e7ed      	b.n	800828a <_free_r+0x1e>
 80082ae:	461a      	mov	r2, r3
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	b10b      	cbz	r3, 80082b8 <_free_r+0x4c>
 80082b4:	42a3      	cmp	r3, r4
 80082b6:	d9fa      	bls.n	80082ae <_free_r+0x42>
 80082b8:	6811      	ldr	r1, [r2, #0]
 80082ba:	1850      	adds	r0, r2, r1
 80082bc:	42a0      	cmp	r0, r4
 80082be:	d10b      	bne.n	80082d8 <_free_r+0x6c>
 80082c0:	6820      	ldr	r0, [r4, #0]
 80082c2:	4401      	add	r1, r0
 80082c4:	1850      	adds	r0, r2, r1
 80082c6:	4283      	cmp	r3, r0
 80082c8:	6011      	str	r1, [r2, #0]
 80082ca:	d1e0      	bne.n	800828e <_free_r+0x22>
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	6053      	str	r3, [r2, #4]
 80082d2:	4408      	add	r0, r1
 80082d4:	6010      	str	r0, [r2, #0]
 80082d6:	e7da      	b.n	800828e <_free_r+0x22>
 80082d8:	d902      	bls.n	80082e0 <_free_r+0x74>
 80082da:	230c      	movs	r3, #12
 80082dc:	602b      	str	r3, [r5, #0]
 80082de:	e7d6      	b.n	800828e <_free_r+0x22>
 80082e0:	6820      	ldr	r0, [r4, #0]
 80082e2:	1821      	adds	r1, r4, r0
 80082e4:	428b      	cmp	r3, r1
 80082e6:	bf04      	itt	eq
 80082e8:	6819      	ldreq	r1, [r3, #0]
 80082ea:	685b      	ldreq	r3, [r3, #4]
 80082ec:	6063      	str	r3, [r4, #4]
 80082ee:	bf04      	itt	eq
 80082f0:	1809      	addeq	r1, r1, r0
 80082f2:	6021      	streq	r1, [r4, #0]
 80082f4:	6054      	str	r4, [r2, #4]
 80082f6:	e7ca      	b.n	800828e <_free_r+0x22>
 80082f8:	bd38      	pop	{r3, r4, r5, pc}
 80082fa:	bf00      	nop
 80082fc:	20000640 	.word	0x20000640

08008300 <malloc>:
 8008300:	4b02      	ldr	r3, [pc, #8]	@ (800830c <malloc+0xc>)
 8008302:	4601      	mov	r1, r0
 8008304:	6818      	ldr	r0, [r3, #0]
 8008306:	f000 b825 	b.w	8008354 <_malloc_r>
 800830a:	bf00      	nop
 800830c:	200000d4 	.word	0x200000d4

08008310 <sbrk_aligned>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	4e0f      	ldr	r6, [pc, #60]	@ (8008350 <sbrk_aligned+0x40>)
 8008314:	460c      	mov	r4, r1
 8008316:	6831      	ldr	r1, [r6, #0]
 8008318:	4605      	mov	r5, r0
 800831a:	b911      	cbnz	r1, 8008322 <sbrk_aligned+0x12>
 800831c:	f000 fc64 	bl	8008be8 <_sbrk_r>
 8008320:	6030      	str	r0, [r6, #0]
 8008322:	4621      	mov	r1, r4
 8008324:	4628      	mov	r0, r5
 8008326:	f000 fc5f 	bl	8008be8 <_sbrk_r>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	d103      	bne.n	8008336 <sbrk_aligned+0x26>
 800832e:	f04f 34ff 	mov.w	r4, #4294967295
 8008332:	4620      	mov	r0, r4
 8008334:	bd70      	pop	{r4, r5, r6, pc}
 8008336:	1cc4      	adds	r4, r0, #3
 8008338:	f024 0403 	bic.w	r4, r4, #3
 800833c:	42a0      	cmp	r0, r4
 800833e:	d0f8      	beq.n	8008332 <sbrk_aligned+0x22>
 8008340:	1a21      	subs	r1, r4, r0
 8008342:	4628      	mov	r0, r5
 8008344:	f000 fc50 	bl	8008be8 <_sbrk_r>
 8008348:	3001      	adds	r0, #1
 800834a:	d1f2      	bne.n	8008332 <sbrk_aligned+0x22>
 800834c:	e7ef      	b.n	800832e <sbrk_aligned+0x1e>
 800834e:	bf00      	nop
 8008350:	2000063c 	.word	0x2000063c

08008354 <_malloc_r>:
 8008354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008358:	1ccd      	adds	r5, r1, #3
 800835a:	f025 0503 	bic.w	r5, r5, #3
 800835e:	3508      	adds	r5, #8
 8008360:	2d0c      	cmp	r5, #12
 8008362:	bf38      	it	cc
 8008364:	250c      	movcc	r5, #12
 8008366:	2d00      	cmp	r5, #0
 8008368:	4606      	mov	r6, r0
 800836a:	db01      	blt.n	8008370 <_malloc_r+0x1c>
 800836c:	42a9      	cmp	r1, r5
 800836e:	d904      	bls.n	800837a <_malloc_r+0x26>
 8008370:	230c      	movs	r3, #12
 8008372:	6033      	str	r3, [r6, #0]
 8008374:	2000      	movs	r0, #0
 8008376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800837a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008450 <_malloc_r+0xfc>
 800837e:	f000 f869 	bl	8008454 <__malloc_lock>
 8008382:	f8d8 3000 	ldr.w	r3, [r8]
 8008386:	461c      	mov	r4, r3
 8008388:	bb44      	cbnz	r4, 80083dc <_malloc_r+0x88>
 800838a:	4629      	mov	r1, r5
 800838c:	4630      	mov	r0, r6
 800838e:	f7ff ffbf 	bl	8008310 <sbrk_aligned>
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	4604      	mov	r4, r0
 8008396:	d158      	bne.n	800844a <_malloc_r+0xf6>
 8008398:	f8d8 4000 	ldr.w	r4, [r8]
 800839c:	4627      	mov	r7, r4
 800839e:	2f00      	cmp	r7, #0
 80083a0:	d143      	bne.n	800842a <_malloc_r+0xd6>
 80083a2:	2c00      	cmp	r4, #0
 80083a4:	d04b      	beq.n	800843e <_malloc_r+0xea>
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	4639      	mov	r1, r7
 80083aa:	4630      	mov	r0, r6
 80083ac:	eb04 0903 	add.w	r9, r4, r3
 80083b0:	f000 fc1a 	bl	8008be8 <_sbrk_r>
 80083b4:	4581      	cmp	r9, r0
 80083b6:	d142      	bne.n	800843e <_malloc_r+0xea>
 80083b8:	6821      	ldr	r1, [r4, #0]
 80083ba:	1a6d      	subs	r5, r5, r1
 80083bc:	4629      	mov	r1, r5
 80083be:	4630      	mov	r0, r6
 80083c0:	f7ff ffa6 	bl	8008310 <sbrk_aligned>
 80083c4:	3001      	adds	r0, #1
 80083c6:	d03a      	beq.n	800843e <_malloc_r+0xea>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	442b      	add	r3, r5
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	f8d8 3000 	ldr.w	r3, [r8]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	bb62      	cbnz	r2, 8008430 <_malloc_r+0xdc>
 80083d6:	f8c8 7000 	str.w	r7, [r8]
 80083da:	e00f      	b.n	80083fc <_malloc_r+0xa8>
 80083dc:	6822      	ldr	r2, [r4, #0]
 80083de:	1b52      	subs	r2, r2, r5
 80083e0:	d420      	bmi.n	8008424 <_malloc_r+0xd0>
 80083e2:	2a0b      	cmp	r2, #11
 80083e4:	d917      	bls.n	8008416 <_malloc_r+0xc2>
 80083e6:	1961      	adds	r1, r4, r5
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	6025      	str	r5, [r4, #0]
 80083ec:	bf18      	it	ne
 80083ee:	6059      	strne	r1, [r3, #4]
 80083f0:	6863      	ldr	r3, [r4, #4]
 80083f2:	bf08      	it	eq
 80083f4:	f8c8 1000 	streq.w	r1, [r8]
 80083f8:	5162      	str	r2, [r4, r5]
 80083fa:	604b      	str	r3, [r1, #4]
 80083fc:	4630      	mov	r0, r6
 80083fe:	f000 f82f 	bl	8008460 <__malloc_unlock>
 8008402:	f104 000b 	add.w	r0, r4, #11
 8008406:	1d23      	adds	r3, r4, #4
 8008408:	f020 0007 	bic.w	r0, r0, #7
 800840c:	1ac2      	subs	r2, r0, r3
 800840e:	bf1c      	itt	ne
 8008410:	1a1b      	subne	r3, r3, r0
 8008412:	50a3      	strne	r3, [r4, r2]
 8008414:	e7af      	b.n	8008376 <_malloc_r+0x22>
 8008416:	6862      	ldr	r2, [r4, #4]
 8008418:	42a3      	cmp	r3, r4
 800841a:	bf0c      	ite	eq
 800841c:	f8c8 2000 	streq.w	r2, [r8]
 8008420:	605a      	strne	r2, [r3, #4]
 8008422:	e7eb      	b.n	80083fc <_malloc_r+0xa8>
 8008424:	4623      	mov	r3, r4
 8008426:	6864      	ldr	r4, [r4, #4]
 8008428:	e7ae      	b.n	8008388 <_malloc_r+0x34>
 800842a:	463c      	mov	r4, r7
 800842c:	687f      	ldr	r7, [r7, #4]
 800842e:	e7b6      	b.n	800839e <_malloc_r+0x4a>
 8008430:	461a      	mov	r2, r3
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	42a3      	cmp	r3, r4
 8008436:	d1fb      	bne.n	8008430 <_malloc_r+0xdc>
 8008438:	2300      	movs	r3, #0
 800843a:	6053      	str	r3, [r2, #4]
 800843c:	e7de      	b.n	80083fc <_malloc_r+0xa8>
 800843e:	230c      	movs	r3, #12
 8008440:	6033      	str	r3, [r6, #0]
 8008442:	4630      	mov	r0, r6
 8008444:	f000 f80c 	bl	8008460 <__malloc_unlock>
 8008448:	e794      	b.n	8008374 <_malloc_r+0x20>
 800844a:	6005      	str	r5, [r0, #0]
 800844c:	e7d6      	b.n	80083fc <_malloc_r+0xa8>
 800844e:	bf00      	nop
 8008450:	20000640 	.word	0x20000640

08008454 <__malloc_lock>:
 8008454:	4801      	ldr	r0, [pc, #4]	@ (800845c <__malloc_lock+0x8>)
 8008456:	f7ff bee8 	b.w	800822a <__retarget_lock_acquire_recursive>
 800845a:	bf00      	nop
 800845c:	20000638 	.word	0x20000638

08008460 <__malloc_unlock>:
 8008460:	4801      	ldr	r0, [pc, #4]	@ (8008468 <__malloc_unlock+0x8>)
 8008462:	f7ff bee3 	b.w	800822c <__retarget_lock_release_recursive>
 8008466:	bf00      	nop
 8008468:	20000638 	.word	0x20000638

0800846c <__ssputs_r>:
 800846c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008470:	688e      	ldr	r6, [r1, #8]
 8008472:	461f      	mov	r7, r3
 8008474:	42be      	cmp	r6, r7
 8008476:	680b      	ldr	r3, [r1, #0]
 8008478:	4682      	mov	sl, r0
 800847a:	460c      	mov	r4, r1
 800847c:	4690      	mov	r8, r2
 800847e:	d82d      	bhi.n	80084dc <__ssputs_r+0x70>
 8008480:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008484:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008488:	d026      	beq.n	80084d8 <__ssputs_r+0x6c>
 800848a:	6965      	ldr	r5, [r4, #20]
 800848c:	6909      	ldr	r1, [r1, #16]
 800848e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008492:	eba3 0901 	sub.w	r9, r3, r1
 8008496:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800849a:	1c7b      	adds	r3, r7, #1
 800849c:	444b      	add	r3, r9
 800849e:	106d      	asrs	r5, r5, #1
 80084a0:	429d      	cmp	r5, r3
 80084a2:	bf38      	it	cc
 80084a4:	461d      	movcc	r5, r3
 80084a6:	0553      	lsls	r3, r2, #21
 80084a8:	d527      	bpl.n	80084fa <__ssputs_r+0x8e>
 80084aa:	4629      	mov	r1, r5
 80084ac:	f7ff ff52 	bl	8008354 <_malloc_r>
 80084b0:	4606      	mov	r6, r0
 80084b2:	b360      	cbz	r0, 800850e <__ssputs_r+0xa2>
 80084b4:	6921      	ldr	r1, [r4, #16]
 80084b6:	464a      	mov	r2, r9
 80084b8:	f000 fba6 	bl	8008c08 <memcpy>
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084c6:	81a3      	strh	r3, [r4, #12]
 80084c8:	6126      	str	r6, [r4, #16]
 80084ca:	6165      	str	r5, [r4, #20]
 80084cc:	444e      	add	r6, r9
 80084ce:	eba5 0509 	sub.w	r5, r5, r9
 80084d2:	6026      	str	r6, [r4, #0]
 80084d4:	60a5      	str	r5, [r4, #8]
 80084d6:	463e      	mov	r6, r7
 80084d8:	42be      	cmp	r6, r7
 80084da:	d900      	bls.n	80084de <__ssputs_r+0x72>
 80084dc:	463e      	mov	r6, r7
 80084de:	6820      	ldr	r0, [r4, #0]
 80084e0:	4632      	mov	r2, r6
 80084e2:	4641      	mov	r1, r8
 80084e4:	f000 fb66 	bl	8008bb4 <memmove>
 80084e8:	68a3      	ldr	r3, [r4, #8]
 80084ea:	1b9b      	subs	r3, r3, r6
 80084ec:	60a3      	str	r3, [r4, #8]
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	4433      	add	r3, r6
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	2000      	movs	r0, #0
 80084f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fa:	462a      	mov	r2, r5
 80084fc:	f000 fb99 	bl	8008c32 <_realloc_r>
 8008500:	4606      	mov	r6, r0
 8008502:	2800      	cmp	r0, #0
 8008504:	d1e0      	bne.n	80084c8 <__ssputs_r+0x5c>
 8008506:	6921      	ldr	r1, [r4, #16]
 8008508:	4650      	mov	r0, sl
 800850a:	f7ff feaf 	bl	800826c <_free_r>
 800850e:	230c      	movs	r3, #12
 8008510:	f8ca 3000 	str.w	r3, [sl]
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800851a:	81a3      	strh	r3, [r4, #12]
 800851c:	f04f 30ff 	mov.w	r0, #4294967295
 8008520:	e7e9      	b.n	80084f6 <__ssputs_r+0x8a>
	...

08008524 <_svfiprintf_r>:
 8008524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	4698      	mov	r8, r3
 800852a:	898b      	ldrh	r3, [r1, #12]
 800852c:	061b      	lsls	r3, r3, #24
 800852e:	b09d      	sub	sp, #116	@ 0x74
 8008530:	4607      	mov	r7, r0
 8008532:	460d      	mov	r5, r1
 8008534:	4614      	mov	r4, r2
 8008536:	d510      	bpl.n	800855a <_svfiprintf_r+0x36>
 8008538:	690b      	ldr	r3, [r1, #16]
 800853a:	b973      	cbnz	r3, 800855a <_svfiprintf_r+0x36>
 800853c:	2140      	movs	r1, #64	@ 0x40
 800853e:	f7ff ff09 	bl	8008354 <_malloc_r>
 8008542:	6028      	str	r0, [r5, #0]
 8008544:	6128      	str	r0, [r5, #16]
 8008546:	b930      	cbnz	r0, 8008556 <_svfiprintf_r+0x32>
 8008548:	230c      	movs	r3, #12
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	f04f 30ff 	mov.w	r0, #4294967295
 8008550:	b01d      	add	sp, #116	@ 0x74
 8008552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008556:	2340      	movs	r3, #64	@ 0x40
 8008558:	616b      	str	r3, [r5, #20]
 800855a:	2300      	movs	r3, #0
 800855c:	9309      	str	r3, [sp, #36]	@ 0x24
 800855e:	2320      	movs	r3, #32
 8008560:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008564:	f8cd 800c 	str.w	r8, [sp, #12]
 8008568:	2330      	movs	r3, #48	@ 0x30
 800856a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008708 <_svfiprintf_r+0x1e4>
 800856e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008572:	f04f 0901 	mov.w	r9, #1
 8008576:	4623      	mov	r3, r4
 8008578:	469a      	mov	sl, r3
 800857a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800857e:	b10a      	cbz	r2, 8008584 <_svfiprintf_r+0x60>
 8008580:	2a25      	cmp	r2, #37	@ 0x25
 8008582:	d1f9      	bne.n	8008578 <_svfiprintf_r+0x54>
 8008584:	ebba 0b04 	subs.w	fp, sl, r4
 8008588:	d00b      	beq.n	80085a2 <_svfiprintf_r+0x7e>
 800858a:	465b      	mov	r3, fp
 800858c:	4622      	mov	r2, r4
 800858e:	4629      	mov	r1, r5
 8008590:	4638      	mov	r0, r7
 8008592:	f7ff ff6b 	bl	800846c <__ssputs_r>
 8008596:	3001      	adds	r0, #1
 8008598:	f000 80a7 	beq.w	80086ea <_svfiprintf_r+0x1c6>
 800859c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800859e:	445a      	add	r2, fp
 80085a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80085a2:	f89a 3000 	ldrb.w	r3, [sl]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 809f 	beq.w	80086ea <_svfiprintf_r+0x1c6>
 80085ac:	2300      	movs	r3, #0
 80085ae:	f04f 32ff 	mov.w	r2, #4294967295
 80085b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085b6:	f10a 0a01 	add.w	sl, sl, #1
 80085ba:	9304      	str	r3, [sp, #16]
 80085bc:	9307      	str	r3, [sp, #28]
 80085be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80085c4:	4654      	mov	r4, sl
 80085c6:	2205      	movs	r2, #5
 80085c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085cc:	484e      	ldr	r0, [pc, #312]	@ (8008708 <_svfiprintf_r+0x1e4>)
 80085ce:	f7f7 fe3f 	bl	8000250 <memchr>
 80085d2:	9a04      	ldr	r2, [sp, #16]
 80085d4:	b9d8      	cbnz	r0, 800860e <_svfiprintf_r+0xea>
 80085d6:	06d0      	lsls	r0, r2, #27
 80085d8:	bf44      	itt	mi
 80085da:	2320      	movmi	r3, #32
 80085dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085e0:	0711      	lsls	r1, r2, #28
 80085e2:	bf44      	itt	mi
 80085e4:	232b      	movmi	r3, #43	@ 0x2b
 80085e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085ea:	f89a 3000 	ldrb.w	r3, [sl]
 80085ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80085f0:	d015      	beq.n	800861e <_svfiprintf_r+0xfa>
 80085f2:	9a07      	ldr	r2, [sp, #28]
 80085f4:	4654      	mov	r4, sl
 80085f6:	2000      	movs	r0, #0
 80085f8:	f04f 0c0a 	mov.w	ip, #10
 80085fc:	4621      	mov	r1, r4
 80085fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008602:	3b30      	subs	r3, #48	@ 0x30
 8008604:	2b09      	cmp	r3, #9
 8008606:	d94b      	bls.n	80086a0 <_svfiprintf_r+0x17c>
 8008608:	b1b0      	cbz	r0, 8008638 <_svfiprintf_r+0x114>
 800860a:	9207      	str	r2, [sp, #28]
 800860c:	e014      	b.n	8008638 <_svfiprintf_r+0x114>
 800860e:	eba0 0308 	sub.w	r3, r0, r8
 8008612:	fa09 f303 	lsl.w	r3, r9, r3
 8008616:	4313      	orrs	r3, r2
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	46a2      	mov	sl, r4
 800861c:	e7d2      	b.n	80085c4 <_svfiprintf_r+0xa0>
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	1d19      	adds	r1, r3, #4
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	9103      	str	r1, [sp, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	bfbb      	ittet	lt
 800862a:	425b      	neglt	r3, r3
 800862c:	f042 0202 	orrlt.w	r2, r2, #2
 8008630:	9307      	strge	r3, [sp, #28]
 8008632:	9307      	strlt	r3, [sp, #28]
 8008634:	bfb8      	it	lt
 8008636:	9204      	strlt	r2, [sp, #16]
 8008638:	7823      	ldrb	r3, [r4, #0]
 800863a:	2b2e      	cmp	r3, #46	@ 0x2e
 800863c:	d10a      	bne.n	8008654 <_svfiprintf_r+0x130>
 800863e:	7863      	ldrb	r3, [r4, #1]
 8008640:	2b2a      	cmp	r3, #42	@ 0x2a
 8008642:	d132      	bne.n	80086aa <_svfiprintf_r+0x186>
 8008644:	9b03      	ldr	r3, [sp, #12]
 8008646:	1d1a      	adds	r2, r3, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	9203      	str	r2, [sp, #12]
 800864c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008650:	3402      	adds	r4, #2
 8008652:	9305      	str	r3, [sp, #20]
 8008654:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008718 <_svfiprintf_r+0x1f4>
 8008658:	7821      	ldrb	r1, [r4, #0]
 800865a:	2203      	movs	r2, #3
 800865c:	4650      	mov	r0, sl
 800865e:	f7f7 fdf7 	bl	8000250 <memchr>
 8008662:	b138      	cbz	r0, 8008674 <_svfiprintf_r+0x150>
 8008664:	9b04      	ldr	r3, [sp, #16]
 8008666:	eba0 000a 	sub.w	r0, r0, sl
 800866a:	2240      	movs	r2, #64	@ 0x40
 800866c:	4082      	lsls	r2, r0
 800866e:	4313      	orrs	r3, r2
 8008670:	3401      	adds	r4, #1
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008678:	4824      	ldr	r0, [pc, #144]	@ (800870c <_svfiprintf_r+0x1e8>)
 800867a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800867e:	2206      	movs	r2, #6
 8008680:	f7f7 fde6 	bl	8000250 <memchr>
 8008684:	2800      	cmp	r0, #0
 8008686:	d036      	beq.n	80086f6 <_svfiprintf_r+0x1d2>
 8008688:	4b21      	ldr	r3, [pc, #132]	@ (8008710 <_svfiprintf_r+0x1ec>)
 800868a:	bb1b      	cbnz	r3, 80086d4 <_svfiprintf_r+0x1b0>
 800868c:	9b03      	ldr	r3, [sp, #12]
 800868e:	3307      	adds	r3, #7
 8008690:	f023 0307 	bic.w	r3, r3, #7
 8008694:	3308      	adds	r3, #8
 8008696:	9303      	str	r3, [sp, #12]
 8008698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800869a:	4433      	add	r3, r6
 800869c:	9309      	str	r3, [sp, #36]	@ 0x24
 800869e:	e76a      	b.n	8008576 <_svfiprintf_r+0x52>
 80086a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80086a4:	460c      	mov	r4, r1
 80086a6:	2001      	movs	r0, #1
 80086a8:	e7a8      	b.n	80085fc <_svfiprintf_r+0xd8>
 80086aa:	2300      	movs	r3, #0
 80086ac:	3401      	adds	r4, #1
 80086ae:	9305      	str	r3, [sp, #20]
 80086b0:	4619      	mov	r1, r3
 80086b2:	f04f 0c0a 	mov.w	ip, #10
 80086b6:	4620      	mov	r0, r4
 80086b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086bc:	3a30      	subs	r2, #48	@ 0x30
 80086be:	2a09      	cmp	r2, #9
 80086c0:	d903      	bls.n	80086ca <_svfiprintf_r+0x1a6>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0c6      	beq.n	8008654 <_svfiprintf_r+0x130>
 80086c6:	9105      	str	r1, [sp, #20]
 80086c8:	e7c4      	b.n	8008654 <_svfiprintf_r+0x130>
 80086ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80086ce:	4604      	mov	r4, r0
 80086d0:	2301      	movs	r3, #1
 80086d2:	e7f0      	b.n	80086b6 <_svfiprintf_r+0x192>
 80086d4:	ab03      	add	r3, sp, #12
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	462a      	mov	r2, r5
 80086da:	4b0e      	ldr	r3, [pc, #56]	@ (8008714 <_svfiprintf_r+0x1f0>)
 80086dc:	a904      	add	r1, sp, #16
 80086de:	4638      	mov	r0, r7
 80086e0:	f3af 8000 	nop.w
 80086e4:	1c42      	adds	r2, r0, #1
 80086e6:	4606      	mov	r6, r0
 80086e8:	d1d6      	bne.n	8008698 <_svfiprintf_r+0x174>
 80086ea:	89ab      	ldrh	r3, [r5, #12]
 80086ec:	065b      	lsls	r3, r3, #25
 80086ee:	f53f af2d 	bmi.w	800854c <_svfiprintf_r+0x28>
 80086f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086f4:	e72c      	b.n	8008550 <_svfiprintf_r+0x2c>
 80086f6:	ab03      	add	r3, sp, #12
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	462a      	mov	r2, r5
 80086fc:	4b05      	ldr	r3, [pc, #20]	@ (8008714 <_svfiprintf_r+0x1f0>)
 80086fe:	a904      	add	r1, sp, #16
 8008700:	4638      	mov	r0, r7
 8008702:	f000 f879 	bl	80087f8 <_printf_i>
 8008706:	e7ed      	b.n	80086e4 <_svfiprintf_r+0x1c0>
 8008708:	0800945a 	.word	0x0800945a
 800870c:	08009464 	.word	0x08009464
 8008710:	00000000 	.word	0x00000000
 8008714:	0800846d 	.word	0x0800846d
 8008718:	08009460 	.word	0x08009460

0800871c <_printf_common>:
 800871c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008720:	4616      	mov	r6, r2
 8008722:	4698      	mov	r8, r3
 8008724:	688a      	ldr	r2, [r1, #8]
 8008726:	690b      	ldr	r3, [r1, #16]
 8008728:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800872c:	4293      	cmp	r3, r2
 800872e:	bfb8      	it	lt
 8008730:	4613      	movlt	r3, r2
 8008732:	6033      	str	r3, [r6, #0]
 8008734:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008738:	4607      	mov	r7, r0
 800873a:	460c      	mov	r4, r1
 800873c:	b10a      	cbz	r2, 8008742 <_printf_common+0x26>
 800873e:	3301      	adds	r3, #1
 8008740:	6033      	str	r3, [r6, #0]
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	0699      	lsls	r1, r3, #26
 8008746:	bf42      	ittt	mi
 8008748:	6833      	ldrmi	r3, [r6, #0]
 800874a:	3302      	addmi	r3, #2
 800874c:	6033      	strmi	r3, [r6, #0]
 800874e:	6825      	ldr	r5, [r4, #0]
 8008750:	f015 0506 	ands.w	r5, r5, #6
 8008754:	d106      	bne.n	8008764 <_printf_common+0x48>
 8008756:	f104 0a19 	add.w	sl, r4, #25
 800875a:	68e3      	ldr	r3, [r4, #12]
 800875c:	6832      	ldr	r2, [r6, #0]
 800875e:	1a9b      	subs	r3, r3, r2
 8008760:	42ab      	cmp	r3, r5
 8008762:	dc26      	bgt.n	80087b2 <_printf_common+0x96>
 8008764:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008768:	6822      	ldr	r2, [r4, #0]
 800876a:	3b00      	subs	r3, #0
 800876c:	bf18      	it	ne
 800876e:	2301      	movne	r3, #1
 8008770:	0692      	lsls	r2, r2, #26
 8008772:	d42b      	bmi.n	80087cc <_printf_common+0xb0>
 8008774:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008778:	4641      	mov	r1, r8
 800877a:	4638      	mov	r0, r7
 800877c:	47c8      	blx	r9
 800877e:	3001      	adds	r0, #1
 8008780:	d01e      	beq.n	80087c0 <_printf_common+0xa4>
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	6922      	ldr	r2, [r4, #16]
 8008786:	f003 0306 	and.w	r3, r3, #6
 800878a:	2b04      	cmp	r3, #4
 800878c:	bf02      	ittt	eq
 800878e:	68e5      	ldreq	r5, [r4, #12]
 8008790:	6833      	ldreq	r3, [r6, #0]
 8008792:	1aed      	subeq	r5, r5, r3
 8008794:	68a3      	ldr	r3, [r4, #8]
 8008796:	bf0c      	ite	eq
 8008798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800879c:	2500      	movne	r5, #0
 800879e:	4293      	cmp	r3, r2
 80087a0:	bfc4      	itt	gt
 80087a2:	1a9b      	subgt	r3, r3, r2
 80087a4:	18ed      	addgt	r5, r5, r3
 80087a6:	2600      	movs	r6, #0
 80087a8:	341a      	adds	r4, #26
 80087aa:	42b5      	cmp	r5, r6
 80087ac:	d11a      	bne.n	80087e4 <_printf_common+0xc8>
 80087ae:	2000      	movs	r0, #0
 80087b0:	e008      	b.n	80087c4 <_printf_common+0xa8>
 80087b2:	2301      	movs	r3, #1
 80087b4:	4652      	mov	r2, sl
 80087b6:	4641      	mov	r1, r8
 80087b8:	4638      	mov	r0, r7
 80087ba:	47c8      	blx	r9
 80087bc:	3001      	adds	r0, #1
 80087be:	d103      	bne.n	80087c8 <_printf_common+0xac>
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295
 80087c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c8:	3501      	adds	r5, #1
 80087ca:	e7c6      	b.n	800875a <_printf_common+0x3e>
 80087cc:	18e1      	adds	r1, r4, r3
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	2030      	movs	r0, #48	@ 0x30
 80087d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087d6:	4422      	add	r2, r4
 80087d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087e0:	3302      	adds	r3, #2
 80087e2:	e7c7      	b.n	8008774 <_printf_common+0x58>
 80087e4:	2301      	movs	r3, #1
 80087e6:	4622      	mov	r2, r4
 80087e8:	4641      	mov	r1, r8
 80087ea:	4638      	mov	r0, r7
 80087ec:	47c8      	blx	r9
 80087ee:	3001      	adds	r0, #1
 80087f0:	d0e6      	beq.n	80087c0 <_printf_common+0xa4>
 80087f2:	3601      	adds	r6, #1
 80087f4:	e7d9      	b.n	80087aa <_printf_common+0x8e>
	...

080087f8 <_printf_i>:
 80087f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087fc:	7e0f      	ldrb	r7, [r1, #24]
 80087fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008800:	2f78      	cmp	r7, #120	@ 0x78
 8008802:	4691      	mov	r9, r2
 8008804:	4680      	mov	r8, r0
 8008806:	460c      	mov	r4, r1
 8008808:	469a      	mov	sl, r3
 800880a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800880e:	d807      	bhi.n	8008820 <_printf_i+0x28>
 8008810:	2f62      	cmp	r7, #98	@ 0x62
 8008812:	d80a      	bhi.n	800882a <_printf_i+0x32>
 8008814:	2f00      	cmp	r7, #0
 8008816:	f000 80d2 	beq.w	80089be <_printf_i+0x1c6>
 800881a:	2f58      	cmp	r7, #88	@ 0x58
 800881c:	f000 80b9 	beq.w	8008992 <_printf_i+0x19a>
 8008820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008824:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008828:	e03a      	b.n	80088a0 <_printf_i+0xa8>
 800882a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800882e:	2b15      	cmp	r3, #21
 8008830:	d8f6      	bhi.n	8008820 <_printf_i+0x28>
 8008832:	a101      	add	r1, pc, #4	@ (adr r1, 8008838 <_printf_i+0x40>)
 8008834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008838:	08008891 	.word	0x08008891
 800883c:	080088a5 	.word	0x080088a5
 8008840:	08008821 	.word	0x08008821
 8008844:	08008821 	.word	0x08008821
 8008848:	08008821 	.word	0x08008821
 800884c:	08008821 	.word	0x08008821
 8008850:	080088a5 	.word	0x080088a5
 8008854:	08008821 	.word	0x08008821
 8008858:	08008821 	.word	0x08008821
 800885c:	08008821 	.word	0x08008821
 8008860:	08008821 	.word	0x08008821
 8008864:	080089a5 	.word	0x080089a5
 8008868:	080088cf 	.word	0x080088cf
 800886c:	0800895f 	.word	0x0800895f
 8008870:	08008821 	.word	0x08008821
 8008874:	08008821 	.word	0x08008821
 8008878:	080089c7 	.word	0x080089c7
 800887c:	08008821 	.word	0x08008821
 8008880:	080088cf 	.word	0x080088cf
 8008884:	08008821 	.word	0x08008821
 8008888:	08008821 	.word	0x08008821
 800888c:	08008967 	.word	0x08008967
 8008890:	6833      	ldr	r3, [r6, #0]
 8008892:	1d1a      	adds	r2, r3, #4
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6032      	str	r2, [r6, #0]
 8008898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800889c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088a0:	2301      	movs	r3, #1
 80088a2:	e09d      	b.n	80089e0 <_printf_i+0x1e8>
 80088a4:	6833      	ldr	r3, [r6, #0]
 80088a6:	6820      	ldr	r0, [r4, #0]
 80088a8:	1d19      	adds	r1, r3, #4
 80088aa:	6031      	str	r1, [r6, #0]
 80088ac:	0606      	lsls	r6, r0, #24
 80088ae:	d501      	bpl.n	80088b4 <_printf_i+0xbc>
 80088b0:	681d      	ldr	r5, [r3, #0]
 80088b2:	e003      	b.n	80088bc <_printf_i+0xc4>
 80088b4:	0645      	lsls	r5, r0, #25
 80088b6:	d5fb      	bpl.n	80088b0 <_printf_i+0xb8>
 80088b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088bc:	2d00      	cmp	r5, #0
 80088be:	da03      	bge.n	80088c8 <_printf_i+0xd0>
 80088c0:	232d      	movs	r3, #45	@ 0x2d
 80088c2:	426d      	negs	r5, r5
 80088c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088c8:	4859      	ldr	r0, [pc, #356]	@ (8008a30 <_printf_i+0x238>)
 80088ca:	230a      	movs	r3, #10
 80088cc:	e011      	b.n	80088f2 <_printf_i+0xfa>
 80088ce:	6821      	ldr	r1, [r4, #0]
 80088d0:	6833      	ldr	r3, [r6, #0]
 80088d2:	0608      	lsls	r0, r1, #24
 80088d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80088d8:	d402      	bmi.n	80088e0 <_printf_i+0xe8>
 80088da:	0649      	lsls	r1, r1, #25
 80088dc:	bf48      	it	mi
 80088de:	b2ad      	uxthmi	r5, r5
 80088e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80088e2:	4853      	ldr	r0, [pc, #332]	@ (8008a30 <_printf_i+0x238>)
 80088e4:	6033      	str	r3, [r6, #0]
 80088e6:	bf14      	ite	ne
 80088e8:	230a      	movne	r3, #10
 80088ea:	2308      	moveq	r3, #8
 80088ec:	2100      	movs	r1, #0
 80088ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088f2:	6866      	ldr	r6, [r4, #4]
 80088f4:	60a6      	str	r6, [r4, #8]
 80088f6:	2e00      	cmp	r6, #0
 80088f8:	bfa2      	ittt	ge
 80088fa:	6821      	ldrge	r1, [r4, #0]
 80088fc:	f021 0104 	bicge.w	r1, r1, #4
 8008900:	6021      	strge	r1, [r4, #0]
 8008902:	b90d      	cbnz	r5, 8008908 <_printf_i+0x110>
 8008904:	2e00      	cmp	r6, #0
 8008906:	d04b      	beq.n	80089a0 <_printf_i+0x1a8>
 8008908:	4616      	mov	r6, r2
 800890a:	fbb5 f1f3 	udiv	r1, r5, r3
 800890e:	fb03 5711 	mls	r7, r3, r1, r5
 8008912:	5dc7      	ldrb	r7, [r0, r7]
 8008914:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008918:	462f      	mov	r7, r5
 800891a:	42bb      	cmp	r3, r7
 800891c:	460d      	mov	r5, r1
 800891e:	d9f4      	bls.n	800890a <_printf_i+0x112>
 8008920:	2b08      	cmp	r3, #8
 8008922:	d10b      	bne.n	800893c <_printf_i+0x144>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	07df      	lsls	r7, r3, #31
 8008928:	d508      	bpl.n	800893c <_printf_i+0x144>
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	6861      	ldr	r1, [r4, #4]
 800892e:	4299      	cmp	r1, r3
 8008930:	bfde      	ittt	le
 8008932:	2330      	movle	r3, #48	@ 0x30
 8008934:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008938:	f106 36ff 	addle.w	r6, r6, #4294967295
 800893c:	1b92      	subs	r2, r2, r6
 800893e:	6122      	str	r2, [r4, #16]
 8008940:	f8cd a000 	str.w	sl, [sp]
 8008944:	464b      	mov	r3, r9
 8008946:	aa03      	add	r2, sp, #12
 8008948:	4621      	mov	r1, r4
 800894a:	4640      	mov	r0, r8
 800894c:	f7ff fee6 	bl	800871c <_printf_common>
 8008950:	3001      	adds	r0, #1
 8008952:	d14a      	bne.n	80089ea <_printf_i+0x1f2>
 8008954:	f04f 30ff 	mov.w	r0, #4294967295
 8008958:	b004      	add	sp, #16
 800895a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	f043 0320 	orr.w	r3, r3, #32
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	4833      	ldr	r0, [pc, #204]	@ (8008a34 <_printf_i+0x23c>)
 8008968:	2778      	movs	r7, #120	@ 0x78
 800896a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	6831      	ldr	r1, [r6, #0]
 8008972:	061f      	lsls	r7, r3, #24
 8008974:	f851 5b04 	ldr.w	r5, [r1], #4
 8008978:	d402      	bmi.n	8008980 <_printf_i+0x188>
 800897a:	065f      	lsls	r7, r3, #25
 800897c:	bf48      	it	mi
 800897e:	b2ad      	uxthmi	r5, r5
 8008980:	6031      	str	r1, [r6, #0]
 8008982:	07d9      	lsls	r1, r3, #31
 8008984:	bf44      	itt	mi
 8008986:	f043 0320 	orrmi.w	r3, r3, #32
 800898a:	6023      	strmi	r3, [r4, #0]
 800898c:	b11d      	cbz	r5, 8008996 <_printf_i+0x19e>
 800898e:	2310      	movs	r3, #16
 8008990:	e7ac      	b.n	80088ec <_printf_i+0xf4>
 8008992:	4827      	ldr	r0, [pc, #156]	@ (8008a30 <_printf_i+0x238>)
 8008994:	e7e9      	b.n	800896a <_printf_i+0x172>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	f023 0320 	bic.w	r3, r3, #32
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	e7f6      	b.n	800898e <_printf_i+0x196>
 80089a0:	4616      	mov	r6, r2
 80089a2:	e7bd      	b.n	8008920 <_printf_i+0x128>
 80089a4:	6833      	ldr	r3, [r6, #0]
 80089a6:	6825      	ldr	r5, [r4, #0]
 80089a8:	6961      	ldr	r1, [r4, #20]
 80089aa:	1d18      	adds	r0, r3, #4
 80089ac:	6030      	str	r0, [r6, #0]
 80089ae:	062e      	lsls	r6, r5, #24
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	d501      	bpl.n	80089b8 <_printf_i+0x1c0>
 80089b4:	6019      	str	r1, [r3, #0]
 80089b6:	e002      	b.n	80089be <_printf_i+0x1c6>
 80089b8:	0668      	lsls	r0, r5, #25
 80089ba:	d5fb      	bpl.n	80089b4 <_printf_i+0x1bc>
 80089bc:	8019      	strh	r1, [r3, #0]
 80089be:	2300      	movs	r3, #0
 80089c0:	6123      	str	r3, [r4, #16]
 80089c2:	4616      	mov	r6, r2
 80089c4:	e7bc      	b.n	8008940 <_printf_i+0x148>
 80089c6:	6833      	ldr	r3, [r6, #0]
 80089c8:	1d1a      	adds	r2, r3, #4
 80089ca:	6032      	str	r2, [r6, #0]
 80089cc:	681e      	ldr	r6, [r3, #0]
 80089ce:	6862      	ldr	r2, [r4, #4]
 80089d0:	2100      	movs	r1, #0
 80089d2:	4630      	mov	r0, r6
 80089d4:	f7f7 fc3c 	bl	8000250 <memchr>
 80089d8:	b108      	cbz	r0, 80089de <_printf_i+0x1e6>
 80089da:	1b80      	subs	r0, r0, r6
 80089dc:	6060      	str	r0, [r4, #4]
 80089de:	6863      	ldr	r3, [r4, #4]
 80089e0:	6123      	str	r3, [r4, #16]
 80089e2:	2300      	movs	r3, #0
 80089e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089e8:	e7aa      	b.n	8008940 <_printf_i+0x148>
 80089ea:	6923      	ldr	r3, [r4, #16]
 80089ec:	4632      	mov	r2, r6
 80089ee:	4649      	mov	r1, r9
 80089f0:	4640      	mov	r0, r8
 80089f2:	47d0      	blx	sl
 80089f4:	3001      	adds	r0, #1
 80089f6:	d0ad      	beq.n	8008954 <_printf_i+0x15c>
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	079b      	lsls	r3, r3, #30
 80089fc:	d413      	bmi.n	8008a26 <_printf_i+0x22e>
 80089fe:	68e0      	ldr	r0, [r4, #12]
 8008a00:	9b03      	ldr	r3, [sp, #12]
 8008a02:	4298      	cmp	r0, r3
 8008a04:	bfb8      	it	lt
 8008a06:	4618      	movlt	r0, r3
 8008a08:	e7a6      	b.n	8008958 <_printf_i+0x160>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	4632      	mov	r2, r6
 8008a0e:	4649      	mov	r1, r9
 8008a10:	4640      	mov	r0, r8
 8008a12:	47d0      	blx	sl
 8008a14:	3001      	adds	r0, #1
 8008a16:	d09d      	beq.n	8008954 <_printf_i+0x15c>
 8008a18:	3501      	adds	r5, #1
 8008a1a:	68e3      	ldr	r3, [r4, #12]
 8008a1c:	9903      	ldr	r1, [sp, #12]
 8008a1e:	1a5b      	subs	r3, r3, r1
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	dcf2      	bgt.n	8008a0a <_printf_i+0x212>
 8008a24:	e7eb      	b.n	80089fe <_printf_i+0x206>
 8008a26:	2500      	movs	r5, #0
 8008a28:	f104 0619 	add.w	r6, r4, #25
 8008a2c:	e7f5      	b.n	8008a1a <_printf_i+0x222>
 8008a2e:	bf00      	nop
 8008a30:	0800946b 	.word	0x0800946b
 8008a34:	0800947c 	.word	0x0800947c

08008a38 <__sflush_r>:
 8008a38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a40:	0716      	lsls	r6, r2, #28
 8008a42:	4605      	mov	r5, r0
 8008a44:	460c      	mov	r4, r1
 8008a46:	d454      	bmi.n	8008af2 <__sflush_r+0xba>
 8008a48:	684b      	ldr	r3, [r1, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	dc02      	bgt.n	8008a54 <__sflush_r+0x1c>
 8008a4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	dd48      	ble.n	8008ae6 <__sflush_r+0xae>
 8008a54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a56:	2e00      	cmp	r6, #0
 8008a58:	d045      	beq.n	8008ae6 <__sflush_r+0xae>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a60:	682f      	ldr	r7, [r5, #0]
 8008a62:	6a21      	ldr	r1, [r4, #32]
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	d030      	beq.n	8008aca <__sflush_r+0x92>
 8008a68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	0759      	lsls	r1, r3, #29
 8008a6e:	d505      	bpl.n	8008a7c <__sflush_r+0x44>
 8008a70:	6863      	ldr	r3, [r4, #4]
 8008a72:	1ad2      	subs	r2, r2, r3
 8008a74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a76:	b10b      	cbz	r3, 8008a7c <__sflush_r+0x44>
 8008a78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a7a:	1ad2      	subs	r2, r2, r3
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a80:	6a21      	ldr	r1, [r4, #32]
 8008a82:	4628      	mov	r0, r5
 8008a84:	47b0      	blx	r6
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	d106      	bne.n	8008a9a <__sflush_r+0x62>
 8008a8c:	6829      	ldr	r1, [r5, #0]
 8008a8e:	291d      	cmp	r1, #29
 8008a90:	d82b      	bhi.n	8008aea <__sflush_r+0xb2>
 8008a92:	4a2a      	ldr	r2, [pc, #168]	@ (8008b3c <__sflush_r+0x104>)
 8008a94:	410a      	asrs	r2, r1
 8008a96:	07d6      	lsls	r6, r2, #31
 8008a98:	d427      	bmi.n	8008aea <__sflush_r+0xb2>
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	6062      	str	r2, [r4, #4]
 8008a9e:	04d9      	lsls	r1, r3, #19
 8008aa0:	6922      	ldr	r2, [r4, #16]
 8008aa2:	6022      	str	r2, [r4, #0]
 8008aa4:	d504      	bpl.n	8008ab0 <__sflush_r+0x78>
 8008aa6:	1c42      	adds	r2, r0, #1
 8008aa8:	d101      	bne.n	8008aae <__sflush_r+0x76>
 8008aaa:	682b      	ldr	r3, [r5, #0]
 8008aac:	b903      	cbnz	r3, 8008ab0 <__sflush_r+0x78>
 8008aae:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ab2:	602f      	str	r7, [r5, #0]
 8008ab4:	b1b9      	cbz	r1, 8008ae6 <__sflush_r+0xae>
 8008ab6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008aba:	4299      	cmp	r1, r3
 8008abc:	d002      	beq.n	8008ac4 <__sflush_r+0x8c>
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f7ff fbd4 	bl	800826c <_free_r>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ac8:	e00d      	b.n	8008ae6 <__sflush_r+0xae>
 8008aca:	2301      	movs	r3, #1
 8008acc:	4628      	mov	r0, r5
 8008ace:	47b0      	blx	r6
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	1c50      	adds	r0, r2, #1
 8008ad4:	d1c9      	bne.n	8008a6a <__sflush_r+0x32>
 8008ad6:	682b      	ldr	r3, [r5, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0c6      	beq.n	8008a6a <__sflush_r+0x32>
 8008adc:	2b1d      	cmp	r3, #29
 8008ade:	d001      	beq.n	8008ae4 <__sflush_r+0xac>
 8008ae0:	2b16      	cmp	r3, #22
 8008ae2:	d11e      	bne.n	8008b22 <__sflush_r+0xea>
 8008ae4:	602f      	str	r7, [r5, #0]
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	e022      	b.n	8008b30 <__sflush_r+0xf8>
 8008aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aee:	b21b      	sxth	r3, r3
 8008af0:	e01b      	b.n	8008b2a <__sflush_r+0xf2>
 8008af2:	690f      	ldr	r7, [r1, #16]
 8008af4:	2f00      	cmp	r7, #0
 8008af6:	d0f6      	beq.n	8008ae6 <__sflush_r+0xae>
 8008af8:	0793      	lsls	r3, r2, #30
 8008afa:	680e      	ldr	r6, [r1, #0]
 8008afc:	bf08      	it	eq
 8008afe:	694b      	ldreq	r3, [r1, #20]
 8008b00:	600f      	str	r7, [r1, #0]
 8008b02:	bf18      	it	ne
 8008b04:	2300      	movne	r3, #0
 8008b06:	eba6 0807 	sub.w	r8, r6, r7
 8008b0a:	608b      	str	r3, [r1, #8]
 8008b0c:	f1b8 0f00 	cmp.w	r8, #0
 8008b10:	dde9      	ble.n	8008ae6 <__sflush_r+0xae>
 8008b12:	6a21      	ldr	r1, [r4, #32]
 8008b14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b16:	4643      	mov	r3, r8
 8008b18:	463a      	mov	r2, r7
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	47b0      	blx	r6
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	dc08      	bgt.n	8008b34 <__sflush_r+0xfc>
 8008b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b2a:	81a3      	strh	r3, [r4, #12]
 8008b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b34:	4407      	add	r7, r0
 8008b36:	eba8 0800 	sub.w	r8, r8, r0
 8008b3a:	e7e7      	b.n	8008b0c <__sflush_r+0xd4>
 8008b3c:	dfbffffe 	.word	0xdfbffffe

08008b40 <_fflush_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	690b      	ldr	r3, [r1, #16]
 8008b44:	4605      	mov	r5, r0
 8008b46:	460c      	mov	r4, r1
 8008b48:	b913      	cbnz	r3, 8008b50 <_fflush_r+0x10>
 8008b4a:	2500      	movs	r5, #0
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	bd38      	pop	{r3, r4, r5, pc}
 8008b50:	b118      	cbz	r0, 8008b5a <_fflush_r+0x1a>
 8008b52:	6a03      	ldr	r3, [r0, #32]
 8008b54:	b90b      	cbnz	r3, 8008b5a <_fflush_r+0x1a>
 8008b56:	f7ff f9e5 	bl	8007f24 <__sinit>
 8008b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d0f3      	beq.n	8008b4a <_fflush_r+0xa>
 8008b62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b64:	07d0      	lsls	r0, r2, #31
 8008b66:	d404      	bmi.n	8008b72 <_fflush_r+0x32>
 8008b68:	0599      	lsls	r1, r3, #22
 8008b6a:	d402      	bmi.n	8008b72 <_fflush_r+0x32>
 8008b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b6e:	f7ff fb5c 	bl	800822a <__retarget_lock_acquire_recursive>
 8008b72:	4628      	mov	r0, r5
 8008b74:	4621      	mov	r1, r4
 8008b76:	f7ff ff5f 	bl	8008a38 <__sflush_r>
 8008b7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b7c:	07da      	lsls	r2, r3, #31
 8008b7e:	4605      	mov	r5, r0
 8008b80:	d4e4      	bmi.n	8008b4c <_fflush_r+0xc>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	059b      	lsls	r3, r3, #22
 8008b86:	d4e1      	bmi.n	8008b4c <_fflush_r+0xc>
 8008b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b8a:	f7ff fb4f 	bl	800822c <__retarget_lock_release_recursive>
 8008b8e:	e7dd      	b.n	8008b4c <_fflush_r+0xc>

08008b90 <fiprintf>:
 8008b90:	b40e      	push	{r1, r2, r3}
 8008b92:	b503      	push	{r0, r1, lr}
 8008b94:	4601      	mov	r1, r0
 8008b96:	ab03      	add	r3, sp, #12
 8008b98:	4805      	ldr	r0, [pc, #20]	@ (8008bb0 <fiprintf+0x20>)
 8008b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b9e:	6800      	ldr	r0, [r0, #0]
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	f000 f89d 	bl	8008ce0 <_vfiprintf_r>
 8008ba6:	b002      	add	sp, #8
 8008ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bac:	b003      	add	sp, #12
 8008bae:	4770      	bx	lr
 8008bb0:	200000d4 	.word	0x200000d4

08008bb4 <memmove>:
 8008bb4:	4288      	cmp	r0, r1
 8008bb6:	b510      	push	{r4, lr}
 8008bb8:	eb01 0402 	add.w	r4, r1, r2
 8008bbc:	d902      	bls.n	8008bc4 <memmove+0x10>
 8008bbe:	4284      	cmp	r4, r0
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	d807      	bhi.n	8008bd4 <memmove+0x20>
 8008bc4:	1e43      	subs	r3, r0, #1
 8008bc6:	42a1      	cmp	r1, r4
 8008bc8:	d008      	beq.n	8008bdc <memmove+0x28>
 8008bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bd2:	e7f8      	b.n	8008bc6 <memmove+0x12>
 8008bd4:	4402      	add	r2, r0
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	428a      	cmp	r2, r1
 8008bda:	d100      	bne.n	8008bde <memmove+0x2a>
 8008bdc:	bd10      	pop	{r4, pc}
 8008bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008be6:	e7f7      	b.n	8008bd8 <memmove+0x24>

08008be8 <_sbrk_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4d06      	ldr	r5, [pc, #24]	@ (8008c04 <_sbrk_r+0x1c>)
 8008bec:	2300      	movs	r3, #0
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4608      	mov	r0, r1
 8008bf2:	602b      	str	r3, [r5, #0]
 8008bf4:	f7f8 f972 	bl	8000edc <_sbrk>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d102      	bne.n	8008c02 <_sbrk_r+0x1a>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b103      	cbz	r3, 8008c02 <_sbrk_r+0x1a>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	20000634 	.word	0x20000634

08008c08 <memcpy>:
 8008c08:	440a      	add	r2, r1
 8008c0a:	4291      	cmp	r1, r2
 8008c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c10:	d100      	bne.n	8008c14 <memcpy+0xc>
 8008c12:	4770      	bx	lr
 8008c14:	b510      	push	{r4, lr}
 8008c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c1e:	4291      	cmp	r1, r2
 8008c20:	d1f9      	bne.n	8008c16 <memcpy+0xe>
 8008c22:	bd10      	pop	{r4, pc}

08008c24 <abort>:
 8008c24:	b508      	push	{r3, lr}
 8008c26:	2006      	movs	r0, #6
 8008c28:	f000 fa2e 	bl	8009088 <raise>
 8008c2c:	2001      	movs	r0, #1
 8008c2e:	f7f8 f8dd 	bl	8000dec <_exit>

08008c32 <_realloc_r>:
 8008c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c36:	4680      	mov	r8, r0
 8008c38:	4615      	mov	r5, r2
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	b921      	cbnz	r1, 8008c48 <_realloc_r+0x16>
 8008c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c42:	4611      	mov	r1, r2
 8008c44:	f7ff bb86 	b.w	8008354 <_malloc_r>
 8008c48:	b92a      	cbnz	r2, 8008c56 <_realloc_r+0x24>
 8008c4a:	f7ff fb0f 	bl	800826c <_free_r>
 8008c4e:	2400      	movs	r4, #0
 8008c50:	4620      	mov	r0, r4
 8008c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c56:	f000 fa33 	bl	80090c0 <_malloc_usable_size_r>
 8008c5a:	4285      	cmp	r5, r0
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	d802      	bhi.n	8008c66 <_realloc_r+0x34>
 8008c60:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c64:	d8f4      	bhi.n	8008c50 <_realloc_r+0x1e>
 8008c66:	4629      	mov	r1, r5
 8008c68:	4640      	mov	r0, r8
 8008c6a:	f7ff fb73 	bl	8008354 <_malloc_r>
 8008c6e:	4607      	mov	r7, r0
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d0ec      	beq.n	8008c4e <_realloc_r+0x1c>
 8008c74:	42b5      	cmp	r5, r6
 8008c76:	462a      	mov	r2, r5
 8008c78:	4621      	mov	r1, r4
 8008c7a:	bf28      	it	cs
 8008c7c:	4632      	movcs	r2, r6
 8008c7e:	f7ff ffc3 	bl	8008c08 <memcpy>
 8008c82:	4621      	mov	r1, r4
 8008c84:	4640      	mov	r0, r8
 8008c86:	f7ff faf1 	bl	800826c <_free_r>
 8008c8a:	463c      	mov	r4, r7
 8008c8c:	e7e0      	b.n	8008c50 <_realloc_r+0x1e>

08008c8e <__sfputc_r>:
 8008c8e:	6893      	ldr	r3, [r2, #8]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	b410      	push	{r4}
 8008c96:	6093      	str	r3, [r2, #8]
 8008c98:	da08      	bge.n	8008cac <__sfputc_r+0x1e>
 8008c9a:	6994      	ldr	r4, [r2, #24]
 8008c9c:	42a3      	cmp	r3, r4
 8008c9e:	db01      	blt.n	8008ca4 <__sfputc_r+0x16>
 8008ca0:	290a      	cmp	r1, #10
 8008ca2:	d103      	bne.n	8008cac <__sfputc_r+0x1e>
 8008ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ca8:	f000 b932 	b.w	8008f10 <__swbuf_r>
 8008cac:	6813      	ldr	r3, [r2, #0]
 8008cae:	1c58      	adds	r0, r3, #1
 8008cb0:	6010      	str	r0, [r2, #0]
 8008cb2:	7019      	strb	r1, [r3, #0]
 8008cb4:	4608      	mov	r0, r1
 8008cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <__sfputs_r>:
 8008cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	460f      	mov	r7, r1
 8008cc2:	4614      	mov	r4, r2
 8008cc4:	18d5      	adds	r5, r2, r3
 8008cc6:	42ac      	cmp	r4, r5
 8008cc8:	d101      	bne.n	8008cce <__sfputs_r+0x12>
 8008cca:	2000      	movs	r0, #0
 8008ccc:	e007      	b.n	8008cde <__sfputs_r+0x22>
 8008cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd2:	463a      	mov	r2, r7
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f7ff ffda 	bl	8008c8e <__sfputc_r>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d1f3      	bne.n	8008cc6 <__sfputs_r+0xa>
 8008cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ce0 <_vfiprintf_r>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	460d      	mov	r5, r1
 8008ce6:	b09d      	sub	sp, #116	@ 0x74
 8008ce8:	4614      	mov	r4, r2
 8008cea:	4698      	mov	r8, r3
 8008cec:	4606      	mov	r6, r0
 8008cee:	b118      	cbz	r0, 8008cf8 <_vfiprintf_r+0x18>
 8008cf0:	6a03      	ldr	r3, [r0, #32]
 8008cf2:	b90b      	cbnz	r3, 8008cf8 <_vfiprintf_r+0x18>
 8008cf4:	f7ff f916 	bl	8007f24 <__sinit>
 8008cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cfa:	07d9      	lsls	r1, r3, #31
 8008cfc:	d405      	bmi.n	8008d0a <_vfiprintf_r+0x2a>
 8008cfe:	89ab      	ldrh	r3, [r5, #12]
 8008d00:	059a      	lsls	r2, r3, #22
 8008d02:	d402      	bmi.n	8008d0a <_vfiprintf_r+0x2a>
 8008d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d06:	f7ff fa90 	bl	800822a <__retarget_lock_acquire_recursive>
 8008d0a:	89ab      	ldrh	r3, [r5, #12]
 8008d0c:	071b      	lsls	r3, r3, #28
 8008d0e:	d501      	bpl.n	8008d14 <_vfiprintf_r+0x34>
 8008d10:	692b      	ldr	r3, [r5, #16]
 8008d12:	b99b      	cbnz	r3, 8008d3c <_vfiprintf_r+0x5c>
 8008d14:	4629      	mov	r1, r5
 8008d16:	4630      	mov	r0, r6
 8008d18:	f000 f938 	bl	8008f8c <__swsetup_r>
 8008d1c:	b170      	cbz	r0, 8008d3c <_vfiprintf_r+0x5c>
 8008d1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d20:	07dc      	lsls	r4, r3, #31
 8008d22:	d504      	bpl.n	8008d2e <_vfiprintf_r+0x4e>
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	b01d      	add	sp, #116	@ 0x74
 8008d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2e:	89ab      	ldrh	r3, [r5, #12]
 8008d30:	0598      	lsls	r0, r3, #22
 8008d32:	d4f7      	bmi.n	8008d24 <_vfiprintf_r+0x44>
 8008d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d36:	f7ff fa79 	bl	800822c <__retarget_lock_release_recursive>
 8008d3a:	e7f3      	b.n	8008d24 <_vfiprintf_r+0x44>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d40:	2320      	movs	r3, #32
 8008d42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d4a:	2330      	movs	r3, #48	@ 0x30
 8008d4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008efc <_vfiprintf_r+0x21c>
 8008d50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d54:	f04f 0901 	mov.w	r9, #1
 8008d58:	4623      	mov	r3, r4
 8008d5a:	469a      	mov	sl, r3
 8008d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d60:	b10a      	cbz	r2, 8008d66 <_vfiprintf_r+0x86>
 8008d62:	2a25      	cmp	r2, #37	@ 0x25
 8008d64:	d1f9      	bne.n	8008d5a <_vfiprintf_r+0x7a>
 8008d66:	ebba 0b04 	subs.w	fp, sl, r4
 8008d6a:	d00b      	beq.n	8008d84 <_vfiprintf_r+0xa4>
 8008d6c:	465b      	mov	r3, fp
 8008d6e:	4622      	mov	r2, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7ff ffa2 	bl	8008cbc <__sfputs_r>
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f000 80a7 	beq.w	8008ecc <_vfiprintf_r+0x1ec>
 8008d7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d80:	445a      	add	r2, fp
 8008d82:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d84:	f89a 3000 	ldrb.w	r3, [sl]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 809f 	beq.w	8008ecc <_vfiprintf_r+0x1ec>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f04f 32ff 	mov.w	r2, #4294967295
 8008d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d98:	f10a 0a01 	add.w	sl, sl, #1
 8008d9c:	9304      	str	r3, [sp, #16]
 8008d9e:	9307      	str	r3, [sp, #28]
 8008da0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008da4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008da6:	4654      	mov	r4, sl
 8008da8:	2205      	movs	r2, #5
 8008daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dae:	4853      	ldr	r0, [pc, #332]	@ (8008efc <_vfiprintf_r+0x21c>)
 8008db0:	f7f7 fa4e 	bl	8000250 <memchr>
 8008db4:	9a04      	ldr	r2, [sp, #16]
 8008db6:	b9d8      	cbnz	r0, 8008df0 <_vfiprintf_r+0x110>
 8008db8:	06d1      	lsls	r1, r2, #27
 8008dba:	bf44      	itt	mi
 8008dbc:	2320      	movmi	r3, #32
 8008dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dc2:	0713      	lsls	r3, r2, #28
 8008dc4:	bf44      	itt	mi
 8008dc6:	232b      	movmi	r3, #43	@ 0x2b
 8008dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd2:	d015      	beq.n	8008e00 <_vfiprintf_r+0x120>
 8008dd4:	9a07      	ldr	r2, [sp, #28]
 8008dd6:	4654      	mov	r4, sl
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f04f 0c0a 	mov.w	ip, #10
 8008dde:	4621      	mov	r1, r4
 8008de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008de4:	3b30      	subs	r3, #48	@ 0x30
 8008de6:	2b09      	cmp	r3, #9
 8008de8:	d94b      	bls.n	8008e82 <_vfiprintf_r+0x1a2>
 8008dea:	b1b0      	cbz	r0, 8008e1a <_vfiprintf_r+0x13a>
 8008dec:	9207      	str	r2, [sp, #28]
 8008dee:	e014      	b.n	8008e1a <_vfiprintf_r+0x13a>
 8008df0:	eba0 0308 	sub.w	r3, r0, r8
 8008df4:	fa09 f303 	lsl.w	r3, r9, r3
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	9304      	str	r3, [sp, #16]
 8008dfc:	46a2      	mov	sl, r4
 8008dfe:	e7d2      	b.n	8008da6 <_vfiprintf_r+0xc6>
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	1d19      	adds	r1, r3, #4
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	9103      	str	r1, [sp, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	bfbb      	ittet	lt
 8008e0c:	425b      	neglt	r3, r3
 8008e0e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e12:	9307      	strge	r3, [sp, #28]
 8008e14:	9307      	strlt	r3, [sp, #28]
 8008e16:	bfb8      	it	lt
 8008e18:	9204      	strlt	r2, [sp, #16]
 8008e1a:	7823      	ldrb	r3, [r4, #0]
 8008e1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e1e:	d10a      	bne.n	8008e36 <_vfiprintf_r+0x156>
 8008e20:	7863      	ldrb	r3, [r4, #1]
 8008e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e24:	d132      	bne.n	8008e8c <_vfiprintf_r+0x1ac>
 8008e26:	9b03      	ldr	r3, [sp, #12]
 8008e28:	1d1a      	adds	r2, r3, #4
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	9203      	str	r2, [sp, #12]
 8008e2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e32:	3402      	adds	r4, #2
 8008e34:	9305      	str	r3, [sp, #20]
 8008e36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f0c <_vfiprintf_r+0x22c>
 8008e3a:	7821      	ldrb	r1, [r4, #0]
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	4650      	mov	r0, sl
 8008e40:	f7f7 fa06 	bl	8000250 <memchr>
 8008e44:	b138      	cbz	r0, 8008e56 <_vfiprintf_r+0x176>
 8008e46:	9b04      	ldr	r3, [sp, #16]
 8008e48:	eba0 000a 	sub.w	r0, r0, sl
 8008e4c:	2240      	movs	r2, #64	@ 0x40
 8008e4e:	4082      	lsls	r2, r0
 8008e50:	4313      	orrs	r3, r2
 8008e52:	3401      	adds	r4, #1
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5a:	4829      	ldr	r0, [pc, #164]	@ (8008f00 <_vfiprintf_r+0x220>)
 8008e5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e60:	2206      	movs	r2, #6
 8008e62:	f7f7 f9f5 	bl	8000250 <memchr>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d03f      	beq.n	8008eea <_vfiprintf_r+0x20a>
 8008e6a:	4b26      	ldr	r3, [pc, #152]	@ (8008f04 <_vfiprintf_r+0x224>)
 8008e6c:	bb1b      	cbnz	r3, 8008eb6 <_vfiprintf_r+0x1d6>
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	3307      	adds	r3, #7
 8008e72:	f023 0307 	bic.w	r3, r3, #7
 8008e76:	3308      	adds	r3, #8
 8008e78:	9303      	str	r3, [sp, #12]
 8008e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e7c:	443b      	add	r3, r7
 8008e7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e80:	e76a      	b.n	8008d58 <_vfiprintf_r+0x78>
 8008e82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e86:	460c      	mov	r4, r1
 8008e88:	2001      	movs	r0, #1
 8008e8a:	e7a8      	b.n	8008dde <_vfiprintf_r+0xfe>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	3401      	adds	r4, #1
 8008e90:	9305      	str	r3, [sp, #20]
 8008e92:	4619      	mov	r1, r3
 8008e94:	f04f 0c0a 	mov.w	ip, #10
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e9e:	3a30      	subs	r2, #48	@ 0x30
 8008ea0:	2a09      	cmp	r2, #9
 8008ea2:	d903      	bls.n	8008eac <_vfiprintf_r+0x1cc>
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0c6      	beq.n	8008e36 <_vfiprintf_r+0x156>
 8008ea8:	9105      	str	r1, [sp, #20]
 8008eaa:	e7c4      	b.n	8008e36 <_vfiprintf_r+0x156>
 8008eac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e7f0      	b.n	8008e98 <_vfiprintf_r+0x1b8>
 8008eb6:	ab03      	add	r3, sp, #12
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4b12      	ldr	r3, [pc, #72]	@ (8008f08 <_vfiprintf_r+0x228>)
 8008ebe:	a904      	add	r1, sp, #16
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f3af 8000 	nop.w
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	1c78      	adds	r0, r7, #1
 8008eca:	d1d6      	bne.n	8008e7a <_vfiprintf_r+0x19a>
 8008ecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ece:	07d9      	lsls	r1, r3, #31
 8008ed0:	d405      	bmi.n	8008ede <_vfiprintf_r+0x1fe>
 8008ed2:	89ab      	ldrh	r3, [r5, #12]
 8008ed4:	059a      	lsls	r2, r3, #22
 8008ed6:	d402      	bmi.n	8008ede <_vfiprintf_r+0x1fe>
 8008ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eda:	f7ff f9a7 	bl	800822c <__retarget_lock_release_recursive>
 8008ede:	89ab      	ldrh	r3, [r5, #12]
 8008ee0:	065b      	lsls	r3, r3, #25
 8008ee2:	f53f af1f 	bmi.w	8008d24 <_vfiprintf_r+0x44>
 8008ee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ee8:	e71e      	b.n	8008d28 <_vfiprintf_r+0x48>
 8008eea:	ab03      	add	r3, sp, #12
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4b05      	ldr	r3, [pc, #20]	@ (8008f08 <_vfiprintf_r+0x228>)
 8008ef2:	a904      	add	r1, sp, #16
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f7ff fc7f 	bl	80087f8 <_printf_i>
 8008efa:	e7e4      	b.n	8008ec6 <_vfiprintf_r+0x1e6>
 8008efc:	0800945a 	.word	0x0800945a
 8008f00:	08009464 	.word	0x08009464
 8008f04:	00000000 	.word	0x00000000
 8008f08:	08008cbd 	.word	0x08008cbd
 8008f0c:	08009460 	.word	0x08009460

08008f10 <__swbuf_r>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	460e      	mov	r6, r1
 8008f14:	4614      	mov	r4, r2
 8008f16:	4605      	mov	r5, r0
 8008f18:	b118      	cbz	r0, 8008f22 <__swbuf_r+0x12>
 8008f1a:	6a03      	ldr	r3, [r0, #32]
 8008f1c:	b90b      	cbnz	r3, 8008f22 <__swbuf_r+0x12>
 8008f1e:	f7ff f801 	bl	8007f24 <__sinit>
 8008f22:	69a3      	ldr	r3, [r4, #24]
 8008f24:	60a3      	str	r3, [r4, #8]
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	071a      	lsls	r2, r3, #28
 8008f2a:	d501      	bpl.n	8008f30 <__swbuf_r+0x20>
 8008f2c:	6923      	ldr	r3, [r4, #16]
 8008f2e:	b943      	cbnz	r3, 8008f42 <__swbuf_r+0x32>
 8008f30:	4621      	mov	r1, r4
 8008f32:	4628      	mov	r0, r5
 8008f34:	f000 f82a 	bl	8008f8c <__swsetup_r>
 8008f38:	b118      	cbz	r0, 8008f42 <__swbuf_r+0x32>
 8008f3a:	f04f 37ff 	mov.w	r7, #4294967295
 8008f3e:	4638      	mov	r0, r7
 8008f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	6922      	ldr	r2, [r4, #16]
 8008f46:	1a98      	subs	r0, r3, r2
 8008f48:	6963      	ldr	r3, [r4, #20]
 8008f4a:	b2f6      	uxtb	r6, r6
 8008f4c:	4283      	cmp	r3, r0
 8008f4e:	4637      	mov	r7, r6
 8008f50:	dc05      	bgt.n	8008f5e <__swbuf_r+0x4e>
 8008f52:	4621      	mov	r1, r4
 8008f54:	4628      	mov	r0, r5
 8008f56:	f7ff fdf3 	bl	8008b40 <_fflush_r>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d1ed      	bne.n	8008f3a <__swbuf_r+0x2a>
 8008f5e:	68a3      	ldr	r3, [r4, #8]
 8008f60:	3b01      	subs	r3, #1
 8008f62:	60a3      	str	r3, [r4, #8]
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	6022      	str	r2, [r4, #0]
 8008f6a:	701e      	strb	r6, [r3, #0]
 8008f6c:	6962      	ldr	r2, [r4, #20]
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d004      	beq.n	8008f7e <__swbuf_r+0x6e>
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	07db      	lsls	r3, r3, #31
 8008f78:	d5e1      	bpl.n	8008f3e <__swbuf_r+0x2e>
 8008f7a:	2e0a      	cmp	r6, #10
 8008f7c:	d1df      	bne.n	8008f3e <__swbuf_r+0x2e>
 8008f7e:	4621      	mov	r1, r4
 8008f80:	4628      	mov	r0, r5
 8008f82:	f7ff fddd 	bl	8008b40 <_fflush_r>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d0d9      	beq.n	8008f3e <__swbuf_r+0x2e>
 8008f8a:	e7d6      	b.n	8008f3a <__swbuf_r+0x2a>

08008f8c <__swsetup_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4b29      	ldr	r3, [pc, #164]	@ (8009034 <__swsetup_r+0xa8>)
 8008f90:	4605      	mov	r5, r0
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	460c      	mov	r4, r1
 8008f96:	b118      	cbz	r0, 8008fa0 <__swsetup_r+0x14>
 8008f98:	6a03      	ldr	r3, [r0, #32]
 8008f9a:	b90b      	cbnz	r3, 8008fa0 <__swsetup_r+0x14>
 8008f9c:	f7fe ffc2 	bl	8007f24 <__sinit>
 8008fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa4:	0719      	lsls	r1, r3, #28
 8008fa6:	d422      	bmi.n	8008fee <__swsetup_r+0x62>
 8008fa8:	06da      	lsls	r2, r3, #27
 8008faa:	d407      	bmi.n	8008fbc <__swsetup_r+0x30>
 8008fac:	2209      	movs	r2, #9
 8008fae:	602a      	str	r2, [r5, #0]
 8008fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fb4:	81a3      	strh	r3, [r4, #12]
 8008fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fba:	e033      	b.n	8009024 <__swsetup_r+0x98>
 8008fbc:	0758      	lsls	r0, r3, #29
 8008fbe:	d512      	bpl.n	8008fe6 <__swsetup_r+0x5a>
 8008fc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fc2:	b141      	cbz	r1, 8008fd6 <__swsetup_r+0x4a>
 8008fc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	d002      	beq.n	8008fd2 <__swsetup_r+0x46>
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f7ff f94d 	bl	800826c <_free_r>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fdc:	81a3      	strh	r3, [r4, #12]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	f043 0308 	orr.w	r3, r3, #8
 8008fec:	81a3      	strh	r3, [r4, #12]
 8008fee:	6923      	ldr	r3, [r4, #16]
 8008ff0:	b94b      	cbnz	r3, 8009006 <__swsetup_r+0x7a>
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ffc:	d003      	beq.n	8009006 <__swsetup_r+0x7a>
 8008ffe:	4621      	mov	r1, r4
 8009000:	4628      	mov	r0, r5
 8009002:	f000 f88b 	bl	800911c <__smakebuf_r>
 8009006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800900a:	f013 0201 	ands.w	r2, r3, #1
 800900e:	d00a      	beq.n	8009026 <__swsetup_r+0x9a>
 8009010:	2200      	movs	r2, #0
 8009012:	60a2      	str	r2, [r4, #8]
 8009014:	6962      	ldr	r2, [r4, #20]
 8009016:	4252      	negs	r2, r2
 8009018:	61a2      	str	r2, [r4, #24]
 800901a:	6922      	ldr	r2, [r4, #16]
 800901c:	b942      	cbnz	r2, 8009030 <__swsetup_r+0xa4>
 800901e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009022:	d1c5      	bne.n	8008fb0 <__swsetup_r+0x24>
 8009024:	bd38      	pop	{r3, r4, r5, pc}
 8009026:	0799      	lsls	r1, r3, #30
 8009028:	bf58      	it	pl
 800902a:	6962      	ldrpl	r2, [r4, #20]
 800902c:	60a2      	str	r2, [r4, #8]
 800902e:	e7f4      	b.n	800901a <__swsetup_r+0x8e>
 8009030:	2000      	movs	r0, #0
 8009032:	e7f7      	b.n	8009024 <__swsetup_r+0x98>
 8009034:	200000d4 	.word	0x200000d4

08009038 <_raise_r>:
 8009038:	291f      	cmp	r1, #31
 800903a:	b538      	push	{r3, r4, r5, lr}
 800903c:	4605      	mov	r5, r0
 800903e:	460c      	mov	r4, r1
 8009040:	d904      	bls.n	800904c <_raise_r+0x14>
 8009042:	2316      	movs	r3, #22
 8009044:	6003      	str	r3, [r0, #0]
 8009046:	f04f 30ff 	mov.w	r0, #4294967295
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800904e:	b112      	cbz	r2, 8009056 <_raise_r+0x1e>
 8009050:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009054:	b94b      	cbnz	r3, 800906a <_raise_r+0x32>
 8009056:	4628      	mov	r0, r5
 8009058:	f000 f830 	bl	80090bc <_getpid_r>
 800905c:	4622      	mov	r2, r4
 800905e:	4601      	mov	r1, r0
 8009060:	4628      	mov	r0, r5
 8009062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009066:	f000 b817 	b.w	8009098 <_kill_r>
 800906a:	2b01      	cmp	r3, #1
 800906c:	d00a      	beq.n	8009084 <_raise_r+0x4c>
 800906e:	1c59      	adds	r1, r3, #1
 8009070:	d103      	bne.n	800907a <_raise_r+0x42>
 8009072:	2316      	movs	r3, #22
 8009074:	6003      	str	r3, [r0, #0]
 8009076:	2001      	movs	r0, #1
 8009078:	e7e7      	b.n	800904a <_raise_r+0x12>
 800907a:	2100      	movs	r1, #0
 800907c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009080:	4620      	mov	r0, r4
 8009082:	4798      	blx	r3
 8009084:	2000      	movs	r0, #0
 8009086:	e7e0      	b.n	800904a <_raise_r+0x12>

08009088 <raise>:
 8009088:	4b02      	ldr	r3, [pc, #8]	@ (8009094 <raise+0xc>)
 800908a:	4601      	mov	r1, r0
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	f7ff bfd3 	b.w	8009038 <_raise_r>
 8009092:	bf00      	nop
 8009094:	200000d4 	.word	0x200000d4

08009098 <_kill_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d07      	ldr	r5, [pc, #28]	@ (80090b8 <_kill_r+0x20>)
 800909c:	2300      	movs	r3, #0
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	4611      	mov	r1, r2
 80090a4:	602b      	str	r3, [r5, #0]
 80090a6:	f7f7 fe91 	bl	8000dcc <_kill>
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	d102      	bne.n	80090b4 <_kill_r+0x1c>
 80090ae:	682b      	ldr	r3, [r5, #0]
 80090b0:	b103      	cbz	r3, 80090b4 <_kill_r+0x1c>
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	bd38      	pop	{r3, r4, r5, pc}
 80090b6:	bf00      	nop
 80090b8:	20000634 	.word	0x20000634

080090bc <_getpid_r>:
 80090bc:	f7f7 be7e 	b.w	8000dbc <_getpid>

080090c0 <_malloc_usable_size_r>:
 80090c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090c4:	1f18      	subs	r0, r3, #4
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	bfbc      	itt	lt
 80090ca:	580b      	ldrlt	r3, [r1, r0]
 80090cc:	18c0      	addlt	r0, r0, r3
 80090ce:	4770      	bx	lr

080090d0 <__swhatbuf_r>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	460c      	mov	r4, r1
 80090d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d8:	2900      	cmp	r1, #0
 80090da:	b096      	sub	sp, #88	@ 0x58
 80090dc:	4615      	mov	r5, r2
 80090de:	461e      	mov	r6, r3
 80090e0:	da0d      	bge.n	80090fe <__swhatbuf_r+0x2e>
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090e8:	f04f 0100 	mov.w	r1, #0
 80090ec:	bf14      	ite	ne
 80090ee:	2340      	movne	r3, #64	@ 0x40
 80090f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090f4:	2000      	movs	r0, #0
 80090f6:	6031      	str	r1, [r6, #0]
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	b016      	add	sp, #88	@ 0x58
 80090fc:	bd70      	pop	{r4, r5, r6, pc}
 80090fe:	466a      	mov	r2, sp
 8009100:	f000 f848 	bl	8009194 <_fstat_r>
 8009104:	2800      	cmp	r0, #0
 8009106:	dbec      	blt.n	80090e2 <__swhatbuf_r+0x12>
 8009108:	9901      	ldr	r1, [sp, #4]
 800910a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800910e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009112:	4259      	negs	r1, r3
 8009114:	4159      	adcs	r1, r3
 8009116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800911a:	e7eb      	b.n	80090f4 <__swhatbuf_r+0x24>

0800911c <__smakebuf_r>:
 800911c:	898b      	ldrh	r3, [r1, #12]
 800911e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009120:	079d      	lsls	r5, r3, #30
 8009122:	4606      	mov	r6, r0
 8009124:	460c      	mov	r4, r1
 8009126:	d507      	bpl.n	8009138 <__smakebuf_r+0x1c>
 8009128:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	6123      	str	r3, [r4, #16]
 8009130:	2301      	movs	r3, #1
 8009132:	6163      	str	r3, [r4, #20]
 8009134:	b003      	add	sp, #12
 8009136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009138:	ab01      	add	r3, sp, #4
 800913a:	466a      	mov	r2, sp
 800913c:	f7ff ffc8 	bl	80090d0 <__swhatbuf_r>
 8009140:	9f00      	ldr	r7, [sp, #0]
 8009142:	4605      	mov	r5, r0
 8009144:	4639      	mov	r1, r7
 8009146:	4630      	mov	r0, r6
 8009148:	f7ff f904 	bl	8008354 <_malloc_r>
 800914c:	b948      	cbnz	r0, 8009162 <__smakebuf_r+0x46>
 800914e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009152:	059a      	lsls	r2, r3, #22
 8009154:	d4ee      	bmi.n	8009134 <__smakebuf_r+0x18>
 8009156:	f023 0303 	bic.w	r3, r3, #3
 800915a:	f043 0302 	orr.w	r3, r3, #2
 800915e:	81a3      	strh	r3, [r4, #12]
 8009160:	e7e2      	b.n	8009128 <__smakebuf_r+0xc>
 8009162:	89a3      	ldrh	r3, [r4, #12]
 8009164:	6020      	str	r0, [r4, #0]
 8009166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009172:	b15b      	cbz	r3, 800918c <__smakebuf_r+0x70>
 8009174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009178:	4630      	mov	r0, r6
 800917a:	f000 f81d 	bl	80091b8 <_isatty_r>
 800917e:	b128      	cbz	r0, 800918c <__smakebuf_r+0x70>
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	f023 0303 	bic.w	r3, r3, #3
 8009186:	f043 0301 	orr.w	r3, r3, #1
 800918a:	81a3      	strh	r3, [r4, #12]
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	431d      	orrs	r5, r3
 8009190:	81a5      	strh	r5, [r4, #12]
 8009192:	e7cf      	b.n	8009134 <__smakebuf_r+0x18>

08009194 <_fstat_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d07      	ldr	r5, [pc, #28]	@ (80091b4 <_fstat_r+0x20>)
 8009198:	2300      	movs	r3, #0
 800919a:	4604      	mov	r4, r0
 800919c:	4608      	mov	r0, r1
 800919e:	4611      	mov	r1, r2
 80091a0:	602b      	str	r3, [r5, #0]
 80091a2:	f7f7 fe73 	bl	8000e8c <_fstat>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	d102      	bne.n	80091b0 <_fstat_r+0x1c>
 80091aa:	682b      	ldr	r3, [r5, #0]
 80091ac:	b103      	cbz	r3, 80091b0 <_fstat_r+0x1c>
 80091ae:	6023      	str	r3, [r4, #0]
 80091b0:	bd38      	pop	{r3, r4, r5, pc}
 80091b2:	bf00      	nop
 80091b4:	20000634 	.word	0x20000634

080091b8 <_isatty_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d06      	ldr	r5, [pc, #24]	@ (80091d4 <_isatty_r+0x1c>)
 80091bc:	2300      	movs	r3, #0
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	602b      	str	r3, [r5, #0]
 80091c4:	f7f7 fe72 	bl	8000eac <_isatty>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d102      	bne.n	80091d2 <_isatty_r+0x1a>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	b103      	cbz	r3, 80091d2 <_isatty_r+0x1a>
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	20000634 	.word	0x20000634

080091d8 <_init>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	bf00      	nop
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr

080091e4 <_fini>:
 80091e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e6:	bf00      	nop
 80091e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ea:	bc08      	pop	{r3}
 80091ec:	469e      	mov	lr, r3
 80091ee:	4770      	bx	lr
